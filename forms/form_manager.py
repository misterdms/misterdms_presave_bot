"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º –¥–ª—è –ü–õ–ê–ù–ê 3
Do Presave Reminder Bot v27

–°–¢–ê–¢–£–°: –í –†–ê–ó–†–ê–ë–û–¢–ö–ï (–ó–ê–ì–õ–£–®–ö–ê)
–¶–ï–õ–¨: –ü–æ—à–∞–≥–æ–≤—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤—ã –∏ –æ—Ç—á–µ—Ç–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
"""

import os
from typing import Optional, Dict, Any, List
from enum import Enum
from datetime import datetime, timedelta
from utils.logger import get_logger

logger = get_logger(__name__)

# ============================================
# –°–û–°–¢–û–Ø–ù–ò–Ø –§–û–†–ú (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

class FormState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ö"""
    # IDLE = "idle"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ñ–æ—Ä–º–µ
    # PRESAVE_REQUEST_START = "presave_request_start"
    # PRESAVE_REQUEST_ARTIST = "presave_request_artist" 
    # PRESAVE_REQUEST_TRACK = "presave_request_track"
    # PRESAVE_REQUEST_LINK = "presave_request_link"
    # PRESAVE_REQUEST_DEADLINE = "presave_request_deadline"
    # APPROVAL_CLAIM_START = "approval_claim_start"
    # APPROVAL_CLAIM_ARTIST = "approval_claim_artist"
    # APPROVAL_CLAIM_SCREENSHOT = "approval_claim_screenshot"
    pass

class FormType(Enum):
    """–¢–∏–ø—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º"""
    # PRESAVE_REQUEST = "presave_request"  # –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤
    # APPROVAL_CLAIM = "approval_claim"    # –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø—Ä–µ—Å–µ–π–≤–µ
    pass

# ============================================
# –ú–ï–ù–ï–î–ñ–ï–† –§–û–†–ú (–ó–ê–ì–õ–£–®–ö–ê)
# ============================================

class FormManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º"""
    
    def __init__(self):
        # self.user_states = {}  # user_id -> FormState
        # self.form_data = {}    # user_id -> Dict[str, Any]
        # self.form_timeouts = {} # user_id -> datetime
        logger.info("üìù FormManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ó–ê–ì–õ–£–®–ö–ê)")
    
    # def start_form(self, user_id: int, form_type: FormType) -> str:
    #     """–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É"""
    #     pass
    
    # def process_form_input(self, user_id: int, input_text: str) -> str:
    #     """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–µ"""
    #     pass
    
    # def cancel_form(self, user_id: int) -> str:
    #     """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É"""
    #     pass
    
    # def get_user_state(self, user_id: int) -> FormState:
    #     """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    #     pass
    
    # def set_user_state(self, user_id: int, state: FormState):
    #     """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    #     pass
    
    # def save_form_data(self, user_id: int, key: str, value: Any):
    #     """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"""
    #     pass
    
    # def get_form_data(self, user_id: int) -> Dict[str, Any]:
    #     """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    #     pass
    
    # def clear_form_data(self, user_id: int):
    #     """–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"""
    #     pass
    
    # def check_form_timeouts(self):
    #     """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã —Ñ–æ—Ä–º"""
    #     pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ—Ä–º
form_manager = None

def init_forms_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä–º"""
    global form_manager
    
    if os.getenv('ENABLE_PLAN_3_FEATURES', 'false').lower() != 'true':
        logger.info("üö´ –°–∏—Å—Ç–µ–º–∞ —Ñ–æ—Ä–º –æ—Ç–∫–ª—é—á–µ–Ω–∞ (ENABLE_PLAN_3_FEATURES=false)")
        return
    
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º...")
    form_manager = FormManager()
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ñ–æ—Ä–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def get_form_manager() -> Optional[FormManager]:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ—Ä–º"""
    return form_manager

# ============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–û–†–ú (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

async def handle_presave_request_form(user_id: int, step: str = "start") -> str:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        step: –¢–µ–∫—É—â–∏–π —à–∞–≥ —Ñ–æ—Ä–º—ã
        
    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤
    message = "üéµ **–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤** (–ü–õ–ê–ù 3 –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n"
    message += "üìã –ë—É–¥—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    message += "‚Ä¢ –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–∞\n"
    message += "‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏ —Å—Å—ã–ª–∫–∏\n"
    message += "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞\n"
    message += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–∫–∏"
    
    return message

async def handle_approval_claim_form(user_id: int, step: str = "start") -> str:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø—Ä–µ—Å–µ–π–≤–µ
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        step: –¢–µ–∫—É—â–∏–π —à–∞–≥ —Ñ–æ—Ä–º—ã
        
    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞
    message = "‚úÖ **–§–æ—Ä–º–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–µ—Å–µ–π–≤–µ** (–ü–õ–ê–ù 3 –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n"
    message += "üìã –ë—É–¥—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    message += "‚Ä¢ –í—ã–±–æ—Ä –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –∑–∞—è–≤–æ–∫\n"
    message += "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–µ—Å–µ–π–≤–∞\n"
    message += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞—Ä–º—ã\n"
    message += "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞ –æ –ø–æ–º–æ—â–∏"
    
    return message

async def handle_form_message(user_id: int, message_text: str) -> Optional[str]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
    
    Returns:
        Optional[str]: –û—Ç–≤–µ—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ñ–æ—Ä–º–µ, –∏–Ω–∞—á–µ None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
    if form_manager:
        # user_state = form_manager.get_user_state(user_id)
        # if user_state != FormState.IDLE:
        #     return form_manager.process_form_input(user_id, message_text)
        pass
    
    return None

# ============================================
# –í–ê–õ–ò–î–ê–¢–û–†–´ –§–û–†–ú (–ó–ê–ì–õ–£–®–ö–ò) 
# ============================================

def validate_artist_name(artist_name: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞"""
    # return len(artist_name.strip()) >= 2 and len(artist_name) <= 100
    return True

def validate_track_name(track_name: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    # return len(track_name.strip()) >= 2 and len(track_name) <= 200
    return True

def validate_presave_link(link: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤"""
    # presave_domains = ['distrokid.com', 'spotify.com', 'apple.com', 'deezer.com']
    # return any(domain in link.lower() for domain in presave_domains)
    return True

def validate_deadline_date(date_str: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞"""
    # try:
    #     deadline = datetime.strptime(date_str, '%d.%m.%Y')
    #     return deadline >= datetime.now() and deadline <= datetime.now() + timedelta(days=90)
    # except ValueError:
    #     return False
    return True

# ============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

def format_form_progress(current_step: int, total_steps: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ñ–æ—Ä–º—ã"""
    # progress_bar = "‚ñà" * current_step + "‚ñë" * (total_steps - current_step)
    # return f"[{progress_bar}] {current_step}/{total_steps}"
    return f"–®–∞–≥ {current_step}/{total_steps}"

def get_form_timeout_minutes() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç —Ñ–æ—Ä–º—ã –≤ –º–∏–Ω—É—Ç–∞—Ö"""
    return int(os.getenv('FORM_TIMEOUT_MINUTES', '30'))

def is_forms_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä–º"""
    return os.getenv('FORMS_ENABLED', 'false').lower() == 'true'

def get_max_screenshots_per_claim() -> int:
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ"""
    return int(os.getenv('MAX_SCREENSHOTS_PER_CLAIM', '5'))