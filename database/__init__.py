"""
–ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö - Do Presave Reminder Bot v25+
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –º–æ–¥–µ–ª–µ–π –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö

–ü–õ–ê–ù 1: –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ê–ö–¢–ò–í–ù–´–ï)
–ü–õ–ê–ù 2: –ú–æ–¥–µ–ª–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ò)
–ü–õ–ê–ù 3: –ú–æ–¥–µ–ª–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ò–ò/—Ñ–æ—Ä–º (–ó–ê–ì–õ–£–®–ö–ò) 
–ü–õ–ê–ù 4: –ú–æ–¥–µ–ª–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ backup (–ó–ê–ì–õ–£–®–ö–ò)
"""

from utils.logger import get_logger

logger = get_logger(__name__)

# ============================================
# –ü–õ–ê–ù 1: –ë–ê–ó–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ë–î (–ê–ö–¢–ò–í–ù–´–ï)
# ============================================

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –≤—Å–µ–≥–¥–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
from .models import (
    init_database_models,
    # –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –ü–õ–ê–ù 1
    User,
    Link,
    Settings,
    # –ó–∞–≥–ª—É—à–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤
    # UserKarma,      # –ü–õ–ê–ù 2
    # KarmaHistory,   # –ü–õ–ê–ù 2
    # PresaveRequest, # –ü–õ–ê–ù 3
    # ApprovalClaim,  # –ü–õ–ê–ù 3
    # ClaimScreenshot,# –ü–õ–ê–ù 3
    # BackupLog,      # –ü–õ–ê–ù 4
)

from .manager import DatabaseManager

# –ü–õ–ê–ù 1: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ê–ö–¢–ò–í–ù–ê–Ø)
from .analytics import AnalyticsManager

# ============================================
# –ü–õ–ê–ù 2: –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ö–ê–†–ú–´ (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

# TODO: –ò–º–ø–æ—Ä—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ü–õ–ê–ù–ï 2
# from .karma_manager import KarmaDataManager

# ============================================
# –ü–õ–ê–ù 3: –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ò–ò –ò –§–û–†–ú (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

# TODO: –ò–º–ø–æ—Ä—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ü–õ–ê–ù–ï 3
# from .forms_manager import FormsDataManager
# from .ai_manager import AIDataManager

# ============================================
# –ü–õ–ê–ù 4: –ö–û–ú–ü–û–ù–ï–ù–¢–´ BACKUP (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

# TODO: –ò–º–ø–æ—Ä—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ü–õ–ê–ù–ï 4
# from .migrations import MigrationsManager
# from .backup_manager import BackupDataManager

# ============================================
# –≠–ö–°–ü–û–†–¢ –ê–ö–¢–ò–í–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# ============================================

__all__ = [
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    'init_database_models',
    
    # –ü–õ–ê–ù 1 (–ê–ö–¢–ò–í–ù–´–ï)
    'DatabaseManager',
    'AnalyticsManager',
    'User',
    'Link', 
    'Settings',
    
    # –ü–õ–ê–ù 2 (–ó–ê–ì–õ–£–®–ö–ò)
    # 'KarmaDataManager',
    # 'UserKarma',
    # 'KarmaHistory',
    
    # –ü–õ–ê–ù 3 (–ó–ê–ì–õ–£–®–ö–ò)
    # 'FormsDataManager',
    # 'AIDataManager',
    # 'PresaveRequest',
    # 'ApprovalClaim',
    # 'ClaimScreenshot',
    
    # –ü–õ–ê–ù 4 (–ó–ê–ì–õ–£–®–ö–ò)
    # 'MigrationsManager',
    # 'BackupDataManager',
    # 'BackupLog',
]

# ============================================
# –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================

def init_database(database_url: str = None):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    
    Args:
        database_url: URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
        
    Returns:
        DatabaseManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
    """
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
        db_manager = DatabaseManager(database_url)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        init_database_models(db_manager.engine)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        db_manager.create_tables()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        db_manager.init_default_settings()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return db_manager
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

def get_database_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ë–î"""
    return {
        'plan_1_tables': [
            'users - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞',
            'links - —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 
            'settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞'
        ],
        'plan_2_tables': [
            # 'user_karma - –∫–∞—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',        # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            # 'karma_history - –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä–º—ã'   # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        ],
        'plan_3_tables': [
            # 'presave_requests - –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤—ã',     # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            # 'approval_claims - –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã',       # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            # 'claim_screenshots - —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞—è–≤–æ–∫',      # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            # 'auto_karma_log - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è' # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        ],
        'plan_4_tables': [
            # 'backup_logs - –ª–æ–≥–∏ backup –æ–ø–µ—Ä–∞—Ü–∏–π',        # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            # 'migration_logs - –ª–æ–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–π'             # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        ]
    }

def validate_database_connection(db_manager: DatabaseManager) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        with db_manager.get_session() as session:
            result = session.execute('SELECT 1').scalar()
            return result == 1
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ë–î: {e}")
        return False

def get_database_stats(db_manager: DatabaseManager) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    """
    try:
        stats = {}
        
        with db_manager.get_session() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º –ü–õ–ê–ù 1
            stats['users'] = session.query(User).count()
            stats['links'] = session.query(Link).count()
            stats['settings'] = session.query(Settings).count()
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
            # if PLAN_2_ENABLED:
            #     stats['user_karma'] = session.query(UserKarma).count()
            
            # if PLAN_3_ENABLED:
            #     stats['presave_requests'] = session.query(PresaveRequest).count()
            
            # if PLAN_4_ENABLED:
            #     stats['backup_logs'] = session.query(BackupLog).count()
            
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
        return {}

# ============================================
# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò
# ============================================

def create_test_data(db_manager: DatabaseManager):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    –¢–û–õ–¨–ö–û –¥–ª—è development —Ä–µ–∂–∏–º–∞!
    """
    try:
        logger.warning("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è development)...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        import os
        if os.getenv('DEVELOPMENT_MODE', 'false').lower() != 'true':
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ DEVELOPMENT_MODE")
            return
        
        with db_manager.get_session() as session:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = db_manager.get_or_create_user(
                user_id=12345,
                username='test_user',
                first_name='Test',
                last_name='User'
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
            db_manager.save_link(
                user_id=12345,
                url='https://example.com/test',
                thread_id=3,
                message_id=100
            )
            
            session.commit()
            
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

# ============================================
# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–£–õ–ï
# ============================================

def get_module_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ database"""
    return {
        'name': 'database',
        'version': 'v25+',
        'description': '–†–∞–±–æ—Ç–∞ —Å PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
        'engine': 'PostgreSQL + SQLAlchemy',
        'plans': {
            'plan_1': '–ë–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –ê–ö–¢–ò–í–ù–´',
            'plan_2': '–¢–∞–±–ª–∏—Ü—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä–º—ã - –í –†–ê–ó–†–ê–ë–û–¢–ö–ï',
            'plan_3': '–¢–∞–±–ª–∏—Ü—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ò–ò/—Ñ–æ—Ä–º - –í –†–ê–ó–†–ê–ë–û–¢–ö–ï',
            'plan_4': '–¢–∞–±–ª–∏—Ü—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ backup - –í –†–ê–ó–†–ê–ë–û–¢–ö–ï'
        }
    }

logger.info("üì¶ –ú–æ–¥—É–ª—å database/__init__.py –∑–∞–≥—Ä—É–∂–µ–Ω")