"""
database/analytics.py - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
–ü–õ–ê–ù 1: –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ + –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤
"""

from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from sqlalchemy import func, desc
from sqlalchemy.orm import Session

from utils.logger import get_logger
from database.models import User, Link, Settings
# –ü–õ–ê–ù 2: from database.models import UserKarma, KarmaHistory  # –ó–ê–ì–õ–£–®–ö–ê
# –ü–õ–ê–ù 3: from database.models import FormSubmission, AIInteraction  # –ó–ê–ì–õ–£–®–ö–ê

logger = get_logger(__name__)

class AnalyticsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
    
    def __init__(self, db_manager):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.db_manager = db_manager
        logger.info("‚úÖ AnalyticsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # ============================================
    # –ü–õ–ê–ù 1: –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ê–ö–¢–ò–í–ù–û)
    # ============================================
    
    def get_user_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /mystat"""
        try:
            with self.db_manager.get_session() as session:
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user = session.query(User).filter(User.telegram_id == user_id).first()
                if not user:
                    return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                links_count = session.query(Link).filter(Link.user_id == user_id).count()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                month_ago = datetime.utcnow() - timedelta(days=30)
                recent_links = session.query(Link).filter(
                    Link.user_id == user_id,
                    Link.created_at >= month_ago
                ).count()
                
                stats = {
                    "user_id": user_id,
                    "username": user.username,
                    "first_name": user.first_name,
                    "registered_at": user.created_at,
                    "total_links": links_count,
                    "links_last_30_days": recent_links,
                    "last_activity": user.last_activity,
                    # –ü–õ–ê–ù 2: –ö–∞—Ä–º–∞ (–ó–ê–ì–õ–£–®–ö–ò)
                    "karma_points": 0,  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä–º—É –≤ –ü–ª–∞–Ω–µ 2
                    "rank": "ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π",  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–≤–∞–Ω–∏–µ –≤ –ü–ª–∞–Ω–µ 2
                    "rank_progress": "0/5",  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ü–ª–∞–Ω–µ 2
                    # –ü–õ–ê–ù 3: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ó–ê–ì–õ–£–®–ö–ò)
                    "presave_requests": 0,  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –ü–ª–∞–Ω–µ 3
                    "approved_presaves": 0,  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –ü–ª–∞–Ω–µ 3
                    "ai_interactions": 0,  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –ü–ª–∞–Ω–µ 3
                }
                
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω–∞", user_id=user_id)
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"}
    
    def get_community_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        try:
            with self.db_manager.get_session() as session:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                total_users = session.query(User).count()
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                month_ago = datetime.utcnow() - timedelta(days=30)
                active_users = session.query(User).filter(
                    User.last_activity >= month_ago
                ).count()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
                total_links = session.query(Link).count()
                
                # –°—Å—ã–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                week_ago = datetime.utcnow() - timedelta(days=7)
                recent_links = session.query(Link).filter(
                    Link.created_at >= week_ago
                ).count()
                
                stats = {
                    "total_users": total_users,
                    "active_users_30d": active_users,
                    "total_links": total_links,
                    "links_last_7d": recent_links,
                    "updated_at": datetime.utcnow(),
                    # –ü–õ–ê–ù 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ò)
                    "avg_karma": 0,  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –ü–ª–∞–Ω–µ 2
                    "top_karma_users": [],  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –ü–ª–∞–Ω–µ 2
                    # –ü–õ–ê–ù 3: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ó–ê–ì–õ–£–®–ö–ò)
                    "total_forms_submitted": 0,  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –ü–ª–∞–Ω–µ 3
                    "ai_interactions_today": 0,  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –ü–ª–∞–Ω–µ 3
                }
                
                logger.info("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {e}")
            return {"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"}
    
    def get_links_history(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ /last10links –∏ /last30links"""
        try:
            with self.db_manager.get_session() as session:
                links = session.query(Link).join(User).order_by(
                    desc(Link.created_at)
                ).limit(limit).all()
                
                history = []
                for link in links:
                    history.append({
                        "id": link.id,
                        "url": link.url,
                        "user_id": link.user_id,
                        "username": link.user.username or "Unknown",
                        "first_name": link.user.first_name or "Unknown",
                        "created_at": link.created_at,
                        "message_id": link.message_id,
                        "thread_id": link.thread_id
                    })
                
                logger.info(f"üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∞: {len(history)} –∑–∞–ø–∏—Å–µ–π")
                return history
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
            return []
    
    # ============================================
    # –ü–õ–ê–ù 2: –ê–ù–ê–õ–ò–¢–ò–ö–ê –ö–ê–†–ú–´ (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    def get_karma_leaderboard(self, limit: int = 10) -> List[Dict]:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        logger.debug("üîÑ get_karma_leaderboard - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        return []
    
    def get_karma_history(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        logger.debug(f"üîÑ get_karma_history –¥–ª—è {user_id} - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        return []
    
    def calculate_user_rank(self, karma_points: int) -> Dict:
        """–ó–ê–ì–õ–£–®–ö–ê: –†–∞—Å—á–µ—Ç –∑–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ä–º–µ"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        logger.debug("üîÑ calculate_user_rank - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        return {
            "rank": "ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π",
            "emoji": "ü•â",
            "progress": "0/5",
            "next_rank": "ü•à –ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
        }
    
    # ============================================
    # –ü–õ–ê–ù 3: –ê–ù–ê–õ–ò–¢–ò–ö–ê –§–û–†–ú –ò –ò–ò (–ó–ê–ì–õ–£–®–ö–ò) 
    # ============================================
    
    def get_forms_stats(self) -> Dict:
        """–ó–ê–ì–õ–£–®–ö–ê: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏ —Ñ–æ—Ä–º –∏ –∑–∞—è–≤–æ–∫"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ get_forms_stats - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return {
            "total_submissions": 0,
            "pending_approval": 0,
            "approved_today": 0,
            "rejection_rate": 0
        }
    
    def get_ai_usage_stats(self) -> Dict:
        """–ó–ê–ì–õ–£–®–ö–ê: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ get_ai_usage_stats - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return {
            "interactions_today": 0,
            "total_tokens_used": 0,
            "avg_response_time": 0,
            "most_active_users": []
        }
    
    def get_gratitude_stats(self) -> Dict:
        """–ó–ê–ì–õ–£–®–ö–ê: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ get_gratitude_stats - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return {
            "auto_karma_given": 0,
            "gratitude_detected": 0,
            "top_grateful_users": []
        }
    
    # ============================================
    # –ü–õ–ê–ù 4: –ê–ù–ê–õ–ò–¢–ò–ö–ê BACKUP (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    def get_backup_stats(self) -> Dict:
        """–ó–ê–ì–õ–£–®–ö–ê: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã backup"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 4
        logger.debug("üîÑ get_backup_stats - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 4)")
        return {
            "database_age_days": 0,
            "last_backup_date": None,
            "backup_size_mb": 0,
            "auto_backups_count": 0
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics_manager = None

def init_analytics_manager(db_manager):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    global analytics_manager
    analytics_manager = AnalyticsManager(db_manager)
    logger.info("‚úÖ AnalyticsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ")

def get_analytics_manager() -> AnalyticsManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if analytics_manager is None:
        raise RuntimeError("AnalyticsManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return analytics_manager


# ============================================
# –ë–´–°–¢–†–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –•–ï–ù–î–õ–ï–†–ê–•
# ============================================

def get_user_quick_stats(user_id: int) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    try:
        manager = get_analytics_manager()
        stats = manager.get_user_stats(user_id)
        
        if "error" in stats:
            return f"‚ùå {stats['error']}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result = f"""
üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** @{stats.get('username', 'unknown')}

üîó **–°—Å—ã–ª–∫–∏:** {stats['total_links']} –≤—Å–µ–≥–æ / {stats['links_last_30_days']} –∑–∞ –º–µ—Å—è—Ü
üèÜ **–ó–≤–∞–Ω–∏–µ:** {stats['rank']} ({stats['rank_progress']})
üíé **–ö–∞—Ä–º–∞:** {stats['karma_points']} –±–∞–ª–ª–æ–≤

üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {stats['registered_at'].strftime('%d.%m.%Y') if stats['registered_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üïí **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {stats['last_activity'].strftime('%d.%m.%Y %H:%M') if stats['last_activity'] else '–î–∞–≤–Ω–æ'}
"""
        
        # –ü–õ–ê–ù 3: –î–æ–±–∞–≤–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if stats['presave_requests'] > 0 or stats['approved_presaves'] > 0:
            result += f"""
üéµ **–ü—Ä–µ—Å–µ–π–≤—ã:** {stats['presave_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤ / {stats['approved_presaves']} –æ–¥–æ–±—Ä–µ–Ω–æ
ü§ñ **–ò–ò:** {stats['ai_interactions']} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
"""
        
        return result.strip()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

def get_community_quick_stats() -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ –≤–∏–¥–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    try:
        manager = get_analytics_manager()
        stats = manager.get_community_stats()
        
        if "error" in stats:
            return f"‚ùå {stats['error']}"
        
        result = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats['total_users']} –≤—Å–µ–≥–æ / {stats['active_users_30d']} –∞–∫—Ç–∏–≤–Ω—ã—Ö
üîó **–°—Å—ã–ª–∫–∏:** {stats['total_links']} –≤—Å–µ–≥–æ / {stats['links_last_7d']} –∑–∞ –Ω–µ–¥–µ–ª—é
üíé **–°—Ä–µ–¥–Ω—è—è –∫–∞—Ä–º–∞:** {stats['avg_karma']} –±–∞–ª–ª–æ–≤

üïí **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {stats['updated_at'].strftime('%d.%m.%Y %H:%M')}
"""
        
        return result.strip()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

def format_links_history(links: List[Dict], limit_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ /last10links –∏ /last30links"""
    try:
        if not links:
            return f"üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞"
        
        result = f"üîó **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit_name} —Å—Å—ã–ª–æ–∫:**\n\n"
        
        for i, link in enumerate(links, 1):
            username = link.get('username', 'Unknown')
            first_name = link.get('first_name', 'Unknown')
            date = link['created_at'].strftime('%d.%m %H:%M') if link['created_at'] else 'Unknown'
            
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º URL –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            url = link['url']
            if len(url) > 50:
                url = url[:47] + "..."
            
            result += f"{i}. **@{username}** ({first_name})\n"
            result += f"   üîó {url}\n"
            result += f"   üìÖ {date}\n\n"
        
        result += f"üí° –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–æ: {len(links)} —Å—Å—ã–ª–æ–∫"
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏"