"""
üìä Analytics Module - Do Presave Reminder Bot v25+
–§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (/mystat, —Ä–µ–π—Ç–∏–Ω–≥–∏) –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤

–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã  
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ –ø—Ä–µ—Å–µ–π–≤–æ–≤
- –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –∏ –∑–≤–∞–Ω–∏–π (–ü–ª–∞–Ω 2)
- –ò–ò –º–µ—Ç—Ä–∏–∫–∏ (–ü–ª–∞–Ω 3)
- Backup –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ü–ª–∞–Ω 4)
"""

import asyncio
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Any, Union, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
import json

from sqlalchemy import text, func, and_, or_, desc, asc
from sqlalchemy.orm import Session

from config import config
from database.manager import get_database_manager
from database.models import User, Link, UserKarma, KarmaHistory
from utils.logger import get_logger
from utils.formatters import AnalyticsFormatter
from utils.helpers import DateHelper, MathHelper

logger = get_logger(__name__)

class AnalyticsPeriod(Enum):
    """–ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    HOUR = "hour"
    DAY = "day"
    WEEK = "week"
    MONTH = "month"
    YEAR = "year"
    ALL_TIME = "all_time"

class StatType(Enum):
    """–¢–∏–ø—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    USER_ACTIVITY = "user_activity"
    LINK_ACTIVITY = "link_activity"
    KARMA_ACTIVITY = "karma_activity"
    AI_ACTIVITY = "ai_activity"
    SYSTEM_HEALTH = "system_health"

@dataclass
class UserStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    total_links_posted: int = 0
    total_links_clicked: int = 0
    total_messages: int = 0
    registration_date: Optional[datetime] = None
    last_activity: Optional[datetime] = None
    
    # –ö–∞—Ä–º–∞ (–ü–ª–∞–Ω 2)
    current_karma: int = 0
    total_karma_given: int = 0
    total_karma_received: int = 0
    karma_rank: Optional[str] = None
    
    # –ò–ò –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–ü–ª–∞–Ω 3)
    ai_requests: int = 0
    ai_responses_received: int = 0
    gratitude_auto_karma: int = 0
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    activity_today: int = 0
    activity_week: int = 0
    activity_month: int = 0
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return asdict(self)

@dataclass
class LinkStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏"""
    link_id: int
    url: str
    platform: Optional[str]
    user_id: int
    username: Optional[str]
    
    posted_at: datetime
    total_views: int = 0
    unique_viewers: int = 0
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    click_through_rate: float = 0.0
    engagement_score: float = 0.0
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return asdict(self)

@dataclass
class CommunityStats:
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
    total_users: int = 0
    active_users_today: int = 0
    active_users_week: int = 0
    active_users_month: int = 0
    
    total_links: int = 0
    links_today: int = 0
    links_week: int = 0
    links_month: int = 0
    
    # –ü–ª–∞–Ω 2 - –ö–∞—Ä–º–∞
    total_karma_operations: int = 0
    average_karma: float = 0.0
    top_karma_user: Optional[str] = None
    
    # –ü–ª–∞–Ω 3 - –ò–ò
    total_ai_requests: int = 0
    ai_requests_today: int = 0
    average_response_time: float = 0.0
    
    # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
    platform_distribution: Dict[str, int] = None
    
    def __post_init__(self):
        if self.platform_distribution is None:
            self.platform_distribution = {}
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return asdict(self)

class AnalyticsEngine:
    """–î–≤–∏–∂–æ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.db = get_database_manager()
        self.formatter = AnalyticsFormatter()
        
        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        self._cache = {}
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        logger.info("üìä AnalyticsEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _get_cache_key(self, key: str, period: AnalyticsPeriod = None, user_id: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞"""
        parts = [key]
        if period:
            parts.append(period.value)
        if user_id:
            parts.append(str(user_id))
        return "_".join(parts)
    
    def _get_from_cache(self, cache_key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        if cache_key in self._cache:
            data, timestamp = self._cache[cache_key]
            if (datetime.now(timezone.utc) - timestamp).total_seconds() < self._cache_ttl:
                return data
            else:
                del self._cache[cache_key]
        return None
    
    def _set_cache(self, cache_key: str, data: Any):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à"""
        self._cache[cache_key] = (data, datetime.now(timezone.utc))
    
    def _get_period_filter(self, period: AnalyticsPeriod, column) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞"""
        now = datetime.now(timezone.utc)
        
        if period == AnalyticsPeriod.HOUR:
            return column >= now - timedelta(hours=1)
        elif period == AnalyticsPeriod.DAY:
            return column >= now - timedelta(days=1)
        elif period == AnalyticsPeriod.WEEK:
            return column >= now - timedelta(weeks=1)
        elif period == AnalyticsPeriod.MONTH:
            return column >= now - timedelta(days=30)
        elif period == AnalyticsPeriod.YEAR:
            return column >= now - timedelta(days=365)
        else:  # ALL_TIME
            return True
    
    def get_user_stats(self, user_id: int, use_cache: bool = True) -> Optional[UserStats]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
            
        Returns:
            UserStats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        cache_key = self._get_cache_key("user_stats", user_id=user_id)
        
        if use_cache:
            cached_data = self._get_from_cache(cache_key)
            if cached_data:
                return cached_data
        
        try:
            with self.db.get_session() as session:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user = session.query(User).filter(User.user_id == user_id).first()
                
                if not user:
                    return None
                
                stats = UserStats(
                    user_id=user.user_id,
                    username=user.username,
                    first_name=user.first_name,
                    registration_date=user.created_at,
                    last_activity=user.last_activity
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫
                links_query = session.query(Link).filter(Link.user_id == user_id)
                stats.total_links_posted = links_query.count()
                
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
                now = datetime.now(timezone.utc)
                
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è
                today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
                stats.activity_today = links_query.filter(Link.created_at >= today_start).count()
                
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é
                week_start = now - timedelta(days=7)
                stats.activity_week = links_query.filter(Link.created_at >= week_start).count()
                
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü
                month_start = now - timedelta(days=30)
                stats.activity_month = links_query.filter(Link.created_at >= month_start).count()
                
                # –ü–ª–∞–Ω 2 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–º—ã
                if config.ENABLE_PLAN_2_FEATURES:
                    self._add_karma_stats(session, stats, user_id)
                
                # –ü–ª–∞–Ω 3 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò
                if config.ENABLE_PLAN_3_FEATURES:
                    self._add_ai_stats(session, stats, user_id)
                
                if use_cache:
                    self._set_cache(cache_key, stats)
                
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def _add_karma_stats(self, session: Session, stats: UserStats, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä–º—ã"""
        try:
            # –¢–µ–∫—É—â–∞—è –∫–∞—Ä–º–∞
            karma_record = session.query(UserKarma).filter(UserKarma.user_id == user_id).first()
            if karma_record:
                stats.current_karma = karma_record.karma_points
                stats.karma_rank = karma_record.rank
            
            # –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä–º—ã
            karma_given = session.query(func.sum(KarmaHistory.change_amount)).filter(
                KarmaHistory.admin_id == user_id,
                KarmaHistory.change_amount > 0
            ).scalar() or 0
            
            karma_received = session.query(func.sum(KarmaHistory.change_amount)).filter(
                KarmaHistory.user_id == user_id,
                KarmaHistory.change_amount > 0
            ).scalar() or 0
            
            stats.total_karma_given = int(karma_given)
            stats.total_karma_received = int(karma_received)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä–º—ã: {e}")
    
    def _add_ai_stats(self, session: Session, stats: UserStats, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            stats.ai_requests = 0
            stats.ai_responses_received = 0
            stats.gratitude_auto_karma = 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò: {e}")
    
    def get_community_stats(self, period: AnalyticsPeriod = AnalyticsPeriod.ALL_TIME, use_cache: bool = True) -> CommunityStats:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        
        Args:
            period: –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
            
        Returns:
            CommunityStats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        """
        cache_key = self._get_cache_key("community_stats", period)
        
        if use_cache:
            cached_data = self._get_from_cache(cache_key)
            if cached_data:
                return cached_data
        
        try:
            with self.db.get_session() as session:
                stats = CommunityStats()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                stats.total_users = session.query(User).count()
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                now = datetime.now(timezone.utc)
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
                today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
                stats.active_users_today = session.query(User).filter(
                    User.last_activity >= today_start
                ).count()
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
                week_start = now - timedelta(days=7)
                stats.active_users_week = session.query(User).filter(
                    User.last_activity >= week_start
                ).count()
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü
                month_start = now - timedelta(days=30)
                stats.active_users_month = session.query(User).filter(
                    User.last_activity >= month_start
                ).count()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫
                stats.total_links = session.query(Link).count()
                
                # –°—Å—ã–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è
                stats.links_today = session.query(Link).filter(
                    Link.created_at >= today_start
                ).count()
                
                # –°—Å—ã–ª–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
                stats.links_week = session.query(Link).filter(
                    Link.created_at >= week_start
                ).count()
                
                # –°—Å—ã–ª–∫–∏ –∑–∞ –º–µ—Å—è—Ü
                stats.links_month = session.query(Link).filter(
                    Link.created_at >= month_start
                ).count()
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
                stats.platform_distribution = self._get_platform_distribution(session, period)
                
                # –ü–ª–∞–Ω 2 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–º—ã
                if config.ENABLE_PLAN_2_FEATURES:
                    self._add_community_karma_stats(session, stats)
                
                # –ü–ª–∞–Ω 3 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò
                if config.ENABLE_PLAN_3_FEATURES:
                    self._add_community_ai_stats(session, stats)
                
                if use_cache:
                    self._set_cache(cache_key, stats)
                
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {e}")
            return CommunityStats()
    
    def _get_platform_distribution(self, session: Session, period: AnalyticsPeriod) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º"""
        try:
            query = session.query(Link.platform, func.count(Link.id)).group_by(Link.platform)
            
            if period != AnalyticsPeriod.ALL_TIME:
                period_filter = self._get_period_filter(period, Link.created_at)
                query = query.filter(period_filter)
            
            results = query.all()
            
            return {platform or 'Unknown': count for platform, count in results}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º: {e}")
            return {}
    
    def _add_community_karma_stats(self, session: Session, stats: CommunityStats):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä–º—ã"""
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–∞—Ä–º–æ–π
            stats.total_karma_operations = session.query(KarmaHistory).count()
            
            # –°—Ä–µ–¥–Ω—è—è –∫–∞—Ä–º–∞
            avg_karma = session.query(func.avg(UserKarma.karma_points)).scalar()
            stats.average_karma = float(avg_karma or 0)
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∫–∞—Ä–º–µ
            top_user = session.query(UserKarma, User).join(User).order_by(
                desc(UserKarma.karma_points)
            ).first()
            
            if top_user:
                karma_record, user_record = top_user
                stats.top_karma_user = user_record.username or user_record.first_name
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä–º—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {e}")
    
    def _add_community_ai_stats(self, session: Session, stats: CommunityStats):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            stats.total_ai_requests = 0
            stats.ai_requests_today = 0
            stats.average_response_time = 0.0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {e}")
    
    def get_top_users(self, metric: str = "links", period: AnalyticsPeriod = AnalyticsPeriod.ALL_TIME, limit: int = 10) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–µ—Ç—Ä–∏–∫–µ
        
        Args:
            metric: –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è (links, karma, activity)
            period: –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–ø–µ
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
        """
        cache_key = self._get_cache_key(f"top_users_{metric}", period)
        cached_data = self._get_from_cache(cache_key)
        
        if cached_data:
            return cached_data[:limit]
        
        try:
            with self.db.get_session() as session:
                
                if metric == "links":
                    top_users = self._get_top_users_by_links(session, period, limit)
                elif metric == "karma" and config.ENABLE_PLAN_2_FEATURES:
                    top_users = self._get_top_users_by_karma(session, limit)
                elif metric == "activity":
                    top_users = self._get_top_users_by_activity(session, period, limit)
                else:
                    top_users = []
                
                self._set_cache(cache_key, top_users)
                return top_users
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _get_top_users_by_links(self, session: Session, period: AnalyticsPeriod, limit: int) -> List[Dict[str, Any]]:
        """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Å—ã–ª–æ–∫"""
        
        base_query = session.query(
            User.user_id,
            User.username,
            User.first_name,
            func.count(Link.id).label('link_count')
        ).join(Link, User.user_id == Link.user_id)
        
        if period != AnalyticsPeriod.ALL_TIME:
            period_filter = self._get_period_filter(period, Link.created_at)
            base_query = base_query.filter(period_filter)
        
        results = base_query.group_by(
            User.user_id, User.username, User.first_name
        ).order_by(desc('link_count')).limit(limit).all()
        
        return [
            {
                'rank': idx + 1,
                'user_id': result.user_id,
                'username': result.username,
                'display_name': result.username or result.first_name or f"User{result.user_id}",
                'value': result.link_count,
                'metric': '—Å—Å—ã–ª–æ–∫'
            }
            for idx, result in enumerate(results)
        ]
    
    def _get_top_users_by_karma(self, session: Session, limit: int) -> List[Dict[str, Any]]:
        """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ"""
        
        results = session.query(
            UserKarma.user_id,
            UserKarma.karma_points,
            UserKarma.rank,
            User.username,
            User.first_name
        ).join(User, UserKarma.user_id == User.user_id).order_by(
            desc(UserKarma.karma_points)
        ).limit(limit).all()
        
        return [
            {
                'rank': idx + 1,
                'user_id': result.user_id,
                'username': result.username,
                'display_name': result.username or result.first_name or f"User{result.user_id}",
                'value': result.karma_points,
                'karma_rank': result.rank,
                'metric': '–∫–∞—Ä–º—ã'
            }
            for idx, result in enumerate(results)
        ]
    
    def _get_top_users_by_activity(self, session: Session, period: AnalyticsPeriod, limit: int) -> List[Dict[str, Any]]:
        """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ + —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞—Ä–º–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        base_query = session.query(
            User.user_id,
            User.username,
            User.first_name,
            func.count(Link.id).label('activity_score')
        ).outerjoin(Link, User.user_id == Link.user_id)
        
        if period != AnalyticsPeriod.ALL_TIME:
            period_filter = self._get_period_filter(period, Link.created_at)
            base_query = base_query.filter(or_(Link.id.is_(None), period_filter))
        
        results = base_query.group_by(
            User.user_id, User.username, User.first_name
        ).order_by(desc('activity_score')).limit(limit).all()
        
        return [
            {
                'rank': idx + 1,
                'user_id': result.user_id,
                'username': result.username,
                'display_name': result.username or result.first_name or f"User{result.user_id}",
                'value': result.activity_score,
                'metric': '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
            }
            for idx, result in enumerate(results)
        ]
    
    def get_link_stats(self, link_id: int = None, user_id: int = None, period: AnalyticsPeriod = AnalyticsPeriod.ALL_TIME) -> List[LinkStats]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫
        
        Args:
            link_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            period: –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            List[LinkStats]: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫
        """
        try:
            with self.db.get_session() as session:
                query = session.query(Link, User).join(User, Link.user_id == User.user_id)
                
                if link_id:
                    query = query.filter(Link.id == link_id)
                
                if user_id:
                    query = query.filter(Link.user_id == user_id)
                
                if period != AnalyticsPeriod.ALL_TIME:
                    period_filter = self._get_period_filter(period, Link.created_at)
                    query = query.filter(period_filter)
                
                results = query.order_by(desc(Link.created_at)).limit(100).all()
                
                link_stats = []
                for link, user in results:
                    stats = LinkStats(
                        link_id=link.id,
                        url=link.url,
                        platform=link.platform,
                        user_id=link.user_id,
                        username=user.username,
                        posted_at=link.created_at,
                        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
                        total_views=0,
                        unique_viewers=0,
                        click_through_rate=0.0,
                        engagement_score=0.0
                    )
                    link_stats.append(stats)
                
                return link_stats
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")
            return []
    
    def get_growth_trends(self, period: AnalyticsPeriod = AnalyticsPeriod.MONTH) -> Dict[str, List[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–æ—Å—Ç–∞
        
        Args:
            period: –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
            
        Returns:
            Dict: –¢—Ä–µ–Ω–¥—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
        """
        try:
            with self.db.get_session() as session:
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                if period == AnalyticsPeriod.DAY:
                    date_trunc = func.date_trunc('hour', Link.created_at)
                    intervals = 24
                elif period == AnalyticsPeriod.WEEK:
                    date_trunc = func.date_trunc('day', Link.created_at)
                    intervals = 7
                elif period == AnalyticsPeriod.MONTH:
                    date_trunc = func.date_trunc('day', Link.created_at)
                    intervals = 30
                else:
                    date_trunc = func.date_trunc('week', Link.created_at)
                    intervals = 52
                
                # –¢—Ä–µ–Ω–¥ —Å—Å—ã–ª–æ–∫
                now = datetime.now(timezone.utc)
                start_time = now - timedelta(days=intervals if period != AnalyticsPeriod.DAY else 1)
                
                links_trend = session.query(
                    date_trunc.label('period'),
                    func.count(Link.id).label('count')
                ).filter(
                    Link.created_at >= start_time
                ).group_by('period').order_by('period').all()
                
                # –¢—Ä–µ–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_trend = session.query(
                    date_trunc.label('period'),
                    func.count(func.distinct(Link.user_id)).label('count')
                ).filter(
                    Link.created_at >= start_time
                ).group_by('period').order_by('period').all()
                
                return {
                    'links': [
                        {
                            'period': trend.period.isoformat(),
                            'count': trend.count
                        }
                        for trend in links_trend
                    ],
                    'active_users': [
                        {
                            'period': trend.period.isoformat(),
                            'count': trend.count
                        }
                        for trend in users_trend
                    ]
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–æ—Å—Ç–∞: {e}")
            return {'links': [], 'active_users': []}
    
    def generate_report(self, user_id: int = None, period: AnalyticsPeriod = AnalyticsPeriod.WEEK) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            period: –ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        try:
            if user_id:
                return self._generate_user_report(user_id, period)
            else:
                return self._generate_community_report(period)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
    
    def _generate_user_report(self, user_id: int, period: AnalyticsPeriod) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        stats = self.get_user_stats(user_id)
        if not stats:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        period_name = self._get_period_name(period)
        display_name = stats.username or stats.first_name or f"User{stats.user_id}"
        
        report = f"""üìä **–õ–ò–ß–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**
üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {display_name}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ {period_name}:**
‚Ä¢ –°—Å—ã–ª–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {self._get_period_value(stats, period, 'links')}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.total_messages}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {self.formatter.format_datetime(stats.last_activity)}

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {stats.total_links_posted}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {self.formatter.format_date(stats.registration_date)}"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä–º—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if config.ENABLE_PLAN_2_FEATURES and stats.current_karma is not None:
            report += f"""

üèÜ **–ö–∞—Ä–º–∞:**
‚Ä¢ –¢–µ–∫—É—â–∞—è –∫–∞—Ä–º–∞: {stats.current_karma}
‚Ä¢ –ó–≤–∞–Ω–∏–µ: {stats.karma_rank or '–ù–æ–≤–µ–Ω—å–∫–∏–π'}
‚Ä¢ –ö–∞—Ä–º—ã –≤—ã–¥–∞–Ω–æ: {stats.total_karma_given}
‚Ä¢ –ö–∞—Ä–º—ã –ø–æ–ª—É—á–µ–Ω–æ: {stats.total_karma_received}"""

        # –î–æ–±–∞–≤–ª—è–µ–º –ò–ò —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if config.ENABLE_PLAN_3_FEATURES:
            report += f"""

ü§ñ **–ò–ò –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò: {stats.ai_requests}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {stats.ai_responses_received}
‚Ä¢ –ê–≤—Ç–æ-–∫–∞—Ä–º–∞ –∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {stats.gratitude_auto_karma}"""

        return report
    
    def _generate_community_report(self, period: AnalyticsPeriod) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        
        stats = self.get_community_stats(period)
        period_name = self._get_period_name(period)
        
        report = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–û–ë–©–ï–°–¢–í–ê**
‚è∞ **–ü–µ—Ä–∏–æ–¥:** {period_name}

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {stats.total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.active_users_today}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.active_users_week}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats.active_users_month}

üîó **–°—Å—ã–ª–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {stats.total_links}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.links_today}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats.links_week}
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats.links_month}"""

        # –¢–æ–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if stats.platform_distribution:
            top_platforms = sorted(stats.platform_distribution.items(), key=lambda x: x[1], reverse=True)[:3]
            report += f"""

üéµ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:**"""
            for platform, count in top_platforms:
                report += f"\n‚Ä¢ {platform}: {count} —Å—Å—ã–ª–æ–∫"

        # –ö–∞—Ä–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if config.ENABLE_PLAN_2_FEATURES:
            report += f"""

üèÜ **–ö–∞—Ä–º–∞:**
‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π —Å –∫–∞—Ä–º–æ–π: {stats.total_karma_operations}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∫–∞—Ä–º–∞: {stats.average_karma:.1f}
‚Ä¢ –õ–∏–¥–µ—Ä –ø–æ –∫–∞—Ä–º–µ: {stats.top_karma_user or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"""

        # –ò–ò —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if config.ENABLE_PLAN_3_FEATURES:
            report += f"""

ü§ñ **–ò–ò –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ: {stats.total_ai_requests}
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.ai_requests_today}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats.average_response_time:.1f}—Å"""

        return report
    
    def _get_period_name(self, period: AnalyticsPeriod) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        names = {
            AnalyticsPeriod.HOUR: "–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å",
            AnalyticsPeriod.DAY: "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
            AnalyticsPeriod.WEEK: "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
            AnalyticsPeriod.MONTH: "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
            AnalyticsPeriod.YEAR: "–ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥",
            AnalyticsPeriod.ALL_TIME: "–≤—Å—ë –≤—Ä–µ–º—è"
        }
        return names.get(period, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    
    def _get_period_value(self, stats: UserStats, period: AnalyticsPeriod, metric: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        if metric == 'links':
            if period == AnalyticsPeriod.DAY:
                return stats.activity_today
            elif period == AnalyticsPeriod.WEEK:
                return stats.activity_week
            elif period == AnalyticsPeriod.MONTH:
                return stats.activity_month
            else:
                return stats.total_links_posted
        
        return 0
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self._cache.clear()
        logger.info("üßπ –ö—ç—à –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—á–∏—â–µ–Ω")

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
_analytics_engine: Optional[AnalyticsEngine] = None

def get_analytics_engine() -> AnalyticsEngine:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–≤–∏–∂–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    global _analytics_engine
    
    if _analytics_engine is None:
        _analytics_engine = AnalyticsEngine()
    
    return _analytics_engine

def init_analytics_engine() -> AnalyticsEngine:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    global _analytics_engine
    
    _analytics_engine = AnalyticsEngine()
    logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π AnalyticsEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    return _analytics_engine

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get_user_stats(user_id: int) -> Optional[UserStats]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return get_analytics_engine().get_user_stats(user_id)

def get_community_stats(period: AnalyticsPeriod = AnalyticsPeriod.ALL_TIME) -> CommunityStats:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
    return get_analytics_engine().get_community_stats(period)

def get_top_users(metric: str = "links", limit: int = 10) -> List[Dict[str, Any]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return get_analytics_engine().get_top_users(metric, limit=limit)

def generate_user_report(user_id: int, period: AnalyticsPeriod = AnalyticsPeriod.WEEK) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return get_analytics_engine().generate_report(user_id, period)

def generate_community_report(period: AnalyticsPeriod = AnalyticsPeriod.WEEK) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
    return get_analytics_engine().generate_report(period=period)

# ============================================
# –ö–û–ú–ê–ù–î–´ –î–õ–Ø TELEGRAM –ë–û–¢–ê
# ============================================

def handle_mystat_command(user_id: int) -> str:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mystat
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    try:
        stats = get_user_stats(user_id)
        
        if not stats:
            return """‚ùå **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –í—ã –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏
‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö

üí° –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"""
        
        return generate_user_report(user_id, AnalyticsPeriod.WEEK)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /mystat: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def handle_leaderboard_command(metric: str = "links") -> str:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
    
    Args:
        metric: –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (links, karma, activity)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    """
    try:
        top_users = get_top_users(metric, limit=10)
        
        if not top_users:
            return f"üìä **–†–µ–π—Ç–∏–Ω–≥ –ø–æ {metric}**\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞."
        
        metric_names = {
            'links': '—Å—Å—ã–ª–∫–∞–º',
            'karma': '–∫–∞—Ä–º–µ',
            'activity': '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        }
        
        metric_name = metric_names.get(metric, metric)
        
        report = f"üèÜ **–¢–û–ü-10 –ü–û {metric_name.upper()}**\n"
        
        for user in top_users:
            medal = "ü•á" if user['rank'] == 1 else "ü•à" if user['rank'] == 2 else "ü•â" if user['rank'] == 3 else f"{user['rank']}."
            
            if metric == 'karma' and 'karma_rank' in user:
                report += f"\n{medal} **{user['display_name']}** ‚Äî {user['value']} {user['metric']} ({user['karma_rank']})"
            else:
                report += f"\n{medal} **{user['display_name']}** ‚Äî {user['value']} {user['metric']}"
        
        return report
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ============================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
# ============================================

if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AnalyticsEngine...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    engine = AnalyticsEngine()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    print("\nüìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:")
    community_stats = engine.get_community_stats()
    print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {community_stats.total_users}")
    print(f"  –°—Å—ã–ª–æ–∫: {community_stats.total_links}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüèÜ –¢–µ—Å—Ç —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    top_users = engine.get_top_users("links", limit=5)
    for user in top_users[:3]:
        print(f"  {user['rank']}. {user['display_name']}: {user['value']} {user['metric']}")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    print("\nüìã –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:")
    report = engine.generate_report(period=AnalyticsPeriod.WEEK)
    print(report[:200] + "..." if len(report) > 200 else report)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
