"""
üóÉÔ∏è Database Models - Do Presave Reminder Bot v25+
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö 4 –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLAlchemy ORM
"""

from datetime import datetime, timezone
from typing import Optional, List, Dict, Any
from sqlalchemy import (
    Column, Integer, String, Text, DateTime, Boolean, 
    ForeignKey, JSON, BigInteger, Float, Enum as SQLEnum,
    Index, UniqueConstraint, CheckConstraint
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, backref
from sqlalchemy.sql import func
import enum

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# ============================================
# ENUMS –î–õ–Ø –¢–ò–ü–ò–ó–ê–¶–ò–ò
# ============================================

class UserRank(enum.Enum):
    """–ó–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã (–ü–ª–∞–Ω 2)"""
    NEWBIE = "ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π"           # 0-5 –∫–∞—Ä–º—ã
    HOPE = "ü•à –ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"    # 6-15 –∫–∞—Ä–º—ã
    MEGA = "ü•á –ú–µ–≥–∞-—á–µ–ª–æ–≤–µ—á–∏—â–µ"       # 16-30 –∫–∞—Ä–º—ã
    AMBASSADOR = "üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ"   # 31+ –∫–∞—Ä–º—ã

class PresaveRequestStatus(enum.Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤—ã (–ü–ª–∞–Ω 3)"""
    PENDING = "pending"      # –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    APPROVED = "approved"    # –û–¥–æ–±—Ä–µ–Ω–∞
    REJECTED = "rejected"    # –û—Ç–∫–ª–æ–Ω–µ–Ω–∞
    EXPIRED = "expired"      # –ò—Å—Ç–µ–∫–ª–∞

class ApprovalClaimStatus(enum.Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã (–ü–ª–∞–Ω 3)"""
    SUBMITTED = "submitted"   # –ü–æ–¥–∞–Ω–∞
    REVIEWING = "reviewing"   # –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
    APPROVED = "approved"     # –û–¥–æ–±—Ä–µ–Ω–∞ (+–∫–∞—Ä–º–∞)
    REJECTED = "rejected"     # –û—Ç–∫–ª–æ–Ω–µ–Ω–∞
    EXPIRED = "expired"       # –ò—Å—Ç–µ–∫–ª–∞

class FormState(enum.Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º (–ü–ª–∞–Ω 3)"""
    IDLE = "idle"                              # –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
    ASKING_PRESAVE_DESCRIPTION = "asking_description"  # –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–∞
    ASKING_PRESAVE_LINKS = "asking_links"              # –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–æ–∫
    ASKING_CLAIM_SCREENSHOTS = "asking_screenshots"    # –ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    ASKING_CLAIM_COMMENT = "asking_comment"            # –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

# ============================================
# –ü–õ–ê–ù 1 - –ë–ê–ó–û–í–´–ï –ú–û–î–ï–õ–ò
# ============================================

class User(Base):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤"""
    __tablename__ = 'users'
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    id = Column(Integer, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, unique=True, nullable=False, index=True)
    username = Column(String(255), nullable=True, index=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    is_admin = Column(Boolean, default=False)
    is_active = Column(Boolean, default=True)
    language_code = Column(String(10), default='ru')
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime(timezone=True), default=func.now())
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())
    last_activity = Column(DateTime(timezone=True), default=func.now())
    
    # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ (–±—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω—ã –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–∞–Ω–æ–≤)
    # –ü–ª–∞–Ω 1: –°—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    links = relationship("Link", back_populates="user", lazy="dynamic")
    
    # –ü–ª–∞–Ω 2: –ö–∞—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
    karma_record = relationship("UserKarma", back_populates="user", uselist=False)
    karma_changes_given = relationship("KarmaHistory", foreign_keys="KarmaHistory.admin_id", back_populates="admin")
    karma_changes_received = relationship("KarmaHistory", foreign_keys="KarmaHistory.user_id", back_populates="user")
    
    # –ü–ª–∞–Ω 3: –§–æ—Ä–º—ã –∏ –ò–ò
    presave_requests = relationship("PresaveRequest", back_populates="user", lazy="dynamic")
    approval_claims = relationship("ApprovalClaim", back_populates="user", lazy="dynamic")
    form_sessions = relationship("FormSession", back_populates="user", lazy="dynamic")
    ai_conversations = relationship("AIConversation", back_populates="user", lazy="dynamic")
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    __table_args__ = (
        Index('idx_users_telegram_id', 'telegram_id'),
        Index('idx_users_username', 'username'),
        Index('idx_users_active', 'is_active'),
        Index('idx_users_admin', 'is_admin'),
    )
    
    def __repr__(self):
        return f"<User(telegram_id={self.telegram_id}, username='{self.username}')>"

class BotSettings(Base):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ - –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    __tablename__ = 'bot_settings'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    key = Column(String(100), unique=True, nullable=False, index=True)
    value = Column(Text, nullable=True)
    value_type = Column(String(20), default='string')  # string, int, bool, json
    description = Column(Text, nullable=True)
    
    created_at = Column(DateTime(timezone=True), default=func.now())
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())
    
    __table_args__ = (
        Index('idx_settings_key', 'key'),
    )
    
    def __repr__(self):
        return f"<BotSettings(key='{self.key}', value='{self.value}')>"

class Link(Base):
    """–°—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤"""
    __tablename__ = 'links'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    
    # –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id = Column(BigInteger, nullable=False)
    thread_id = Column(Integer, nullable=True)  # ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
    url = Column(Text, nullable=False)
    message_text = Column(Text, nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    domain = Column(String(255), nullable=True, index=True)  # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    is_presave_request = Column(Boolean, default=True)  # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—å–±–æ–π –æ –ø—Ä–µ—Å–µ–π–≤–µ
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏  
    created_at = Column(DateTime(timezone=True), default=func.now())
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="links")
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    __table_args__ = (
        Index('idx_links_user_id', 'user_id'),
        Index('idx_links_created_at', 'created_at'),
        Index('idx_links_thread_id', 'thread_id'),
        Index('idx_links_domain', 'domain'),
        Index('idx_links_is_presave_request', 'is_presave_request'),
    )
    
    def __repr__(self):
        return f"<Link(user_id={self.user_id}, url='{self.url[:50]}...')>"

# ============================================
# –ü–õ–ê–ù 2 - –ú–û–î–ï–õ–ò –°–ò–°–¢–ï–ú–´ –ö–ê–†–ú–´
# ============================================

class UserKarma(Base):
    """–ö–∞—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏"""
    __tablename__ = 'user_karma'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id'), unique=True, nullable=False)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—Ä–º—ã
    karma_points = Column(Integer, default=0, nullable=False)
    rank = Column(SQLEnum(UserRank), default=UserRank.NEWBIE, nullable=False)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_karma_received = Column(Integer, default=0)  # –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä–º—ã
    total_karma_given = Column(Integer, default=0)     # –í—Å–µ–≥–æ —Ä–æ–∑–¥–∞–Ω–æ –∫–∞—Ä–º—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    presave_requests_count = Column(Integer, default=0) # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö
    approved_presaves_count = Column(Integer, default=0) # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ–π–≤–æ–≤
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime(timezone=True), default=func.now())
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())
    last_karma_change = Column(DateTime(timezone=True), default=func.now())
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="karma_record")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    __table_args__ = (
        CheckConstraint('karma_points >= 0', name='check_karma_non_negative'),
        CheckConstraint('karma_points <= 100500', name='check_karma_max_limit'),
        Index('idx_user_karma_user_id', 'user_id'),
        Index('idx_user_karma_points', 'karma_points'),
        Index('idx_user_karma_rank', 'rank'),
    )
    
    def __repr__(self):
        return f"<UserKarma(user_id={self.user_id}, karma={self.karma_points}, rank={self.rank.value})>"

class KarmaHistory(Base):
    """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä–º—ã - –∞—É–¥–∏—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    __tablename__ = 'karma_history'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    admin_id = Column(Integer, ForeignKey('users.id'), nullable=True)  # NULL –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    
    # –î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    change_amount = Column(Integer, nullable=False)  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    reason = Column(String(500), nullable=True)      # –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    context_data = Column(JSON, nullable=True)       # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (message_id, etc.)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏ –ø–æ—Å–ª–µ
    karma_before = Column(Integer, nullable=False)
    karma_after = Column(Integer, nullable=False)
    rank_before = Column(SQLEnum(UserRank), nullable=True)
    rank_after = Column(SQLEnum(UserRank), nullable=True)
    
    # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    is_automatic = Column(Boolean, default=False)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ (–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏)
    is_manual = Column(Boolean, default=True)      # –†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    created_at = Column(DateTime(timezone=True), default=func.now())
    
    # –°–≤—è–∑–∏
    user = relationship("User", foreign_keys=[user_id], back_populates="karma_changes_received")
    admin = relationship("User", foreign_keys=[admin_id], back_populates="karma_changes_given")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index('idx_karma_history_user_id', 'user_id'),
        Index('idx_karma_history_admin_id', 'admin_id'),
        Index('idx_karma_history_created_at', 'created_at'),
        Index('idx_karma_history_automatic', 'is_automatic'),
    )
    
    def __repr__(self):
        return f"<KarmaHistory(user_id={self.user_id}, change={self.change_amount}, admin_id={self.admin_id})>"

# ============================================
# –ü–õ–ê–ù 3 - –ú–û–î–ï–õ–ò –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–• –§–û–†–ú –ò –ò–ò
# ============================================

class PresaveRequest(Base):
    """–ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤—ã - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–¥–∞—á–∏"""
    __tablename__ = 'presave_requests'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞—è–≤–∫–∏
    title = Column(String(500), nullable=True)        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
    description = Column(Text, nullable=True)         # –û–ø–∏—Å–∞–Ω–∏–µ
    links = Column(JSON, nullable=False)              # –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
    additional_info = Column(Text, nullable=True)     # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status = Column(SQLEnum(PresaveRequestStatus), default=PresaveRequestStatus.PENDING)
    message_id = Column(BigInteger, nullable=True)    # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–µ
    thread_id = Column(Integer, nullable=True)        # ID —Ç–æ–ø–∏–∫–∞
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime(timezone=True), default=func.now())
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())
    processed_at = Column(DateTime(timezone=True), nullable=True)
    expires_at = Column(DateTime(timezone=True), nullable=True)
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="presave_requests")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index('idx_presave_requests_user_id', 'user_id'),
        Index('idx_presave_requests_status', 'status'),
        Index('idx_presave_requests_created_at', 'created_at'),
        Index('idx_presave_requests_thread_id', 'thread_id'),
    )
    
    def __repr__(self):
        return f"<PresaveRequest(user_id={self.user_id}, status={self.status.value})>"

class ApprovalClaim(Base):
    """–ó–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ–π–≤–æ–≤"""
    __tablename__ = 'approval_claims'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    admin_id = Column(Integer, ForeignKey('users.id'), nullable=True)  # –ö—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    comment = Column(Text, nullable=True)             # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    presave_link = Column(Text, nullable=True)        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status = Column(SQLEnum(ApprovalClaimStatus), default=ApprovalClaimStatus.SUBMITTED)
    karma_awarded = Column(Integer, default=0)        # –°–∫–æ–ª—å–∫–æ –∫–∞—Ä–º—ã –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ
    admin_comment = Column(Text, nullable=True)       # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime(timezone=True), default=func.now())
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())
    processed_at = Column(DateTime(timezone=True), nullable=True)
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="approval_claims")
    admin = relationship("User", foreign_keys=[admin_id])
    screenshots = relationship("ClaimScreenshot", back_populates="claim", lazy="dynamic")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index('idx_approval_claims_user_id', 'user_id'),
        Index('idx_approval_claims_admin_id', 'admin_id'),
        Index('idx_approval_claims_status', 'status'),
        Index('idx_approval_claims_created_at', 'created_at'),
    )
    
    def __repr__(self):
        return f"<ApprovalClaim(user_id={self.user_id}, status={self.status.value})>"

class ClaimScreenshot(Base):
    """–°–∫—Ä–∏–Ω—à–æ—Ç—ã –∫ –∑–∞—è–≤–∫–∞–º –Ω–∞ –∞–ø–ø—Ä—É–≤—ã"""
    __tablename__ = 'claim_screenshots'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    claim_id = Column(Integer, ForeignKey('approval_claims.id'), nullable=False)
    
    # –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
    file_id = Column(String(255), nullable=False)     # Telegram file_id
    file_unique_id = Column(String(255), nullable=True) # Telegram file_unique_id
    file_size = Column(Integer, nullable=True)        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
    file_path = Column(String(500), nullable=True)    # –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    caption = Column(Text, nullable=True)             # –ü–æ–¥–ø–∏—Å—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
    is_verified = Column(Boolean, default=False)     # –ü—Ä–æ–≤–µ—Ä–µ–Ω –∞–¥–º–∏–Ω–æ–º
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    uploaded_at = Column(DateTime(timezone=True), default=func.now())
    
    # –°–≤—è–∑–∏
    claim = relationship("ApprovalClaim", back_populates="screenshots")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index('idx_claim_screenshots_claim_id', 'claim_id'),
        Index('idx_claim_screenshots_file_id', 'file_id'),
    )
    
    def __repr__(self):
        return f"<ClaimScreenshot(claim_id={self.claim_id}, file_id='{self.file_id}')>"

class FormSession(Base):
    """–°–µ—Å—Å–∏–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
    __tablename__ = 'form_sessions'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
    current_state = Column(SQLEnum(FormState), default=FormState.IDLE, nullable=False)
    form_type = Column(String(50), nullable=True)     # 'presave_request', 'approval_claim'
    
    # –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    session_data = Column(JSON, default=dict)         # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    last_message_id = Column(BigInteger, nullable=True) # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime(timezone=True), default=func.now())
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())
    expires_at = Column(DateTime(timezone=True), nullable=True)
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="form_sessions")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∞–Ω—Å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    __table_args__ = (
        UniqueConstraint('user_id', name='uq_form_sessions_user_id'),
        Index('idx_form_sessions_user_id', 'user_id'),
        Index('idx_form_sessions_state', 'current_state'),
        Index('idx_form_sessions_expires_at', 'expires_at'),
    )
    
    def __repr__(self):
        return f"<FormSession(user_id={self.user_id}, state={self.current_state.value})>"

class AIConversation(Base):
    """–ë–µ—Å–µ–¥—ã —Å –ò–ò - –∏—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
    __tablename__ = 'ai_conversations'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    
    # –î–∞–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã
    message_id = Column(BigInteger, nullable=True)     # ID —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    user_message = Column(Text, nullable=False)       # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ai_response = Column(Text, nullable=True)         # –û—Ç–≤–µ—Ç –ò–ò
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ò–ò
    ai_model = Column(String(100), nullable=True)     # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    tokens_used = Column(Integer, default=0)          # –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
    response_time_ms = Column(Integer, nullable=True) # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –º—Å
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç
    context_data = Column(JSON, nullable=True)        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    is_mention = Column(Boolean, default=False)       # –ë—ã–ª–æ –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
    is_reply = Column(Boolean, default=False)         # –ë—ã–ª –ª–∏ —ç—Ç–æ reply
    is_private = Column(Boolean, default=False)       # –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    created_at = Column(DateTime(timezone=True), default=func.now())
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="ai_conversations")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index('idx_ai_conversations_user_id', 'user_id'),
        Index('idx_ai_conversations_created_at', 'created_at'),
        Index('idx_ai_conversations_ai_model', 'ai_model'),
        Index('idx_ai_conversations_is_mention', 'is_mention'),
    )
    
    def __repr__(self):
        return f"<AIConversation(user_id={self.user_id}, model='{self.ai_model}')>"

class AutoKarmaLog(Base):
    """–õ–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∫–∞—Ä–º—ã –∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"""
    __tablename__ = 'auto_karma_log'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    from_user_id = Column(Integer, ForeignKey('users.id'), nullable=False)  # –ö—Ç–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª
    to_user_id = Column(Integer, ForeignKey('users.id'), nullable=False)    # –ö–æ–º—É –Ω–∞—á–∏—Å–ª–∏–ª–∏ –∫–∞—Ä–º—É
    
    # –î–µ—Ç–∞–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    trigger_word = Column(String(100), nullable=False)    # –°–ª–æ–≤–æ-—Ç—Ä–∏–≥–≥–µ—Ä
    message_text = Column(Text, nullable=True)            # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    reply_message_id = Column(BigInteger, nullable=True)  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    karma_added = Column(Integer, default=1)              # –°–∫–æ–ª—å–∫–æ –∫–∞—Ä–º—ã –Ω–∞—á–∏—Å–ª–µ–Ω–æ
    processed = Column(Boolean, default=True)             # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É—Å–ø–µ—à–Ω–æ
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    timestamp = Column(DateTime(timezone=True), default=func.now())
    
    # –°–≤—è–∑–∏
    from_user = relationship("User", foreign_keys=[from_user_id])
    to_user = relationship("User", foreign_keys=[to_user_id])
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index('idx_auto_karma_log_from_user', 'from_user_id'),
        Index('idx_auto_karma_log_to_user', 'to_user_id'),
        Index('idx_auto_karma_log_timestamp', 'timestamp'),
        Index('idx_auto_karma_log_trigger_word', 'trigger_word'),
    )
    
    def __repr__(self):
        return f"<AutoKarmaLog(from={self.from_user_id}, to={self.to_user_id}, word='{self.trigger_word}')>"

# ============================================
# –ü–õ–ê–ù 4 - –ú–û–î–ï–õ–ò BACKUP –°–ò–°–¢–ï–ú–´
# ============================================

class BackupHistory(Base):
    """–ò—Å—Ç–æ—Ä–∏—è backup –æ–ø–µ—Ä–∞—Ü–∏–π"""
    __tablename__ = 'backup_history'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # –î–∞–Ω–Ω—ã–µ backup
    filename = Column(String(255), nullable=False)
    file_size_bytes = Column(BigInteger, nullable=True)
    compression_ratio = Column(Float, nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    backup_type = Column(String(50), default='manual')   # manual, automatic
    tables_included = Column(JSON, nullable=True)        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    rows_exported = Column(Integer, nullable=True)       # –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
    
    # –°—Ç–∞—Ç—É—Å
    status = Column(String(20), default='completed')     # completed, failed, in_progress
    error_message = Column(Text, nullable=True)          # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –±—ã–ª–∞
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    started_at = Column(DateTime(timezone=True), default=func.now())
    completed_at = Column(DateTime(timezone=True), nullable=True)
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index('idx_backup_history_started_at', 'started_at'),
        Index('idx_backup_history_status', 'status'),
        Index('idx_backup_history_backup_type', 'backup_type'),
    )
    
    def __repr__(self):
        return f"<BackupHistory(filename='{self.filename}', status='{self.status}')>"

class MessageStats(Base):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–æ–ø–∏–∫–∞–º"""
    __tablename__ = 'message_stats'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    thread_id = Column(Integer, nullable=False)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message_count = Column(Integer, default=0)
    last_message_at = Column(DateTime(timezone=True), default=func.now())
    first_message_at = Column(DateTime(timezone=True), default=func.now())
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    links_shared = Column(Integer, default=0)
    gratitude_received = Column(Integer, default=0)  # –ü–æ–ª—É—á–µ–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
    gratitude_given = Column(Integer, default=0)     # –î–∞–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime(timezone=True), default=func.now())
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    user = relationship("User")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    __table_args__ = (
        UniqueConstraint('user_id', 'thread_id', name='uq_message_stats_user_thread'),
        Index('idx_message_stats_user_id', 'user_id'),
        Index('idx_message_stats_thread_id', 'thread_id'),
        Index('idx_message_stats_message_count', 'message_count'),
        Index('idx_message_stats_last_message_at', 'last_message_at'),
    )
    
    def __repr__(self):
        return f"<MessageStats(user_id={self.user_id}, thread_id={self.thread_id}, count={self.message_count})>"

# ============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

def get_all_tables():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π"""
    return [
        # –ü–ª–∞–Ω 1 - –ë–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        User.__tablename__,
        BotSettings.__tablename__,
        Link.__tablename__,
        
        # –ü–ª–∞–Ω 2 - –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã
        UserKarma.__tablename__,
        KarmaHistory.__tablename__,
        
        # –ü–ª–∞–Ω 3 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏ –ò–ò
        PresaveRequest.__tablename__,
        ApprovalClaim.__tablename__,
        ClaimScreenshot.__tablename__,
        FormSession.__tablename__,
        AIConversation.__tablename__,
        AutoKarmaLog.__tablename__,
        
        # –ü–ª–∞–Ω 4 - Backup —Å–∏—Å—Ç–µ–º–∞
        BackupHistory.__tablename__,
        MessageStats.__tablename__,
    ]

def get_plan_tables(plan_number: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    plan_tables = {
        1: [User.__tablename__, BotSettings.__tablename__, Link.__tablename__],
        2: [UserKarma.__tablename__, KarmaHistory.__tablename__],
        3: [PresaveRequest.__tablename__, ApprovalClaim.__tablename__, 
            ClaimScreenshot.__tablename__, FormSession.__tablename__, 
            AIConversation.__tablename__, AutoKarmaLog.__tablename__],
        4: [BackupHistory.__tablename__, MessageStats.__tablename__]
    }
    return plan_tables.get(plan_number, [])

def get_user_rank_by_karma(karma_points: int) -> UserRank:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä–º—ã"""
    if karma_points >= 31:
        return UserRank.AMBASSADOR
    elif karma_points >= 16:
        return UserRank.MEGA
    elif karma_points >= 6:
        return UserRank.HOPE
    else:
        return UserRank.NEWBIE

def get_karma_threshold_for_next_rank(current_karma: int) -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–∞–Ω–∏—è"""
    thresholds = [6, 16, 31]
    for threshold in thresholds:
        if current_karma < threshold:
            return threshold
    return None  # –£–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–≤–∞–Ω–∏–µ

# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
__all__ = [
    'Base',
    # Enums
    'UserRank', 'PresaveRequestStatus', 'ApprovalClaimStatus', 'FormState',
    # –ü–ª–∞–Ω 1
    'User', 'BotSettings', 'Link',
    # –ü–ª–∞–Ω 2
    'UserKarma', 'KarmaHistory',
    # –ü–ª–∞–Ω 3
    'PresaveRequest', 'ApprovalClaim', 'ClaimScreenshot', 'FormSession', 
    'AIConversation', 'AutoKarmaLog',
    # –ü–ª–∞–Ω 4
    'BackupHistory', 'MessageStats',
    # –£—Ç–∏–ª–∏—Ç—ã
    'get_all_tables', 'get_plan_tables', 'get_user_rank_by_karma', 'get_karma_threshold_for_next_rank'
]
