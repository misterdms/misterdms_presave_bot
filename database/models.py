"""
üíæ Database Models - Do Presave Reminder Bot v25+ (–ü–õ–ê–ù 1 –¢–û–õ–¨–ö–û)
–ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –ë–î –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

from datetime import datetime, timezone
from typing import Optional, Dict, Any, List

from sqlalchemy import Column, Integer, String, DateTime, Boolean, Text, BigInteger, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

# ============================================
# –ë–ê–ó–û–í–ê–Ø –ú–û–î–ï–õ–¨
# ============================================

Base = declarative_base()

class TimestampMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = Column(DateTime, default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc), nullable=False)

# ============================================
# –ú–û–î–ï–õ–ò –ü–õ–ê–ù 1 - –ë–ê–ó–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ
# ============================================

class User(Base, TimestampMixin):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ (–±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤)"""
    __tablename__ = 'users'
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, unique=True, nullable=False, index=True)  # Telegram user ID
    username = Column(String(255), nullable=True, index=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    is_bot = Column(Boolean, default=False, nullable=False)
    is_active = Column(Boolean, default=True, nullable=False)
    last_activity = Column(DateTime, default=lambda: datetime.now(timezone.utc), nullable=False)
    
    # –°–≤—è–∑–∏ (–ø—Ä–æ—Å—Ç—ã–µ –¥–ª—è Plan 1)
    links = relationship("Link", back_populates="user", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<User(user_id={self.user_id}, username='{self.username}')>"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'user_id': self.user_id,
            'username': self.username,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'is_active': self.is_active,
            'last_activity': self.last_activity.isoformat() if self.last_activity else None,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

class Link(Base, TimestampMixin):
    """–°—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = 'links'
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, ForeignKey('users.user_id'), nullable=False, index=True)
    
    # –î–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    url = Column(Text, nullable=False)
    platform = Column(String(50), nullable=True)  # spotify, apple_music, youtube, etc.
    title = Column(String(500), nullable=True)
    artist = Column(String(255), nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    message_id = Column(BigInteger, nullable=True)  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    thread_id = Column(BigInteger, nullable=True)   # ID —Ç–æ–ø–∏–∫–∞
    is_processed = Column(Boolean, default=False, nullable=False)
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="links")
    
    def __repr__(self):
        return f"<Link(id={self.id}, user_id={self.user_id}, platform='{self.platform}')>"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'user_id': self.user_id,
            'url': self.url,
            'platform': self.platform,
            'title': self.title,
            'artist': self.artist,
            'message_id': self.message_id,
            'thread_id': self.thread_id,
            'is_processed': self.is_processed,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

class BotSettings(Base, TimestampMixin):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    __tablename__ = 'bot_settings'
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    id = Column(Integer, primary_key=True, autoincrement=True)
    key = Column(String(255), unique=True, nullable=False, index=True)
    value = Column(Text, nullable=True)
    description = Column(Text, nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    is_system = Column(Boolean, default=False, nullable=False)  # –°–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    
    def __repr__(self):
        return f"<BotSettings(key='{self.key}', value='{self.value}')>"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'key': self.key,
            'value': self.value,
            'description': self.description,
            'is_system': self.is_system,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

# ============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

def get_all_table_names() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    return [
        'users',
        'links', 
        'bot_settings'
    ]

def create_default_settings() -> List[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return [
        {
            'key': 'bot_enabled',
            'value': 'true',
            'description': '–í–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç',
            'is_system': True
        },
        {
            'key': 'current_limit_mode',
            'value': 'BURST',
            'description': '–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ API',
            'is_system': True
        },
        {
            'key': 'plan_1_enabled',
            'value': 'true', 
            'description': '–ü–ª–∞–Ω 1: –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
            'is_system': True
        },
        {
            'key': 'plan_2_enabled',
            'value': 'false',
            'description': '–ü–ª–∞–Ω 2: –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã',
            'is_system': True
        },
        {
            'key': 'plan_3_enabled',
            'value': 'false',
            'description': '–ü–ª–∞–Ω 3: –ò–ò –∏ —Ñ–æ—Ä–º—ã',
            'is_system': True
        },
        {
            'key': 'plan_4_enabled',
            'value': 'false',
            'description': '–ü–ª–∞–Ω 4: Backup —Å–∏—Å—Ç–µ–º–∞',
            'is_system': True
        }
    ]

# ============================================
# –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –î–†–£–ì–ò–ú–ò –§–ê–ô–õ–ê–ú–ò
# ============================================

# –ó–∞–≥–ª—É—à–∫–∏ –∫–ª–∞—Å—Å–æ–≤ Plan 2-4 –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
class UserKarma: 
    pass

class UserRank:
    pass

class KarmaHistory:
    pass

# ============================================
# –≠–ö–°–ü–û–†–¢
# ============================================

__all__ = [
    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    'Base', 'TimestampMixin',
    
    # –ú–æ–¥–µ–ª–∏ Plan 1
    'User', 'Link', 'BotSettings',
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    'UserKarma', 'UserRank', 'KarmaHistory',
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'get_all_table_names', 'create_default_settings'
]
