"""
WebApp Integration/webapp_handler.py - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WebApp
Do Presave Reminder Bot v29.07

–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –º–æ–¥—É–ª—è–º–∏ –±–æ—Ç–∞
"""

import asyncio
import json
import time
from typing import Dict, Any, Optional, List, Callable
from datetime import datetime, timedelta
from dataclasses import dataclass
import uuid

from core.interfaces import EventTypes
from core.exceptions import WebAppError, WebAppDataError, WebAppSessionError
from utils.logger import get_logger, log_webapp_interaction, log_performance_metric


@dataclass
class WebAppSession:
    """–°–µ—Å—Å–∏—è WebApp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session_id: str
    user_id: int
    group_id: int
    created_at: float
    last_activity: float
    platform: str = "webapp"
    ip_address: Optional[str] = None
    user_agent: Optional[str] = None
    commands_sent: int = 0
    data: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.data is None:
            self.data = {}
    
    def is_expired(self, timeout: int = 3600) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        return time.time() - self.last_activity > timeout
    
    def update_activity(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.last_activity = time.time()


class WebAppHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WebApp"""
    
    def __init__(self, bot, module_registry, database):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
            module_registry: –†–µ–µ—Å—Ç—Ä –º–æ–¥—É–ª–µ–π
            database: –Ø–¥—Ä–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.bot = bot
        self.module_registry = module_registry
        self.database = database
        self.logger = get_logger(__name__)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.active_sessions: Dict[str, WebAppSession] = {}
        self.sessions_by_user: Dict[int, List[str]] = {}
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ WebApp
        self.command_handlers: Dict[str, Callable] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_sessions = 0
        self.total_commands = 0
        self.total_errors = 0
        
        # –ó–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏
        self.cleanup_task: Optional[asyncio.Task] = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ
            self.bot.register_webapp_handler(self.handle_webapp_data)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self._register_default_commands()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
            self.cleanup_task = asyncio.create_task(self._cleanup_expired_sessions())
            
            self.logger.info("üåê WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")
            raise WebAppError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {e}")
    
    async def handle_webapp_data(self, message, webapp_data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
        
        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            webapp_data: –î–∞–Ω–Ω—ã–µ –æ—Ç WebApp
        """
        start_time = time.time()
        
        try:
            user_id = message.from_user.id
            group_id = getattr(message.chat, 'id', None)
            
            self.logger.debug(f"üåê WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç {user_id}: {webapp_data}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if not self._validate_webapp_data(webapp_data):
                raise WebAppDataError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö WebApp")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session = await self._get_or_create_session(user_id, group_id, webapp_data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            command = webapp_data.get('command')
            if command:
                await self._handle_command(session, command, webapp_data, message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            await self._handle_analytics(session, webapp_data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            log_webapp_interaction(user_id, webapp_data.get('action', 'unknown'), webapp_data)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            processing_time = time.time() - start_time
            log_performance_metric("webapp_request_processing", processing_time * 1000, "ms")
            
            self.total_commands += 1
            
        except Exception as e:
            self.total_errors += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await self.bot.bot.reply_to(
                    message,
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã WebApp: {str(e)[:100]}"
                )
            except:
                pass
    
    def _validate_webapp_data(self, data: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö WebApp"""
        required_fields = ['action']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in required_fields:
            if field not in data:
                self.logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(data.get('action'), str):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö
        data_str = json.dumps(data)
        if len(data_str) > 4096:  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            self.logger.warning("‚ö†Ô∏è WebApp –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ")
            return False
        
        return True
    
    async def _get_or_create_session(self, user_id: int, group_id: int, 
                                   webapp_data: Dict[str, Any]) -> WebAppSession:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sessions = self.sessions_by_user.get(user_id, [])
        for session_id in user_sessions:
            session = self.active_sessions.get(session_id)
            if session and not session.is_expired():
                session.update_activity()
                return session
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_id = str(uuid.uuid4())
        session = WebAppSession(
            session_id=session_id,
            user_id=user_id,
            group_id=group_id or 0,
            created_at=time.time(),
            last_activity=time.time(),
            platform=webapp_data.get('platform', 'webapp')
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        self.active_sessions[session_id] = session
        if user_id not in self.sessions_by_user:
            self.sessions_by_user[user_id] = []
        self.sessions_by_user[user_id].append(session_id)
        
        self.total_sessions += 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        if self.module_registry.event_dispatcher:
            await self.module_registry.event_dispatcher.emit(
                EventTypes.WEBAPP_SESSION_STARTED,
                {
                    'session_id': session_id,
                    'user_id': user_id,
                    'group_id': group_id,
                    'platform': session.platform
                }
            )
        
        self.logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∞ WebApp —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return session
    
    async def _handle_command(self, session: WebAppSession, command: str, 
                            data: Dict[str, Any], message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç WebApp"""
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤ —Å–µ—Å—Å–∏–∏
            session.commands_sent += 1
            
            # –ò—â–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handler = self.command_handlers.get(command)
            if handler:
                await handler(session, data, message)
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –º–æ–¥—É–ª—è–º
                await self._route_command_to_modules(session, command, data, message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            if self.module_registry.event_dispatcher:
                await self.module_registry.event_dispatcher.emit(
                    EventTypes.WEBAPP_COMMAND_SENT,
                    {
                        'session_id': session.session_id,
                        'user_id': session.user_id,
                        'command': command,
                        'data': data
                    }
                )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            raise
    
    async def _route_command_to_modules(self, session: WebAppSession, command: str, 
                                      data: Dict[str, Any], message):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –∫ –º–æ–¥—É–ª—è–º"""
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ WebApp –∫ –º–æ–¥—É–ª—è–º
        command_routes = {
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∫–∞—Ä–º–∞
            'get_user_stats': 'user_management',
            'get_leaderboard': 'user_management',
            'update_profile': 'user_management',
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–µ–∫–æ–≤
            'get_recent_links': 'track_support_system',
            'submit_track': 'track_support_system',
            'get_my_tracks': 'track_support_system',
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            'get_navigation': 'navigation_system',
            'get_topics': 'navigation_system',
            
            # –§–æ—Ä–º—ã (–ü–ª–∞–Ω 2)
            'create_support_request': 'interactive_forms',
            'submit_approval': 'interactive_forms',
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ü–ª–∞–Ω 2)
            'get_detailed_stats': 'leaderboards',
            'get_charts': 'leaderboards',
            
            # –ò–ò (–ü–ª–∞–Ω 4)
            'ai_chat': 'ai_assistant',
            'ai_advice': 'ai_assistant',
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª–µ–π
            'get_module_settings': 'module_settings',
            'update_module_settings': 'module_settings'
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –º–æ–¥—É–ª—å
        target_module = command_routes.get(command)
        if not target_module:
            raise WebAppDataError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ WebApp: {command}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω
        if not self.module_registry.is_module_running(target_module):
            raise WebAppError(f"–ú–æ–¥—É–ª—å {target_module} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª—å
        module = self.module_registry.get_module(target_module)
        if not module:
            raise WebAppError(f"–ú–æ–¥—É–ª—å {target_module} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp –≤ –º–æ–¥—É–ª–µ
        if hasattr(module, 'handle_webapp_command'):
            await module.handle_webapp_command(session, command, data, message)
        else:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞
            await self._convert_to_bot_command(session, command, data, message)
    
    async def _convert_to_bot_command(self, session: WebAppSession, command: str, 
                                    data: Dict[str, Any], message):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã WebApp –≤ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞"""
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ WebApp –≤ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        command_mapping = {
            'get_user_stats': '/mystat',
            'get_leaderboard': '/top10',
            'get_recent_links': '/last10links',
            'get_detailed_stats': '/mystats',
            'get_navigation': '/help'
        }
        
        bot_command = command_mapping.get(command)
        if not bot_command:
            raise WebAppDataError(f"–ù–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {command}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π –±–æ—Ç–∞
            fake_message = type('FakeMessage', (), {
                'from_user': message.from_user,
                'chat': message.chat,
                'text': bot_command,
                'message_id': message.message_id + 1
            })()
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ
            command_name = bot_command[1:]  # –£–±–∏—Ä–∞–µ–º '/'
            handler = self.bot.command_handlers.get(command_name)
            
            if handler:
                await handler(fake_message)
            else:
                await self.bot.bot.reply_to(
                    message,
                    f"‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ {bot_command} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
                )
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            raise
    
    async def _handle_analytics(self, session: WebAppSession, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ —Å–µ—Å—Å–∏–∏
        analytics = data.get('analytics', {})
        if analytics:
            session.data.setdefault('analytics', []).append({
                'timestamp': time.time(),
                'data': analytics
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            async with self.database.get_async_session() as db_session:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É webapp_analytics
                # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ö–µ–º—ã –ë–î
                pass
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É WebApp: {e}")
    
    def _register_default_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ WebApp"""
        
        async def handle_ping(session: WebAppSession, data: Dict[str, Any], message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ ping –æ—Ç WebApp"""
            await self.bot.bot.reply_to(
                message,
                json.dumps({
                    "action": "pong",
                    "session_id": session.session_id,
                    "server_time": time.time()
                })
            )
        
        async def handle_get_stats(session: WebAppSession, data: Dict[str, Any], message):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è WebApp"""
            stats = {
                "user_id": session.user_id,
                "session_duration": time.time() - session.created_at,
                "commands_sent": session.commands_sent,
                "server_time": time.time()
            }
            
            await self.bot.bot.reply_to(
                message,
                json.dumps({
                    "action": "stats_response",
                    "data": stats
                })
            )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.command_handlers['ping'] = handle_ping
        self.command_handlers['get_stats'] = handle_get_stats
    
    def register_command_handler(self, command: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã WebApp"""
        self.command_handlers[command] = handler
        self.logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp –∫–æ–º–∞–Ω–¥—ã: {command}")
    
    async def _cleanup_expired_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        while True:
            try:
                current_time = time.time()
                expired_sessions = []
                
                # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
                for session_id, session in self.active_sessions.items():
                    if session.is_expired():
                        expired_sessions.append(session_id)
                
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
                for session_id in expired_sessions:
                    session = self.active_sessions.pop(session_id, None)
                    if session:
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        user_sessions = self.sessions_by_user.get(session.user_id, [])
                        if session_id in user_sessions:
                            user_sessions.remove(session_id)
                        
                        self.logger.debug(f"üßπ –£–¥–∞–ª–µ–Ω–∞ –∏—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è {session_id}")
                
                # –°–ø–∏–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
                await asyncio.sleep(300)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
                await asyncio.sleep(60)  # –°–ø–∏–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def get_session(self, session_id: str) -> Optional[WebAppSession]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID"""
        return self.active_sessions.get(session_id)
    
    def get_user_sessions(self, user_id: int) -> List[WebAppSession]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session_ids = self.sessions_by_user.get(user_id, [])
        sessions = []
        for session_id in session_ids:
            session = self.active_sessions.get(session_id)
            if session and not session.is_expired():
                sessions.append(session)
        return sessions
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebApp"""
        active_sessions_count = len(self.active_sessions)
        active_users = len([
            user_id for user_id, sessions in self.sessions_by_user.items()
            if any(not self.active_sessions[sid].is_expired() for sid in sessions if sid in self.active_sessions)
        ])
        
        return {
            "total_sessions": self.total_sessions,
            "active_sessions": active_sessions_count,
            "active_users": active_users,
            "total_commands": self.total_commands,
            "total_errors": self.total_errors,
            "error_rate": self.total_errors / max(self.total_commands, 1),
            "registered_commands": len(self.command_handlers)
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è WebApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            stats = self.get_stats()
            
            return {
                "healthy": True,
                "active_sessions": stats["active_sessions"],
                "active_users": stats["active_users"],
                "error_rate": stats["error_rate"],
                "cleanup_task_running": self.cleanup_task and not self.cleanup_task.done()
            }
            
        except Exception as e:
            return {
                "healthy": False,
                "error": str(e)
            }
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.logger.info("üîÑ –û—á–∏—Å—Ç–∫–∞ WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏
        self.active_sessions.clear()
        self.sessions_by_user.clear()
        
        self.logger.info("‚úÖ WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—â–µ–Ω")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    async def test_webapp_handler():
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
        
        # –ú–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        class MockBot:
            def register_webapp_handler(self, handler):
                pass
        
        class MockRegistry:
            event_dispatcher = None
        
        class MockDatabase:
            async def get_async_session(self):
                return None
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        handler = WebAppHandler(MockBot(), MockRegistry(), MockDatabase())
        await handler.initialize()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "action": "test_command",
            "command": "ping",
            "platform": "webapp"
        }
        
        # –ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        class MockMessage:
            class MockUser:
                id = 12345
            
            class MockChat:
                id = -1001234567890
            
            from_user = MockUser()
            chat = MockChat()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        try:
            await handler.handle_webapp_data(MockMessage(), test_data)
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö WebApp —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = handler.get_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        health = await handler.health_check()
        print(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ: {health}")
        
        await handler.cleanup()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    asyncio.run(test_webapp_handler())