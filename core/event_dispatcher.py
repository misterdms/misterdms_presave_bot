"""
Core/event_dispatcher.py - –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
Do Presave Reminder Bot v29.07

–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–ª–∞–±–æ—Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
"""

import asyncio
import time
import traceback
from typing import Dict, List, Callable, Any, Optional, Set
from dataclasses import dataclass, field
from datetime import datetime
from collections import defaultdict, deque

from core.interfaces import EventListener, EventTypes
from utils.logger import get_logger, log_performance_metric


@dataclass
class Event:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–±—ã—Ç–∏—è"""
    event_type: str
    data: Dict[str, Any]
    timestamp: float = field(default_factory=time.time)
    source_module: Optional[str] = None
    event_id: Optional[str] = None
    priority: int = 0  # 0 = –Ω–∏–∑–∫–∏–π, 1 = –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, 2 = –≤—ã—Å–æ–∫–∏–π


@dataclass
class EventSubscription:
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
    listener: Callable
    event_types: Set[str]
    module_name: Optional[str] = None
    priority: int = 0
    is_async: bool = True


class EventDispatcher:
    """–î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥—É–ª–µ–π"""
    
    def __init__(self, max_history: int = 1000, enable_metrics: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π
        
        Args:
            max_history: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
            enable_metrics: –í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        self.logger = get_logger(__name__)
        
        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
        self.subscriptions: Dict[str, List[EventSubscription]] = defaultdict(list)
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π
        self.event_history: deque = deque(maxlen=max_history)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.enable_metrics = enable_metrics
        self.event_count = 0
        self.error_count = 0
        self.total_processing_time = 0.0
        self.metrics_by_type: Dict[str, Dict[str, Any]] = defaultdict(lambda: {
            'count': 0,
            'total_time': 0.0,
            'error_count': 0,
            'last_event': None
        })
        
        # –û—á–µ—Ä–µ–¥–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        self.priority_queues = {
            0: asyncio.Queue(),  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            1: asyncio.Queue(),  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç  
            2: asyncio.Queue()   # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }
        
        # –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.processing_task: Optional[asyncio.Task] = None
        self.is_running = False
        
        # –§–∏–ª—å—Ç—Ä—ã —Å–æ–±—ã—Ç–∏–π
        self.event_filters: List[Callable] = []
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π"""
        if self.is_running:
            self.logger.warning("‚ö†Ô∏è –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self.processing_task = asyncio.create_task(self._process_events())
        self.logger.info("üé≠ –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π"""
        if not self.is_running:
            return
        
        self.is_running = False
        
        if self.processing_task:
            self.processing_task.cancel()
            try:
                await self.processing_task
            except asyncio.CancelledError:
                pass
        
        self.logger.info("üîÑ –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def subscribe(self, event_types: List[str], listener: Callable, 
                 module_name: str = None, priority: int = 0) -> str:
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event_types: –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            listener: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            module_name: –ò–º—è –º–æ–¥—É–ª—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (0-2)
            
        Returns:
            str: ID –ø–æ–¥–ø–∏—Å–∫–∏
        """
        subscription = EventSubscription(
            listener=listener,
            event_types=set(event_types),
            module_name=module_name,
            priority=priority,
            is_async=asyncio.iscoroutinefunction(listener)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        for event_type in event_types:
            self.subscriptions[event_type].append(subscription)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–º)
            self.subscriptions[event_type].sort(key=lambda s: s.priority, reverse=True)
        
        subscription_id = f"{module_name or 'unknown'}_{id(subscription)}"
        
        self.logger.debug(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {module_name} –Ω–∞ {event_types}")
        return subscription_id
    
    def subscribe_listener(self, listener: EventListener) -> str:
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–∞-—Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            listener: –û–±—ä–µ–∫—Ç, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π EventListener
            
        Returns:
            str: ID –ø–æ–¥–ø–∏—Å–∫–∏
        """
        event_types = listener.get_event_types()
        module_name = getattr(listener, '__class__', {}).get('__name__', 'unknown')
        
        return self.subscribe(
            event_types=event_types,
            listener=listener.on_event,
            module_name=module_name
        )
    
    def unsubscribe(self, subscription_id: str):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π –ø–æ ID –ø–æ–¥–ø–∏—Å–∫–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø–∏—Å–∫—É –ø–æ ID
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        pass
    
    def unsubscribe_module(self, module_name: str):
        """–û—Ç–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –º–æ–¥—É–ª—è"""
        for event_type, subscriptions in self.subscriptions.items():
            self.subscriptions[event_type] = [
                sub for sub in subscriptions 
                if sub.module_name != module_name
            ]
        
        self.logger.debug(f"üì° –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–¥—É–ª—è {module_name} —É–¥–∞–ª–µ–Ω—ã")
    
    async def emit(self, event_type: str, data: Dict[str, Any], 
                  source_module: str = None, priority: int = 1) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            source_module: –ú–æ–¥—É–ª—å-–∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–±—ã—Ç–∏—è (0-2)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = Event(
                event_type=event_type,
                data=data,
                source_module=source_module,
                priority=priority,
                event_id=f"{event_type}_{int(time.time() * 1000)}"
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if not self._apply_filters(event):
                self.logger.debug(f"üö´ –°–æ–±—ã—Ç–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {event_type}")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            if priority in self.priority_queues:
                await self.priority_queues[priority].put(event)
            else:
                await self.priority_queues[1].put(event)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.event_history.append(event)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            self.event_count += 1
            
            self.logger.debug(f"üì§ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {event_type} –æ—Ç {source_module}")
            return True
            
        except Exception as e:
            self.error_count += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
            return False
    
    async def emit_and_wait(self, event_type: str, data: Dict[str, Any], 
                           timeout: float = 5.0) -> List[Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
            
        Returns:
            List[Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        """
        results = []
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscriptions = self.subscriptions.get(event_type, [])
        if not subscriptions:
            return results
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = Event(event_type=event_type, data=data, priority=2)  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for subscription in subscriptions:
            if subscription.is_async:
                task = asyncio.create_task(self._call_async_handler(subscription, event))
            else:
                task = asyncio.create_task(self._call_sync_handler(subscription, event))
            tasks.append(task)
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            results = await asyncio.wait_for(asyncio.gather(*tasks, return_exceptions=True), timeout)
        except asyncio.TimeoutError:
            self.logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_type}")
            # –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for task in tasks:
                if not task.done():
                    task.cancel()
        
        return results
    
    async def _process_events(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        self.logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π")
        
        while self.is_running:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º (–≤—ã—Å–æ–∫–∏–π -> –Ω–∏–∑–∫–∏–π)
                event = None
                
                for priority in [2, 1, 0]:
                    try:
                        event = self.priority_queues[priority].get_nowait()
                        break
                    except asyncio.QueueEmpty:
                        continue
                
                if event is None:
                    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç—ã, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    await asyncio.sleep(0.01)
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                await self._handle_event(event)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.error_count += 1
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _handle_event(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        start_time = time.time()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            subscriptions = self.subscriptions.get(event.event_type, [])
            
            if not subscriptions:
                self.logger.debug(f"üì≠ –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event.event_type}")
                return
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            tasks = []
            for subscription in subscriptions:
                if subscription.is_async:
                    task = asyncio.create_task(self._call_async_handler(subscription, event))
                else:
                    task = asyncio.create_task(self._call_sync_handler(subscription, event))
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if self.enable_metrics:
                processing_time = time.time() - start_time
                self._update_metrics(event.event_type, processing_time, success=True)
            
        except Exception as e:
            processing_time = time.time() - start_time
            self.error_count += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.event_type}: {e}")
            
            if self.enable_metrics:
                self._update_metrics(event.event_type, processing_time, success=False)
    
    async def _call_async_handler(self, subscription: EventSubscription, event: Event):
        """–í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            await subscription.listener(event.event_type, event.data)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ async –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {subscription.module_name}: {e}")
            self.logger.error(traceback.format_exc())
    
    async def _call_sync_handler(self, subscription: EventSubscription, event: Event):
        """–í—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ executor
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, subscription.listener, event.event_type, event.data)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ sync –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {subscription.module_name}: {e}")
            self.logger.error(traceback.format_exc())
    
    def _apply_filters(self, event: Event) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–æ–±—ã—Ç–∏—é"""
        for filter_func in self.event_filters:
            try:
                if not filter_func(event):
                    return False
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        return True
    
    def _update_metrics(self, event_type: str, processing_time: float, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        metrics = self.metrics_by_type[event_type]
        metrics['count'] += 1
        metrics['total_time'] += processing_time
        metrics['last_event'] = time.time()
        
        if not success:
            metrics['error_count'] += 1
        
        self.total_processing_time += processing_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if processing_time > 1.0:  # –ë–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
            self.logger.warning(f"üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {event_type}: {processing_time:.3f}s")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if self.enable_metrics:
            log_performance_metric(
                f"event_processing_{event_type}",
                processing_time * 1000,  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                "ms",
                {"success": success}
            )
    
    def add_filter(self, filter_func: Callable[[Event], bool]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π"""
        self.event_filters.append(filter_func)
        self.logger.debug("üìã –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π")
    
    def get_event_history(self, limit: int = 100, event_type: str = None) -> List[Event]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
        events = list(self.event_history)
        
        if event_type:
            events = [e for e in events if e.event_type == event_type]
        
        return events[-limit:] if limit else events
    
    def get_subscription_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
        stats = {
            'total_subscriptions': 0,
            'subscriptions_by_type': {},
            'subscriptions_by_module': defaultdict(int)
        }
        
        for event_type, subscriptions in self.subscriptions.items():
            stats['subscriptions_by_type'][event_type] = len(subscriptions)
            stats['total_subscriptions'] += len(subscriptions)
            
            for subscription in subscriptions:
                if subscription.module_name:
                    stats['subscriptions_by_module'][subscription.module_name] += 1
        
        return stats
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        avg_processing_time = (
            self.total_processing_time / self.event_count 
            if self.event_count > 0 else 0
        )
        
        return {
            'event_count': self.event_count,
            'error_count': self.error_count,
            'error_rate': self.error_count / max(self.event_count, 1),
            'avg_processing_time': avg_processing_time,
            'total_processing_time': self.total_processing_time,
            'is_running': self.is_running,
            'queue_sizes': {
                priority: queue.qsize() 
                for priority, queue in self.priority_queues.items()
            },
            'metrics_by_type': dict(self.metrics_by_type),
            'history_size': len(self.event_history)
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π"""
        try:
            # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            test_start = time.time()
            await self.emit("system.health_check", {"timestamp": test_start})
            test_time = time.time() - test_start
            
            metrics = self.get_metrics()
            subscription_stats = self.get_subscription_stats()
            
            return {
                "healthy": self.is_running and test_time < 1.0,
                "is_running": self.is_running,
                "test_response_time": test_time,
                "event_count": self.event_count,
                "error_rate": metrics['error_rate'],
                "total_subscriptions": subscription_stats['total_subscriptions'],
                "queue_sizes": metrics['queue_sizes']
            }
            
        except Exception as e:
            return {
                "healthy": False,
                "error": str(e),
                "is_running": self.is_running
            }


# === –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ ===

def create_rate_limit_filter(max_events_per_second: int = 100) -> Callable:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —Å–æ–±—ã—Ç–∏–π"""
    event_times = deque(maxlen=max_events_per_second)
    
    def rate_limit_filter(event: Event) -> bool:
        now = time.time()
        event_times.append(now)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
        if len(event_times) >= max_events_per_second:
            oldest = event_times[0]
            if now - oldest < 1.0:  # –ú–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã
                return False
        
        return True
    
    return rate_limit_filter


def create_duplicate_filter(window_seconds: float = 1.0) -> Callable:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
    recent_events = {}
    
    def duplicate_filter(event: Event) -> bool:
        now = time.time()
        event_key = f"{event.event_type}_{event.source_module}"
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è
        to_remove = [
            key for key, timestamp in recent_events.items()
            if now - timestamp > window_seconds
        ]
        for key in to_remove:
            del recent_events[key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        if event_key in recent_events:
            return False
        
        recent_events[event_key] = now
        return True
    
    return duplicate_filter


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π
    async def test_event_dispatcher():
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π...")
        
        dispatcher = EventDispatcher()
        await dispatcher.start()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫
        received_events = []
        
        async def test_listener(event_type: str, data: Dict[str, Any]):
            received_events.append((event_type, data))
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type} | {data}")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        dispatcher.subscribe([EventTypes.USER_REGISTERED, EventTypes.MODULE_LOADED], test_listener, "test_module")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        await dispatcher.emit(EventTypes.USER_REGISTERED, {"user_id": 12345})
        await dispatcher.emit(EventTypes.MODULE_LOADED, {"module_name": "test"})
        await dispatcher.emit("unknown_event", {"data": "test"})  # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(received_events)}")
        print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏: {dispatcher.get_metrics()}")
        print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∏: {dispatcher.get_subscription_stats()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        health = await dispatcher.health_check()
        print(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ: {health}")
        
        await dispatcher.stop()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    asyncio.run(test_event_dispatcher())