"""
Core/database_core.py - –Ø–¥—Ä–æ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
Do Presave Reminder Bot v29.07

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
import time
from typing import Dict, Any, Optional, List, Type
from contextlib import asynccontextmanager
import traceback

try:
    from sqlalchemy import create_engine, text, MetaData, Table
    from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy.orm import sessionmaker
    from sqlalchemy.pool import QueuePool
    from sqlalchemy.exc import SQLAlchemyError, OperationalError
    import asyncpg
except ImportError as e:
    raise ImportError(f"SQLAlchemy –∏–ª–∏ asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {e}")

from config.settings import Settings
from utils.logger import get_logger
from core.exceptions import DatabaseConnectionError, DatabaseOperationError


# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
Base = declarative_base()


class DatabaseCore:
    """–Ø–¥—Ä–æ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    
    def __init__(self, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ –ë–î
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        """
        self.settings = settings
        self.logger = get_logger(__name__)
        
        # –î–≤–∏–∂–∫–∏ SQLAlchemy
        self.sync_engine = None
        self.async_engine = None
        self.async_session_maker = None
        self.sync_session_maker = None
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self.metadata = MetaData()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.connection_pool_stats = {}
        self.query_count = 0
        self.error_count = 0
        self.last_health_check = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_connected = False
        self.is_initialized = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.logger.info("üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–æ–≤
            await self._create_engines()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self._test_connection()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            await self._setup_database_schema()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π
            self._setup_sessions()
            
            self.is_initialized = True
            self.is_connected = True
            
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            self.logger.error(traceback.format_exc())
            raise DatabaseConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}")
    
    async def _create_engines(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–æ–≤ SQLAlchemy"""
        db_url = self.settings.database.url
        
        if not db_url:
            raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –¥–ª—è async —Ä–µ–∂–∏–º–∞
        if db_url.startswith("postgresql://"):
            async_db_url = db_url.replace("postgresql://", "postgresql+asyncpg://", 1)
        else:
            async_db_url = db_url
        
        # Async –¥–≤–∏–∂–æ–∫
        self.async_engine = create_async_engine(
            async_db_url,
            poolclass=QueuePool,
            pool_size=self.settings.database.pool_size,
            max_overflow=10,
            pool_timeout=self.settings.database.pool_timeout,
            pool_recycle=3600,  # 1 —á–∞—Å
            echo=self.settings.debug,  # SQL –ª–æ–≥–∏ –≤ debug —Ä–µ–∂–∏–º–µ
            echo_pool=self.settings.debug
        )
        
        # Sync –¥–≤–∏–∂–æ–∫ (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
        self.sync_engine = create_engine(
            db_url,
            poolclass=QueuePool,
            pool_size=self.settings.database.pool_size,
            max_overflow=10,
            pool_timeout=self.settings.database.pool_timeout,
            pool_recycle=3600,
            echo=self.settings.debug
        )
        
        self.logger.info("üîß –î–≤–∏–∂–∫–∏ SQLAlchemy —Å–æ–∑–¥–∞–Ω—ã")
    
    async def _test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            async with self.async_engine.begin() as conn:
                result = await conn.execute(text("SELECT 1 as test"))
                test_value = result.scalar()
                
                if test_value != 1:
                    raise DatabaseConnectionError("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            self.logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise DatabaseConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}")
    
    async def _setup_database_schema(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            if self.settings.database.force_recreate_tables:
                self.logger.warning("‚ö†Ô∏è FORCE_RECREATE_TABLES –≤–∫–ª—é—á–µ–Ω! –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
                async with self.async_engine.begin() as conn:
                    await conn.run_sync(Base.metadata.drop_all)
                    await conn.run_sync(Base.metadata.create_all)
                self.logger.info("üîÑ –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã")
            else:
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                async with self.async_engine.begin() as conn:
                    await conn.run_sync(Base.metadata.create_all)
                self.logger.info("üìã –°—Ö–µ–º–∞ –ë–î –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            await self._create_additional_database_objects()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ö–µ–º—ã –ë–î: {e}")
            raise
    
    async def _create_additional_database_objects(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ë–î (–∏–Ω–¥–µ–∫—Å—ã, —Ç—Ä–∏–≥–≥–µ—Ä—ã, —Ñ—É–Ω–∫—Ü–∏–∏)"""
        try:
            # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            additional_sql = [
                # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_activity
                """
                CREATE OR REPLACE FUNCTION update_last_activity()
                RETURNS TRIGGER AS $$
                BEGIN
                    NEW.last_activity = NOW();
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
                """,
                
                # –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—Ä–º—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                """
                CREATE OR REPLACE FUNCTION set_admin_karma()
                RETURNS TRIGGER AS $$
                BEGIN
                    IF NEW.is_admin = TRUE AND (OLD IS NULL OR OLD.is_admin = FALSE) THEN
                        NEW.karma_points = 100500;
                        NEW.rank_title = '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ';
                    END IF;
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
                """,
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –∫–∞—Ä–º—ã
                """
                CREATE OR REPLACE FUNCTION calculate_karma_ratios()
                RETURNS TRIGGER AS $$
                BEGIN
                    -- –†–∞—Å—á–µ—Ç presave_ratio
                    IF NEW.presaves_received > 0 THEN
                        NEW.presave_ratio = ROUND(NEW.presaves_given::decimal / NEW.presaves_received::decimal, 2);
                    ELSE
                        NEW.presave_ratio = NEW.presaves_given::decimal;
                    END IF;
                    
                    -- –†–∞—Å—á–µ—Ç karma_to_links_ratio
                    IF NEW.links_published > 0 THEN
                        NEW.karma_to_links_ratio = ROUND(NEW.karma_points::decimal / NEW.links_published::decimal, 2);
                    ELSE
                        NEW.karma_to_links_ratio = NEW.karma_points::decimal;
                    END IF;
                    
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
                """
            ]
            
            async with self.async_engine.begin() as conn:
                for sql in additional_sql:
                    try:
                        await conn.execute(text(sql))
                        self.logger.debug("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω SQL –æ–±—ä–µ–∫—Ç")
                    except Exception as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                        if "already exists" not in str(e).lower():
                            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQL –æ–±—ä–µ–∫—Ç–∞: {e}")
            
            self.logger.info("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    
    def _setup_sessions(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–±—Ä–∏–∫ —Å–µ—Å—Å–∏–π"""
        # Async —Å–µ—Å—Å–∏–∏
        self.async_session_maker = async_sessionmaker(
            bind=self.async_engine,
            class_=AsyncSession,
            expire_on_commit=False
        )
        
        # Sync —Å–µ—Å—Å–∏–∏
        self.sync_session_maker = sessionmaker(
            bind=self.sync_engine,
            expire_on_commit=False
        )
        
        self.logger.info("üé≠ –§–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –°–ï–°–°–ò–Ø–ú–ò ===
    
    @asynccontextmanager
    async def get_async_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ async —Å–µ—Å—Å–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
        if not self.async_session_maker:
            raise DatabaseOperationError("Async —Å–µ—Å—Å–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        session = self.async_session_maker()
        try:
            yield session
            await session.commit()
        except Exception as e:
            await session.rollback()
            self.error_count += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ async —Å–µ—Å—Å–∏–∏: {e}")
            raise DatabaseOperationError(f"–û—à–∏–±–∫–∞ –ë–î –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        finally:
            await session.close()
            self.query_count += 1
    
    @asynccontextmanager
    async def get_sync_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ sync —Å–µ—Å—Å–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
        if not self.sync_session_maker:
            raise DatabaseOperationError("Sync —Å–µ—Å—Å–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        session = self.sync_session_maker()
        try:
            yield session
            session.commit()
        except Exception as e:
            session.rollback()
            self.error_count += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ sync —Å–µ—Å—Å–∏–∏: {e}")
            raise DatabaseOperationError(f"–û—à–∏–±–∫–∞ –ë–î –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        finally:
            session.close()
            self.query_count += 1
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    async def execute_raw_sql(self, sql: str, params: Optional[Dict] = None) -> Any:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            async with self.async_engine.begin() as conn:
                result = await conn.execute(text(sql), params or {})
                return result
        except Exception as e:
            self.error_count += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {e}")
            raise DatabaseOperationError(f"–û—à–∏–±–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    async def check_table_exists(self, table_name: str, schema: str = "public") -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            sql = """
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = :schema 
                    AND table_name = :table_name
                );
            """
            result = await self.execute_raw_sql(sql, {
                "schema": schema,
                "table_name": table_name
            })
            return result.scalar()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return False
    
    async def get_table_stats(self, table_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            sql = """
                SELECT 
                    n_tup_ins as inserts,
                    n_tup_upd as updates,
                    n_tup_del as deletes,
                    n_live_tup as live_rows,
                    n_dead_tup as dead_rows,
                    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
                FROM pg_stat_user_tables 
                WHERE tablename = :table_name;
            """
            result = await self.execute_raw_sql(sql, {"table_name": table_name})
            row = result.fetchone()
            
            if row:
                return {
                    "inserts": row.inserts or 0,
                    "updates": row.updates or 0,
                    "deletes": row.deletes or 0,
                    "live_rows": row.live_rows or 0,
                    "dead_rows": row.dead_rows or 0,
                    "size": row.size or "0 bytes"
                }
            else:
                return {"error": "Table not found"}
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {table_name}: {e}")
            return {"error": str(e)}
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            start_time = time.time()
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            async with self.async_engine.begin() as conn:
                result = await conn.execute(text("SELECT version()"))
                db_version = result.scalar()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                pool_status = self.async_engine.pool.status()
                
            response_time = time.time() - start_time
            self.last_health_check = time.time()
            
            return {
                "healthy": True,
                "database_version": db_version,
                "response_time_ms": round(response_time * 1000, 2),
                "pool_status": pool_status,
                "query_count": self.query_count,
                "error_count": self.error_count,
                "is_connected": self.is_connected,
                "is_initialized": self.is_initialized
            }
            
        except Exception as e:
            self.error_count += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check –ë–î: {e}")
            return {
                "healthy": False,
                "error": str(e),
                "query_count": self.query_count,
                "error_count": self.error_count,
                "is_connected": False
            }
    
    async def get_database_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –†–∞–∑–º–µ—Ä –ë–î
            db_name = self.async_engine.url.database
            size_sql = "SELECT pg_size_pretty(pg_database_size(:db_name)) as size"
            size_result = await self.execute_raw_sql(size_sql, {"db_name": db_name})
            db_size = size_result.scalar()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            connections_sql = """
                SELECT count(*) as active_connections
                FROM pg_stat_activity 
                WHERE datname = :db_name AND state = 'active'
            """
            conn_result = await self.execute_raw_sql(connections_sql, {"db_name": db_name})
            active_connections = conn_result.scalar()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü
            tables_sql = """
                SELECT 
                    COUNT(*) as table_count,
                    SUM(n_live_tup) as total_rows
                FROM pg_stat_user_tables
            """
            tables_result = await self.execute_raw_sql(tables_sql)
            tables_row = tables_result.fetchone()
            
            return {
                "database_size": db_size,
                "active_connections": active_connections,
                "table_count": tables_row.table_count or 0,
                "total_rows": tables_row.total_rows or 0,
                "pool_size": self.async_engine.pool.size(),
                "pool_checked_in": self.async_engine.pool.checkedin(),
                "pool_checked_out": self.async_engine.pool.checkedout(),
                "pool_overflow": self.async_engine.pool.overflow(),
                "query_count": self.query_count,
                "error_count": self.error_count
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {"error": str(e)}
    
    async def backup_schema(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ backup —Å—Ö–µ–º—ã –ë–î (—Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º DDL –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            ddl_sql = """
                SELECT 
                    'CREATE TABLE ' || schemaname || '.' || tablename || ' (' ||
                    array_to_string(
                        array_agg(
                            column_name || ' ' || data_type ||
                            CASE 
                                WHEN character_maximum_length IS NOT NULL 
                                THEN '(' || character_maximum_length || ')' 
                                ELSE '' 
                            END ||
                            CASE 
                                WHEN is_nullable = 'NO' THEN ' NOT NULL' 
                                ELSE '' 
                            END
                        ), 
                        ', '
                    ) || ');' as ddl
                FROM information_schema.columns 
                JOIN pg_stat_user_tables ON tablename = table_name
                WHERE table_schema = 'public'
                GROUP BY schemaname, tablename
                ORDER BY tablename;
            """
            
            result = await self.execute_raw_sql(ddl_sql)
            ddl_statements = [row.ddl for row in result.fetchall()]
            
            schema_backup = f"""
-- Do Presave Reminder Bot Database Schema Backup
-- Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}
-- Database: {self.async_engine.url.database}

{chr(10).join(ddl_statements)}
"""
            
            self.logger.info("üíæ Backup —Å—Ö–µ–º—ã –ë–î —Å–æ–∑–¥–∞–Ω")
            return schema_backup
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ backup —Å—Ö–µ–º—ã: {e}")
            raise DatabaseOperationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup —Å—Ö–µ–º—ã: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        self.logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î...")
        
        self.is_connected = False
        
        try:
            if self.async_engine:
                await self.async_engine.dispose()
            
            if self.sync_engine:
                self.sync_engine.dispose()
            
            self.logger.info("‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")


# === –£–¢–ò–õ–ò–¢–´ ===

async def test_database_connection(database_url: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        if database_url.startswith("postgresql://"):
            async_url = database_url.replace("postgresql://", "postgresql+asyncpg://", 1)
        else:
            async_url = database_url
        
        engine = create_async_engine(async_url)
        
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT 1"))
            test_result = result.scalar()
        
        await engine.dispose()
        
        return test_result == 1
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
        return False


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–¥—Ä–∞ –ë–î
    import os
    from config.env_loader import load_environment
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–¥—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_environment()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from config.settings import Settings
    settings = Settings()
    
    async def test():
        # –°–æ–∑–¥–∞–µ–º —è–¥—Ä–æ –ë–î
        db_core = DatabaseCore(settings)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        success = await db_core.initialize()
        
        if success:
            print("‚úÖ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
            health = await db_core.health_check()
            print(f"üìä Health check: {health}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await db_core.get_database_stats()
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º
            await db_core.close()
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
    
    asyncio.run(test())