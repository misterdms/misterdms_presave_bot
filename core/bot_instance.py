"""
Core/bot_instance.py - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
Do Presave Reminder Bot v29.07

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Telegram –±–æ—Ç–∞ —Å WebApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∏ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import asyncio
import logging
import traceback
import time
from typing import Dict, Any, Optional, List, Callable
import json

try:
    import telebot
    from telebot.async_telebot import AsyncTeleBot
    from telebot.types import (
        Message, CallbackQuery, InlineQuery, 
        WebAppInfo, MenuButtonWebApp, BotCommand
    )
    from telebot import asyncio_filters
    from telebot.asyncio_storage import StateMemoryStorage
except ImportError as e:
    raise ImportError(f"pyTelegramBotAPI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")

from config.settings import Settings
from utils.logger import get_logger
from core.interfaces import EventTypes
from core.exceptions import BotInitializationError


class BotInstance:
    """–≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        """
        self.settings = settings
        self.logger = get_logger(__name__)
        
        # Telegram bot
        self.bot: Optional[AsyncTeleBot] = None
        self.bot_info: Optional[Dict[str, Any]] = None
        
        # WebApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        self.webapp_url = settings.webapp.url
        self.webapp_short_name = settings.webapp.short_name
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥—É–ª–µ–π
        self.command_handlers: Dict[str, Callable] = {}
        self.message_handlers: List[Callable] = []
        self.callback_handlers: Dict[str, Callable] = {}
        self.webapp_handlers: List[Callable] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.start_time = time.time()
        self.message_count = 0
        self.command_count = 0
        self.error_count = 0
        self.webhook_info = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.is_polling = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            self.logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            self.bot = AsyncTeleBot(
                token=self.settings.telegram.bot_token,
                state_storage=StateMemoryStorage()
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            self.bot.add_custom_filter(asyncio_filters.StateFilter(self.bot))
            self.bot.add_custom_filter(asyncio_filters.IsDigitFilter())
            self.bot.add_custom_filter(asyncio_filters.ForwardFilter())
            self.bot.add_custom_filter(asyncio_filters.IsReplyFilter())
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
            await self._get_bot_info()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebApp
            await self._setup_webapp()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            await self._setup_base_handlers()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            await self._setup_bot_commands()
            
            self.logger.info(f"‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{self.bot_info.get('username', 'unknown')}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            self.logger.error(traceback.format_exc())
            raise BotInitializationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞: {e}")
    
    async def _get_bot_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        try:
            bot_info = await self.bot.get_me()
            self.bot_info = {
                'id': bot_info.id,
                'username': bot_info.username,
                'first_name': bot_info.first_name,
                'is_bot': bot_info.is_bot,
                'can_join_groups': bot_info.can_join_groups,
                'can_read_all_group_messages': bot_info.can_read_all_group_messages,
                'supports_inline_queries': bot_info.supports_inline_queries
            }
            
            self.logger.info(f"üì± –ë–æ—Ç: @{self.bot_info['username']} (ID: {self.bot_info['id']})")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            raise
    
    async def _setup_webapp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.webapp_url:
                self.logger.warning("‚ö†Ô∏è WEBAPP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ WebApp –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
            webapp_info = WebAppInfo(url=self.webapp_url)
            menu_button = MenuButtonWebApp(
                type='web_app',
                text='üìñ –û –±–æ—Ç–µ',
                web_app=webapp_info
            )
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤)
            await self.bot.set_chat_menu_button(
                menu_button=menu_button
            )
            
            self.logger.info(f"üåê WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {self.webapp_url}")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebApp: {e}")
            # WebApp –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    
    async def _setup_base_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @self.bot.message_handler(commands=['start'])
        async def handle_start(message: Message):
            await self._handle_start_command(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        @self.bot.message_handler(commands=['help'])
        async def handle_help(message: Message):
            await self._handle_help_command(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp –¥–∞–Ω–Ω—ã—Ö
        @self.bot.message_handler(content_types=['web_app_data'])
        async def handle_webapp_data(message: Message):
            await self._handle_webapp_data(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query
        @self.bot.callback_query_handler(func=lambda call: True)
        async def handle_callback_query(call: CallbackQuery):
            await self._handle_callback_query(call)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        @self.bot.middleware_handler(update_types=['message'])
        async def error_middleware(bot_instance, message: Message):
            try:
                await bot_instance.process_new_messages([message])
            except Exception as e:
                self.error_count += 1
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.logger.error(traceback.format_exc())
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await self.bot.reply_to(
                        message,
                        "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                except:
                    pass  # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        @self.bot.message_handler(func=lambda message: True)
        async def handle_all_messages(message: Message):
            self.message_count += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ
            if message.chat.id == self.settings.group_id:
                self.logger.debug(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or 'unknown'} –≤ –≥—Ä—É–ø–ø–µ")
    
    async def _setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram"""
        commands = [
            BotCommand("start", "üéØ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
            BotCommand("mystat", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–∞—Ä–º–∞"),
            BotCommand("mystats", "üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("last10links", "üîó –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫"),
            BotCommand("top10", "üèÜ –¢–û–ü-10 –ø–æ –∫–∞—Ä–º–µ"),
            BotCommand("leaderboard", "üèÖ –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥"),
            BotCommand("donate", "üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"),
        ]
        
        try:
            await self.bot.set_my_commands(commands)
            self.logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    async def _handle_start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = message.from_user
        
        welcome_text = f"""üéµ **–ü—Ä–∏–≤–µ—Ç, {user.first_name}!**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Do Presave Reminder Bot!

üéØ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ü–æ–º–æ–≥–∞—é –º—É–∑—ã–∫–∞–Ω—Ç–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç—Ä–µ–∫–æ–≤
‚Ä¢ –í–µ–¥—É —Å–∏—Å—Ç–µ–º—É –∫–∞—Ä–º—ã –∑–∞ –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å  
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö –∏ –±—É—Å—Ç–∞—Ö
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏

üåê **WebApp:** –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üìñ –û –±–æ—Ç–µ" –≤ –º–µ–Ω—é

‚å®Ô∏è **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/mystat - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/last10links - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏
/top10 - –¢–û–ü-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üéµ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏ —Ä–∞–∑–≤–∏–≤–∞–π –∫–∞—Ä—å–µ—Ä—É –≤–º–µ—Å—Ç–µ!"""
        
        try:
            await self.bot.reply_to(message, welcome_text, parse_mode='Markdown')
            self.logger.info(f"üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'unknown'} ({user.id})")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
    
    async def _handle_help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

üéØ **–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:**
/mystat - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–∞—Ä–º–∞
/mystats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/last10links - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
/top10 - –¢–û–ü-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–∞—Ä–º–µ
/leaderboard - –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

üîó **–ü–û–î–î–ï–†–ñ–ö–ê –¢–†–ï–ö–û–í:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ—Å–µ–π–≤ –∏–ª–∏ —Å—Ç—Ä–∏–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫

üíù **–ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–ò:**
–°–ø–∞—Å–∏–±–æ @username - –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞

üåê **WEBAPP:**
–ù–∞–∂–º–∏ "üìñ –û –±–æ—Ç–µ" –≤ –º–µ–Ω—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

üìû **–ü–û–î–î–ï–†–ñ–ö–ê:**
@misterdms_presave_bot - –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –±–æ—Ç—É
/donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

üéµ **–£–¥–∞—á–∏ –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏!**"""
        
        try:
            await self.bot.reply_to(message, help_text, parse_mode='Markdown')
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def _handle_webapp_data(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
        try:
            webapp_data = json.loads(message.web_app_data.data)
            self.logger.info(f"üåê WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç {message.from_user.id}: {webapp_data}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
            for handler in self.webapp_handlers:
                try:
                    await handler(message, webapp_data)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
            await self.bot.reply_to(
                message,
                "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç WebApp –ø–æ–ª—É—á–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!"
            )
            
        except json.JSONDecodeError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
            await self.bot.reply_to(
                message,
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"
            )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def _handle_callback_query(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handler = self.callback_handlers.get(call.data)
            if handler:
                await handler(call)
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                await self.bot.answer_callback_query(
                    call.id,
                    "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
                )
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            try:
                await self.bot.answer_callback_query(
                    call.id,
                    "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                )
            except:
                pass
    
    # === –ú–ï–¢–û–î–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ===
    
    def register_command_handler(self, command: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        self.command_handlers[command] = handler
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ telebot
        @self.bot.message_handler(commands=[command])
        async def command_wrapper(message: Message):
            self.command_count += 1
            try:
                await handler(message)
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /{command}: {e}")
                await self.bot.reply_to(
                    message,
                    f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /{command}"
                )
        
        self.logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã: /{command}")
    
    def register_message_handler(self, handler: Callable, **kwargs):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_handlers.append(handler)
        self.bot.message_handler(**kwargs)(handler)
        self.logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    def register_callback_handler(self, callback_data: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback query"""
        self.callback_handlers[callback_data] = handler
        self.logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback: {callback_data}")
    
    def register_webapp_handler(self, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö"""
        self.webapp_handlers.append(handler)
        self.logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp")
    
    # === –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞"""
        if self.is_polling:
            self.logger.warning("‚ö†Ô∏è –ü–æ–ª–ª–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            self.is_polling = True
            self.is_running = True
            
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ Telegram API...")
            
            await self.bot.infinity_polling(
                timeout=self.settings.telegram.polling_timeout,
                long_polling_timeout=self.settings.telegram.polling_timeout,
                logger_level=logging.ERROR,  # –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ telebot
                allowed_updates=['message', 'callback_query', 'inline_query']
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
            self.is_polling = False
            self.is_running = False
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        
        self.is_running = False
        self.is_polling = False
        
        if self.bot:
            try:
                await self.bot.close_session()
                self.logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API
            if self.bot:
                await self.bot.get_me()
                api_status = "healthy"
            else:
                api_status = "not_initialized"
            
            uptime = time.time() - self.start_time
            
            return {
                "healthy": self.is_running and api_status == "healthy",
                "api_status": api_status,
                "is_polling": self.is_polling,
                "uptime_seconds": uptime,
                "message_count": self.message_count,
                "command_count": self.command_count,
                "error_count": self.error_count,
                "registered_commands": len(self.command_handlers),
                "registered_handlers": len(self.message_handlers),
                "webapp_url": self.webapp_url
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            return {
                "healthy": False,
                "error": str(e),
                "uptime_seconds": time.time() - self.start_time
            }
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        return {
            "bot_info": self.bot_info,
            "uptime_seconds": time.time() - self.start_time,
            "message_count": self.message_count,
            "command_count": self.command_count,
            "error_count": self.error_count,
            "is_running": self.is_running,
            "is_polling": self.is_polling,
            "webapp_configured": bool(self.webapp_url),
            "handlers_count": {
                "commands": len(self.command_handlers),
                "messages": len(self.message_handlers),
                "callbacks": len(self.callback_handlers),
                "webapp": len(self.webapp_handlers)
            }
        }