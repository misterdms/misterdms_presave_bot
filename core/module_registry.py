"""
Core/module_registry.py - –†–µ–µ—Å—Ç—Ä –∏ –∑–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥—É–ª–µ–π
Do Presave Reminder Bot v29.07

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –º–æ–¥—É–ª–µ–π
"""

import asyncio
import importlib
import inspect
import traceback
import time
from typing import Dict, List, Optional, Type, Any
from pathlib import Path

from core.interfaces import BaseModule, ModuleStatus, ModuleInfo, ModulePriorities, EventTypes
from core.exceptions import ModuleLoadError, ModuleNotFoundError, ModuleDependencyError
from utils.logger import get_logger, log_module_activity, LogExecutionTime


class ModuleRegistry:
    """–†–µ–µ—Å—Ç—Ä –º–æ–¥—É–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
    
    def __init__(self, bot, database, event_dispatcher, settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
            database: –Ø–¥—Ä–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            event_dispatcher: –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        """
        self.bot = bot
        self.database = database
        self.event_dispatcher = event_dispatcher
        self.settings = settings
        self.logger = get_logger(__name__)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –º–æ–¥—É–ª–µ–π
        self.modules: Dict[str, BaseModule] = {}
        self.module_classes: Dict[str, Type[BaseModule]] = {}
        self.load_order: List[str] = []
        self.dependency_graph: Dict[str, List[str]] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.load_stats = {
            'total_modules': 0,
            'loaded_modules': 0,
            'running_modules': 0,
            'failed_modules': 0,
            'load_time': 0
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_loading = False
        self.is_starting = False
        
    async def register_module(self, module_name: str, module_instance: BaseModule, priority: int = ModulePriorities.NORMAL) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥—É–ª—è
        
        Args:
            module_name: –ò–º—è –º–æ–¥—É–ª—è
            module_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        try:
            self.logger.info(f"üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è: {module_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            if module_name in self.modules:
                self.logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if not isinstance(module_instance, BaseModule):
                raise ModuleLoadError(f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç BaseModule")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
            module_info = module_instance.get_info()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            if not self._is_plan_enabled(module_info.plan):
                self.logger.info(f"‚è≠Ô∏è –ú–æ–¥—É–ª—å {module_name} –æ—Ç–∫–ª—é—á–µ–Ω (–ø–ª–∞–Ω {module_info.plan} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            if not self.settings.is_module_enabled(module_name):
                self.logger.info(f"‚è∏Ô∏è –ú–æ–¥—É–ª—å {module_name} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥—É–ª—å
            self.modules[module_name] = module_instance
            self.module_classes[module_name] = type(module_instance)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            self.dependency_graph[module_name] = module_info.dependencies
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
            self._update_load_order()
            
            module_instance.status = ModuleStatus.LOADED
            self.load_stats['loaded_modules'] += 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self.event_dispatcher.emit(EventTypes.MODULE_LOADED, {
                'module_name': module_name,
                'module_info': module_info.__dict__,
                'priority': priority
            })
            
            log_module_activity(module_name, "registered", {
                'priority': priority,
                'dependencies': module_info.dependencies
            })
            
            self.logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.load_stats['failed_modules'] += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
            raise ModuleLoadError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å {module_name}: {e}")
    
    async def load_module_from_path(self, module_path: str, module_name: str = None) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            module_path: –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é (modules.user_management.module)
            module_name: –ò–º—è –º–æ–¥—É–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ –ø—É—Ç–∏)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            if module_name is None:
                module_name = module_path.split('.')[-2]  # modules.user_management.module -> user_management
            
            with LogExecutionTime(f"Loading module {module_name}"):
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                module = importlib.import_module(module_path)
                
                # –ò—â–µ–º –∫–ª–∞—Å—Å –º–æ–¥—É–ª—è
                module_class = None
                for name, obj in inspect.getmembers(module, inspect.isclass):
                    if (issubclass(obj, BaseModule) and 
                        obj != BaseModule and 
                        name.endswith('Module')):
                        module_class = obj
                        break
                
                if not module_class:
                    raise ModuleLoadError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –º–æ–¥—É–ª—è –≤ {module_path}")
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
                module_instance = module_class(
                    bot=self.bot,
                    database=self.database,
                    config=self.settings.get_module_config(module_name),
                    event_dispatcher=self.event_dispatcher
                )
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                module_info = module_instance.get_info()
                await self.register_module(module_name, module_instance, module_info.priority)
                
                return True
                
        except ImportError as e:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å {module_path}: {e}")
            raise ModuleNotFoundError(f"–ú–æ–¥—É–ª—å {module_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module_path}: {e}")
            raise ModuleLoadError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_path}: {e}")
    
    async def load_all_modules(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        if self.is_loading:
            self.logger.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return False
        
        try:
            self.is_loading = True
            load_start_time = time.time()
            
            self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª–µ–π...")
            
            # –ú–æ–¥—É–ª–∏ –ø–æ –ø–ª–∞–Ω–∞–º
            modules_to_load = []
            
            # –ü–õ–ê–ù 1 - –±–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (–≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è)
            plan1_modules = [
                ('modules.user_management.module', 'user_management'),
                ('modules.track_support_system.module', 'track_support_system'),
                ('modules.karma_system.module', 'karma_system'),
                ('modules.navigation_system.module', 'navigation_system'),
                ('modules.module_settings.module', 'module_settings')
            ]
            modules_to_load.extend(plan1_modules)
            
            # –ü–õ–ê–ù 2 - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã
            if self.settings.plan2_enabled:
                plan2_modules = [
                    ('modules.interactive_forms.module', 'interactive_forms'),
                    ('modules.leaderboards.module', 'leaderboards')
                ]
                modules_to_load.extend(plan2_modules)
            
            # –ü–õ–ê–ù 3 - –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏ backup
            if self.settings.plan3_enabled:
                plan3_modules = [
                    ('modules.approval_system.module', 'approval_system'),
                    ('modules.database_management.module', 'database_management')
                ]
                modules_to_load.extend(plan3_modules)
            
            # –ü–õ–ê–ù 4 - –ò–ò –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if self.settings.plan4_enabled:
                plan4_modules = [
                    ('modules.ai_assistant.module', 'ai_assistant'),
                    ('modules.ai_settings.module', 'ai_settings'),
                    ('modules.calendar_system.module', 'calendar_system'),
                    ('modules.canva_integration.module', 'canva_integration')
                ]
                modules_to_load.extend(plan4_modules)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
            self.load_stats['total_modules'] = len(modules_to_load)
            
            for module_path, module_name in modules_to_load:
                try:
                    await self.load_module_from_path(module_path, module_name)
                except (ModuleNotFoundError, ImportError):
                    # –ú–æ–¥—É–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    self.logger.info(f"‚è≠Ô∏è –ú–æ–¥—É–ª—å {module_name} –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ —Å–æ–∑–¥–∞–Ω)")
                except Exception as e:
                    self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {module_name}: {e}")
                    self.load_stats['failed_modules'] += 1
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            await self._initialize_all_modules()
            
            self.load_stats['load_time'] = time.time() - load_start_time
            
            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {self.load_stats['load_time']:.2f}s")
            self.logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {self.load_stats['loaded_modules']}/{self.load_stats['total_modules']}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")
            return False
        finally:
            self.is_loading = False
    
    async def _initialize_all_modules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
        
        for module_name in self.load_order:
            if module_name not in self.modules:
                continue
            
            module = self.modules[module_name]
            try:
                self.logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è: {module_name}")
                module.status = ModuleStatus.LOADING
                
                success = await module.initialize()
                if success:
                    module.status = ModuleStatus.LOADED
                    log_module_activity(module_name, "initialized")
                else:
                    module.status = ModuleStatus.ERROR
                    self.logger.error(f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è")
                    
            except Exception as e:
                module.status = ModuleStatus.ERROR
                self.load_stats['failed_modules'] += 1
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
                self.logger.error(traceback.format_exc())
    
    async def start_all_modules(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        if self.is_starting:
            self.logger.warning("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return False
        
        try:
            self.is_starting = True
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π...")
            
            for module_name in self.load_order:
                if module_name not in self.modules:
                    continue
                
                module = self.modules[module_name]
                if module.status != ModuleStatus.LOADED:
                    continue
                
                try:
                    self.logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è: {module_name}")
                    module.status = ModuleStatus.STARTING
                    
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    module.register_handlers()
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å
                    success = await module.start()
                    if success:
                        module.status = ModuleStatus.RUNNING
                        self.load_stats['running_modules'] += 1
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                        await self.event_dispatcher.emit(EventTypes.MODULE_STARTED, {
                            'module_name': module_name
                        })
                        
                        log_module_activity(module_name, "started")
                    else:
                        module.status = ModuleStatus.ERROR
                        self.logger.error(f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                        
                except Exception as e:
                    module.status = ModuleStatus.ERROR
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è {module_name}: {e}")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    await self.event_dispatcher.emit(EventTypes.MODULE_ERROR, {
                        'module_name': module_name,
                        'error': str(e)
                    })
            
            self.logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {self.load_stats['running_modules']}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª–µ–π: {e}")
            return False
        finally:
            self.is_starting = False
    
    async def stop_all_modules(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        self.logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for module_name in reversed(self.load_order):
            if module_name not in self.modules:
                continue
            
            module = self.modules[module_name]
            if module.status != ModuleStatus.RUNNING:
                continue
            
            try:
                self.logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è: {module_name}")
                module.status = ModuleStatus.STOPPING
                
                await module.stop()
                await module.cleanup()
                
                module.status = ModuleStatus.STOPPED
                self.load_stats['running_modules'] -= 1
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                await self.event_dispatcher.emit(EventTypes.MODULE_STOPPED, {
                    'module_name': module_name
                })
                
                log_module_activity(module_name, "stopped")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
    
    def get_module(self, module_name: str) -> Optional[BaseModule]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥—É–ª—è –ø–æ –∏–º–µ–Ω–∏"""
        return self.modules.get(module_name)
    
    def is_module_running(self, module_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–¥—É–ª—å"""
        module = self.get_module(module_name)
        return module is not None and module.status == ModuleStatus.RUNNING
    
    def get_module_status(self, module_name: str) -> Optional[ModuleStatus]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è"""
        module = self.get_module(module_name)
        return module.status if module else None
    
    def get_running_modules(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        return [
            name for name, module in self.modules.items()
            if module.status == ModuleStatus.RUNNING
        ]
    
    def get_all_commands(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        all_commands = {}
        for module_name, module in self.modules.items():
            if module.status == ModuleStatus.RUNNING:
                commands = module.get_commands()
                for command in commands:
                    all_commands[command] = module_name
        return all_commands
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        health_data = {
            "healthy": True,
            "modules_count": len(self.modules),
            "running_modules": self.load_stats['running_modules'],
            "failed_modules": self.load_stats['failed_modules'],
            "load_time": self.load_stats['load_time'],
            "modules": {}
        }
        
        for module_name, module in self.modules.items():
            try:
                module_health = await module.health_check()
                health_data["modules"][module_name] = module_health
                
                if not module_health.get("healthy", False):
                    health_data["healthy"] = False
                    
            except Exception as e:
                health_data["modules"][module_name] = {
                    "healthy": False,
                    "error": str(e)
                }
                health_data["healthy"] = False
        
        return health_data
    
    def _is_plan_enabled(self, plan: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        if plan == 1:
            return True  # –ü–ª–∞–Ω 1 –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω
        elif plan == 2:
            return self.settings.plan2_enabled
        elif plan == 3:
            return self.settings.plan3_enabled
        elif plan == 4:
            return self.settings.plan4_enabled
        else:
            return False
    
    def _check_dependencies(self, dependencies: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è"""
        for dependency in dependencies:
            if dependency not in self.modules:
                self.logger.error(f"‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {dependency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            dep_module = self.modules[dependency]
            if dep_module.status not in [ModuleStatus.LOADED, ModuleStatus.RUNNING]:
                self.logger.error(f"‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {dependency} –Ω–µ –≥–æ—Ç–æ–≤–∞")
                return False
        
        return True
    
    def _update_load_order(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        # –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        visited = set()
        temp_visited = set()
        load_order = []
        
        def visit(module_name):
            if module_name in temp_visited:
                raise ModuleDependencyError(f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {module_name}")
            
            if module_name not in visited:
                temp_visited.add(module_name)
                
                # –ü–æ—Å–µ—â–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                dependencies = self.dependency_graph.get(module_name, [])
                for dependency in dependencies:
                    if dependency in self.dependency_graph:
                        visit(dependency)
                
                temp_visited.remove(module_name)
                visited.add(module_name)
                load_order.append(module_name)
        
        # –û–±—Ö–æ–¥–∏–º –≤—Å–µ –º–æ–¥—É–ª–∏
        for module_name in self.dependency_graph:
            if module_name not in visited:
                visit(module_name)
        
        self.load_order = load_order
        self.logger.debug(f"üìã –ü–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: {self.load_order}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π"""
        return {
            "load_stats": self.load_stats.copy(),
            "modules_count": len(self.modules),
            "running_modules": [name for name, module in self.modules.items() 
                              if module.status == ModuleStatus.RUNNING],
            "failed_modules": [name for name, module in self.modules.items() 
                             if module.status == ModuleStatus.ERROR],
            "load_order": self.load_order.copy(),
            "dependency_graph": self.dependency_graph.copy()
        }