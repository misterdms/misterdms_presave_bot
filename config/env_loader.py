"""
Config/env_loader.py - –ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
Do Presave Reminder Bot v29.07

–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

import os
import logging
from pathlib import Path
from typing import Optional, Dict, Any
import sys

try:
    from dotenv import load_dotenv
    DOTENV_AVAILABLE = True
except ImportError:
    DOTENV_AVAILABLE = False
    logging.warning("python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")


class EnvironmentLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.loaded_files = []
        self.missing_variables = []
        self.environment_type = "unknown"
        
    def load_environment(self, env_file: Optional[str] = None) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        Args:
            env_file: –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self._detect_environment()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if DOTENV_AVAILABLE:
                self._load_dotenv_files(env_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if not self._validate_critical_variables():
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._set_defaults()
            
            logging.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({self.environment_type})")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _detect_environment(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if os.getenv("RENDER"):
            self.environment_type = "render.com"
        elif os.getenv("HEROKU"):
            self.environment_type = "heroku"
        elif os.getenv("DOCKER"):
            self.environment_type = "docker"
        elif os.getenv("DEVELOPMENT_MODE", "").lower() == "true":
            self.environment_type = "development"
        elif os.getenv("TEST_MODE", "").lower() == "true":
            self.environment_type = "testing"
        else:
            self.environment_type = "production"
        
        logging.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {self.environment_type}")
    
    def _load_dotenv_files(self, custom_env_file: Optional[str] = None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        env_files = []
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if custom_env_file and Path(custom_env_file).exists():
            env_files.append(custom_env_file)
        
        # –§–∞–π–ª—ã –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é
        env_files.extend([
            f".env.{self.environment_type}",
            ".env.local", 
            ".env"
        ])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        for env_file in env_files:
            if Path(env_file).exists():
                try:
                    load_dotenv(env_file, override=False)  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
                    self.loaded_files.append(env_file)
                    logging.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω {env_file}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {env_file}: {e}")
    
    def _validate_critical_variables(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        critical_vars = [
            "BOT_TOKEN",
            "DATABASE_URL",
            "GROUP_ID"
        ]
        
        missing = []
        for var in critical_vars:
            value = os.getenv(var)
            if not value or value.strip() == "":
                missing.append(var)
        
        if missing:
            self.missing_variables = missing
            logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
            self._print_setup_instructions(missing)
            return False
        
        return True
    
    def _set_defaults(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        defaults = {
            # –°–∏—Å—Ç–µ–º–∞
            "DEBUG": "false",
            "TEST_MODE": "false", 
            "DEVELOPMENT_MODE": "false",
            "LOG_LEVEL": "INFO",
            "LOG_FORMAT": "structured",
            
            # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            "DB_POOL_SIZE": "5",
            "FORCE_RECREATE_TABLES": "false",
            "ALLOW_DATA_LOSS_RECOVERY": "false",
            
            # WebApp
            "WEBAPP_SHORT_NAME": "about25",
            
            # –ö–∞—Ä–º–∞ –∏ –∑–≤–∞–Ω–∏—è
            "ADMIN_KARMA": "100500",
            "RANK_NEWBIE_MIN": "0",
            "RANK_NEWBIE_MAX": "5",
            "RANK_HOPE_MIN": "6", 
            "RANK_HOPE_MAX": "15",
            "RANK_MEGA_MIN": "16",
            "RANK_MEGA_MAX": "30",
            "RANK_AMBASSADOR_MIN": "31",
            
            # Rate limiting
            "NORMAL_COOLDOWN": "20",
            "NORMAL_MAX_HOUR": "180",
            "BURST_COOLDOWN": "6",
            "BURST_MAX_HOUR": "600",
            "CONSERVATIVE_COOLDOWN": "60",
            "CONSERVATIVE_MAX_HOUR": "60",
            "ADMIN_BURST_COOLDOWN": "3",
            "ADMIN_BURST_MAX_HOUR": "1200",
            
            # –ü–ª–∞–Ω—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            "ENABLE_PLAN_2_FEATURES": "false",
            "ENABLE_PLAN_3_FEATURES": "false", 
            "ENABLE_PLAN_4_FEATURES": "false",
            
            # –ò–ò —Å–µ—Ä–≤–∏—Å—ã
            "AI_ENABLED": "false",
            "AI_MODEL": "gpt-3.5-turbo",
            "AI_TEMPERATURE": "0.7",
            "AI_MAX_TOKENS": "1000",
            "OPENAI_API_KEY": "not_specified_yet",
            "ANTHROPIC_API_KEY": "not_specified_yet",
            
            # Backup
            "AUTO_BACKUP_ENABLED": "true",
            "BACKUP_CHECK_TIME": "10:00",
            "BACKUP_RETENTION_DAYS": "7",
            "BACKUP_MAX_SIZE_MB": "45",
            "BACKUP_COMPRESSION_LEVEL": "6",
            "BACKUP_ENCRYPT": "false",
            "BACKUP_INCLUDE_LOGS": "false",
            "BACKUP_VERIFICATION_ENABLED": "true",
            "BACKUP_NOTIFICATIONS_ENABLED": "true",
            "BACKUP_WARNING_DAYS": "25,28,30,44",
            
            # –§–æ—Ä–º—ã
            "FORMS_ENABLED": "false",
            "FORM_TIMEOUT_MINUTES": "30",
            
            # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
            "MAX_SCREENSHOTS_PER_CLAIM": "5",
            "SCREENSHOT_MAX_SIZE_MB": "10",
            
            # –°–µ—Ç—å
            "HOST": "0.0.0.0",
            "REQUEST_TIMEOUT": "30",
            "RESPONSE_DELAY": "3",
            "WEBHOOK_MAX_CONNECTIONS": "40",
            "POLLING_INTERVAL": "1",
            "POLLING_TIMEOUT": "20",
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            "ASYNC_WORKERS": "2",
            "MAX_CONCURRENT_OPERATIONS": "10",
            "MIGRATION_TIMEOUT_MINUTES": "15",
            
            # Keep-Alive
            "KEEPALIVE_ENABLED": "true",
            "KEEPALIVE_INTERVAL": "300",
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            "ERROR_REPORTING": "true",
            "METRICS_COLLECTION": "true",
            "HEALTH_CHECK_ENABLED": "true",
            "ENABLE_PERFORMANCE_LOGS": "true",
            
            # –ö–∞—Ä–º–∞ —Å–∏—Å—Ç–µ–º–∞
            "MIN_MESSAGE_LENGTH_FOR_KARMA": "10",
            "MAX_KARMA_CHANGE_PER_COMMAND": "100500",
            "KARMA_COOLDOWN_SECONDS": "60",
            "ENABLE_AUTO_KARMA": "true",
            "GRATITUDE_COOLDOWN_MINUTES": "60",
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            "WHITELIST": "3",
            "CORRELATION_ID_HEADER": "X-Request-ID",
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            "REMINDER_TEXT": "üéß –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –Ω–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤—ã—à–µ! ‚ô•Ô∏è –î–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞–∂–º–∏ /last10links"
        }
        
        set_count = 0
        for key, default_value in defaults.items():
            if os.getenv(key) is None:
                os.environ[key] = default_value
                set_count += 1
        
        if set_count > 0:
            logging.info(f"‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {set_count} –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def _print_setup_instructions(self, missing_vars: list):
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("\n" + "="*60)
        print("üö® –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø")
        print("="*60)
        
        for var in missing_vars:
            print(f"\n‚ùå {var}")
            
            if var == "BOT_TOKEN":
                print("   –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
                print("   –ü—Ä–∏–º–µ—Ä: 1234567890:ABCdefGHIjklMNOpqrsTUVwxy")
                
            elif var == "DATABASE_URL":
                print("   PostgreSQL connection string")
                print("   –ü—Ä–∏–º–µ—Ä: postgresql://user:pass@host:5432/database")
                
            elif var == "GROUP_ID":
                print("   ID –≤–∞—à–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã")
                print("   –ü—Ä–∏–º–µ—Ä: -1002811959953")
        
        print(f"\nüìã –í–ê–†–ò–ê–ù–¢–´ –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"   1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print(f"   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ")
        print(f"   3. –ù–∞ Render.com –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª Environment")
        
        print(f"\nüìÑ –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env:")
        for var in missing_vars:
            print(f"   {var}=–≤–∞—à–µ_–∑–Ω–∞—á–µ–Ω–∏–µ")
        
        print("="*60)
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        return {
            "environment_type": self.environment_type,
            "loaded_files": self.loaded_files,
            "missing_variables": self.missing_variables,
            "total_env_vars": len(os.environ),
            "dotenv_available": DOTENV_AVAILABLE
        }


def load_environment(env_file: Optional[str] = None) -> bool:
    """
    –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Args:
        env_file: –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
    """
    loader = EnvironmentLoader()
    return loader.load_environment(env_file)


def validate_environment() -> tuple[bool, list]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Returns:
        tuple: (–≤—Å–µ_–ª–∏_–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–µ—Å—Ç—å, —Å–ø–∏—Å–æ–∫_–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö)
    """
    loader = EnvironmentLoader()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    critical_vars = ["BOT_TOKEN", "DATABASE_URL", "GROUP_ID"]
    missing = []
    
    for var in critical_vars:
        if not os.getenv(var, "").strip():
            missing.append(var)
    
    return len(missing) == 0, missing


def get_env_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return {
        "python_version": sys.version,
        "environment_type": os.getenv("RENDER", "local"),
        "debug_mode": os.getenv("DEBUG", "false").lower() == "true",
        "test_mode": os.getenv("TEST_MODE", "false").lower() == "true",
        "development_mode": os.getenv("DEVELOPMENT_MODE", "false").lower() == "true",
        "has_bot_token": bool(os.getenv("BOT_TOKEN", "").strip()),
        "has_database_url": bool(os.getenv("DATABASE_URL", "").strip()),
        "webapp_url": os.getenv("WEBAPP_URL", "–Ω–µ_—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"),
        "total_env_vars": len(os.environ)
    }


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    success = load_environment()
    
    if success:
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = get_env_info()
        print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏:")
        for key, value in info.items():
            print(f"   {key}: {value}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)