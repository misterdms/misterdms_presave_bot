"""
üåê Webhook Server - Do Presave Reminder Bot v25+
HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –æ—Ç Telegram –∏ keep-alive –¥–ª—è Render.com
"""

import json
import threading
import time
from datetime import datetime, timezone
from typing import Dict, Any, Optional
from flask import Flask, request, jsonify, abort
import telebot
from telebot.types import Update

from config import config
from utils.security import security_manager
from utils.logger import get_logger, telegram_logger, performance_logger
from webhooks.keepalive import KeepAliveManager

logger = get_logger(__name__)

class WebhookServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –∏ API endpoints"""
    
    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot
        self.app = Flask(__name__)
        self.keep_alive_manager = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        self.server_stats = {
            'start_time': datetime.now(timezone.utc),
            'webhook_requests': 0,
            'health_checks': 0,
            'last_update': None,
            'errors': 0
        }
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        self._setup_routes()
        
        logger.info("üåê Webhook Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ Flask"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π webhook endpoint
        @self.app.route(config.WEBHOOK_PATH, methods=['POST'])
        def webhook():
            return self._handle_webhook()
        
        # Health check endpoint
        @self.app.route(config.HEALTH_CHECK_PATH, methods=['GET'])
        def health_check():
            return self._handle_health_check()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        @self.app.route('/stats', methods=['GET'])
        def server_stats():
            return self._handle_stats_request()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        @self.app.route('/info', methods=['GET'])
        def bot_info():
            return self._handle_info_request()
        
        # API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–æ–≤
        @self.app.route('/api/plans', methods=['GET'])
        def plans_status():
            return self._handle_plans_status()
        
        # –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
        @self.app.route('/', methods=['GET'])
        def root():
            return self._handle_root_request()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        @self.app.errorhandler(404)
        def not_found(error):
            return jsonify({
                'error': 'Not Found',
                'message': 'Endpoint not found',
                'timestamp': datetime.now(timezone.utc).isoformat()
            }), 404
        
        @self.app.errorhandler(500)
        def internal_error(error):
            self.server_stats['errors'] += 1
            logger.error(f"‚ùå Internal server error: {error}")
            return jsonify({
                'error': 'Internal Server Error',
                'message': 'Something went wrong',
                'timestamp': datetime.now(timezone.utc).isoformat()
            }), 500
    
    def _handle_webhook(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
        try:
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
            if request.content_type != 'application/json':
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π Content-Type –¥–ª—è webhook")
                abort(400)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            json_data = request.get_json()
            if not json_data:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ webhook")
                abort(400)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if hasattr(request, 'headers') and 'X-Telegram-Bot-Api-Secret-Token' in request.headers:
                secret_token = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
                if secret_token != config.WEBHOOK_SECRET:
                    logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π secret token –≤ webhook")
                    abort(403)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
            update = Update.de_json(json_data)
            if not update:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å Update")
                abort(400)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
            self._process_update(update)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            processing_time = (time.time() - start_time) * 1000
            self.server_stats['webhook_requests'] += 1
            self.server_stats['last_update'] = datetime.now(timezone.utc)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_logger.log_execution_time('webhook_processing', processing_time)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return jsonify({'status': 'ok'}), 200
            
        except Exception as e:
            self.server_stats['errors'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return jsonify({'error': 'Webhook processing failed'}), 500
    
    def _process_update(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Update –æ—Ç Telegram"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–∏–ø–µ update
            user_id = None
            update_type = None
            
            if update.message:
                user_id = update.message.from_user.id
                update_type = 'message'
            elif update.callback_query:
                user_id = update.callback_query.from_user.id
                update_type = 'callback_query'
            elif update.inline_query:
                user_id = update.inline_query.from_user.id
                update_type = 'inline_query'
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ update
            telegram_logger.webhook_received(
                update_type=update_type or 'unknown',
                user_id=user_id,
                update_id=update.update_id
            )
            
            # –ü–µ—Ä–µ–¥–∞–µ–º update –±–æ—Ç—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.bot.process_new_updates([update])
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Update: {e}")
            raise
    
    def _handle_health_check(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ health check –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            self.server_stats['health_checks'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            health_status = {
                'status': 'healthy',
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'uptime_seconds': (datetime.now(timezone.utc) - self.server_stats['start_time']).total_seconds(),
                'components': {
                    'webhook_server': True,
                    'telegram_bot': True,
                    'database': False,
                    'keep_alive': False
                }
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                from database.manager import get_database_manager
                db = get_database_manager()
                db_health = db.health_check()
                health_status['components']['database'] = db_health['database_connection'] == 'ok'
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î –≤ health check: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º keep-alive
            if self.keep_alive_manager:
                health_status['components']['keep_alive'] = self.keep_alive_manager.is_running()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            all_components_healthy = all(health_status['components'].values())
            if not all_components_healthy:
                health_status['status'] = 'degraded'
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            health_status['stats'] = {
                'webhook_requests': self.server_stats['webhook_requests'],
                'health_checks': self.server_stats['health_checks'],
                'errors': self.server_stats['errors'],
                'last_update': self.server_stats['last_update'].isoformat() if self.server_stats['last_update'] else None
            }
            
            status_code = 200 if all_components_healthy else 503
            return jsonify(health_status), status_code
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            return jsonify({
                'status': 'unhealthy',
                'error': str(e),
                'timestamp': datetime.now(timezone.utc).isoformat()
            }), 500
    
    def _handle_stats_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–≤ production –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω)
            auth_header = request.headers.get('Authorization')
            if not auth_header or auth_header != f"Bearer {config.WEBHOOK_SECRET}":
                return jsonify({'error': 'Unauthorized'}), 401
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                'server': self.server_stats.copy(),
                'bot': {
                    'enabled': self._is_bot_enabled(),
                    'limit_mode': self._get_current_limit_mode(),
                    'whitelist_threads': len(config.WHITELIST_THREADS),
                    'admin_count': len(config.ADMIN_IDS)
                },
                'plans': {
                    'plan_1': True,
                    'plan_2': config.ENABLE_PLAN_2_FEATURES,
                    'plan_3': config.ENABLE_PLAN_3_FEATURES,
                    'plan_4': config.ENABLE_PLAN_4_FEATURES
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
            try:
                from database.manager import get_database_manager
                db = get_database_manager()
                db_stats = db.get_database_stats()
                stats['database'] = db_stats
            except Exception as e:
                stats['database'] = {'error': str(e)}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã
            if stats['server']['start_time']:
                stats['server']['start_time'] = stats['server']['start_time'].isoformat()
            if stats['server']['last_update']:
                stats['server']['last_update'] = stats['server']['last_update'].isoformat()
            
            return jsonify(stats), 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return jsonify({'error': 'Stats unavailable'}), 500
    
    def _handle_info_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        try:
            bot_info = {
                'name': 'Do Presave Reminder Bot',
                'version': 'v25+ (–ü–æ—ç—Ç–∞–ø–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)',
                'description': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–∑–∞–∏–º–Ω—ã—Ö –ø—Ä–µ—Å–µ–π–≤–æ–≤ –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ',
                'developer': '@Mister_DMS',
                'features': {
                    'presave_reminders': True,
                    'karma_system': config.ENABLE_PLAN_2_FEATURES,
                    'ai_integration': config.ENABLE_PLAN_3_FEATURES,
                    'backup_system': config.ENABLE_PLAN_4_FEATURES
                },
                'supported_platforms': [
                    'Spotify', 'Apple Music', 'YouTube Music', 'SoundCloud',
                    'Bandcamp', 'Deezer', 'Tidal', 'Amazon Music',
                    'Linktree', 'FanLink', 'SmartURL', 'Feature.fm'
                ],
                'deployment': {
                    'platform': 'Render.com',
                    'database': 'PostgreSQL',
                    'monitoring': 'UptimeRobot'
                }
            }
            
            return jsonify(bot_info), 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return jsonify({'error': 'Info unavailable'}), 500
    
    def _handle_plans_status(self):
        """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è"""
        try:
            plans_status = {
                'plan_1': {
                    'name': '–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
                    'version': 'v25',
                    'status': 'active',
                    'features': [
                        '–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å—Å—ã–ª–∫–∏',
                        '–°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é',
                        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏',
                        '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
                    ]
                },
                'plan_2': {
                    'name': '–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã',
                    'version': 'v26',
                    'status': 'active' if config.ENABLE_PLAN_2_FEATURES else 'development',
                    'features': [
                        '–°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π',
                        '–õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã',
                        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º–æ–π',
                        '–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è'
                    ]
                },
                'plan_3': {
                    'name': '–ò–ò –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã',
                    'version': 'v27',
                    'status': 'active' if config.ENABLE_PLAN_3_FEATURES else 'development',
                    'features': [
                        '–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫',
                        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä–º–∞',
                        '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã',
                        '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π'
                    ]
                },
                'plan_4': {
                    'name': 'Backup —Å–∏—Å—Ç–µ–º–∞',
                    'version': 'v27.1',
                    'status': 'active' if config.ENABLE_PLAN_4_FEATURES else 'development',
                    'features': [
                        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup',
                        '–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏',
                        '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö',
                        '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö'
                    ]
                }
            }
            
            return jsonify(plans_status), 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–æ–≤: {e}")
            return jsonify({'error': 'Plans status unavailable'}), 500
    
    def _handle_root_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            welcome_info = {
                'message': 'Do Presave Reminder Bot API',
                'version': 'v25+',
                'status': 'running',
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'endpoints': {
                    '/health': 'Health check',
                    '/info': 'Bot information',
                    '/api/plans': 'Development plans status',
                    '/stats': 'Server statistics (auth required)'
                },
                'documentation': 'https://github.com/MisterDMS/presave-bot',
                'support': '@Mister_DMS'
            }
            
            return jsonify(welcome_info), 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return jsonify({'error': 'Service unavailable'}), 500
    
    # ============================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ============================================
    
    def _is_bot_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç"""
        try:
            from database.manager import get_database_manager
            db = get_database_manager()
            enabled = db.get_setting('bot_enabled')
            return enabled == 'true' if enabled else True
        except:
            return True
    
    def _get_current_limit_mode(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            from database.manager import get_database_manager
            db = get_database_manager()
            mode = db.get_setting('current_limit_mode')
            return mode or config.DEFAULT_LIMIT_MODE
        except:
            return config.DEFAULT_LIMIT_MODE
    
    def start_server(self, debug: bool = False, use_reloader: bool = False):
        """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            logger.info(f"üåê –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {config.PORT}")
            logger.info(f"üîó Webhook URL: {config.get_webhook_url()}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –º–µ–Ω–µ–¥–∂–µ—Ä
            if not debug:  # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ debug —Ä–µ–∂–∏–º–µ
                self.keep_alive_manager = KeepAliveManager()
                self.keep_alive_manager.start()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Flask
            self.app.config['SECRET_KEY'] = config.WEBHOOK_SECRET
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.app.run(
                host='0.0.0.0',
                port=config.PORT,
                debug=debug,
                use_reloader=use_reloader,
                threaded=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    def start_server_threaded(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            server_thread = threading.Thread(
                target=self.start_server,
                kwargs={'debug': False, 'use_reloader': False},
                daemon=True
            )
            server_thread.start()
            
            logger.info("üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
            return server_thread
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
            raise
    
    def setup_webhook(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –≤ Telegram"""
        try:
            webhook_url = config.get_webhook_url()
            
            if not webhook_url:
                logger.warning("‚ö†Ô∏è RENDER_EXTERNAL_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
            self.bot.remove_webhook()
            time.sleep(1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            result = self.bot.set_webhook(
                url=webhook_url,
                certificate=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç Render.com
                max_connections=40,
                allowed_updates=['message', 'callback_query', 'inline_query']
            )
            
            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
                webhook_info = self.bot.get_webhook_info()
                logger.info(f"üìã Webhook info: URL={webhook_info.url}, pending={webhook_info.pending_update_count}")
                
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False
    
    def get_server_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            current_time = datetime.now(timezone.utc)
            uptime = current_time - self.server_stats['start_time']
            
            stats = self.server_stats.copy()
            stats['uptime_seconds'] = uptime.total_seconds()
            stats['uptime_formatted'] = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            stats['requests_per_minute'] = self.server_stats['webhook_requests'] / max(uptime.total_seconds() / 60, 1)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
            stats['start_time'] = stats['start_time'].isoformat()
            if stats['last_update']:
                stats['last_update'] = stats['last_update'].isoformat()
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return {}
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º keep-alive
            if self.keep_alive_manager:
                self.keep_alive_manager.stop()
            
            # –£–¥–∞–ª—è–µ–º webhook
            try:
                self.bot.remove_webhook()
                logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
            except:
                pass
            
            logger.info("üåê Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================

def create_webhook_server(bot: telebot.TeleBot) -> WebhookServer:
    """–°–æ–∑–¥–∞–Ω–∏–µ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    return WebhookServer(bot)

# ============================================
# –≠–ö–°–ü–û–†–¢
# ============================================

__all__ = ['WebhookServer', 'create_webhook_server']

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Webhook Server...")
    print("‚úÖ –ú–æ–¥—É–ª—å server.py –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
