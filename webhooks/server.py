"""
HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook Do Presave Reminder Bot v25+
–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render.com
"""

import os
import json
import threading
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import telebot

from utils.logger import get_logger, log_api_call

logger = get_logger(__name__)

class WebhookHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è webhook"""
    
    def __init__(self, *args, bot=None, webhook_secret=None, **kwargs):
        self.bot = bot
        self.webhook_secret = webhook_secret
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            parsed_url = urlparse(self.path)
            
            if parsed_url.path == '/':
                self._handle_root()
            elif parsed_url.path == '/health':
                self._handle_health()
            elif parsed_url.path == '/status':
                self._handle_status()
            else:
                self._handle_not_found()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self._send_error(500, "Internal Server Error")
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ (webhook –æ—Ç Telegram)"""
        try:
            parsed_url = urlparse(self.path)
            
            if parsed_url.path == '/webhook':
                self._handle_webhook()
            else:
                self._handle_not_found()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self._send_error(500, "Internal Server Error")
    
    def _handle_root(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏"""
        html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Do Presave Reminder Bot v25+</title>
    <meta charset="utf-8">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
        .container {{ max-width: 600px; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .status {{ color: #28a745; font-weight: bold; }}
        .info {{ color: #6c757d; margin: 10px 0; }}
        .section {{ margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 5px; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üéµ Do Presave Reminder Bot</h1>
        <div class="status">‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</div>
        
        <div class="section">
            <h3>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</h3>
            <div class="info">–í–µ—Ä—Å–∏—è: v25+ (–ü–õ–ê–ù 1)</div>
            <div class="info">–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</div>
            <div class="info">–†–µ–∂–∏–º: Production</div>
        </div>
        
        <div class="section">
            <h3>üîó Endpoints</h3>
            <div class="info">GET /health - Health check</div>
            <div class="info">GET /status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</div>
            <div class="info">POST /webhook - Telegram webhook</div>
        </div>
        
        <div class="section">
            <h3>üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ü–õ–ê–ù 1</h3>
            <div class="info">‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</div>
            <div class="info">‚úÖ –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π</div>
            <div class="info">‚úÖ –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ API</div>
            <div class="info">‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
            <div class="info">‚è∏Ô∏è –ü–õ–ê–ù 2: –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</div>
            <div class="info">‚è∏Ô∏è –ü–õ–ê–ù 3: –ò–ò –∏ —Ñ–æ—Ä–º—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</div>
            <div class="info">‚è∏Ô∏è –ü–õ–ê–ù 4: Backup —Å–∏—Å—Ç–µ–º–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</div>
        </div>
    </div>
</body>
</html>
"""
        
        self._send_response(200, html_content, content_type='text/html')
        log_api_call(logger, "GET", "/", "200")
    
    def _handle_health(self):
        """Health check endpoint"""
        health_data = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "version": "v25+",
            "plan": "–ü–õ–ê–ù 1",
            "uptime": "running",
            "bot_connected": self.bot is not None,
            "webhook_configured": self.webhook_secret is not None
        }
        
        self._send_json_response(200, health_data)
        log_api_call(logger, "GET", "/health", "200")
    
    def _handle_status(self):
        """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = None
            if self.bot:
                try:
                    me = self.bot.get_me()
                    bot_info = {
                        "username": me.username,
                        "first_name": me.first_name,
                        "id": me.id
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è info –æ –±–æ—Ç–µ: {e}")
            
            status_data = {
                "server": {
                    "status": "running",
                    "timestamp": datetime.now().isoformat(),
                    "version": "v25+",
                    "plan": "–ü–õ–ê–ù 1 - –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
                },
                "bot": bot_info,
                "features": {
                    "plan_1": {
                        "enabled": True,
                        "description": "–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
                        "features": [
                            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫",
                            "–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é", 
                            "–†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤",
                            "–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
                        ]
                    },
                    "plan_2": {
                        "enabled": False,
                        "description": "–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã",
                        "status": "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
                    },
                    "plan_3": {
                        "enabled": False,
                        "description": "–ò–ò –∏ —Ñ–æ—Ä–º—ã",
                        "status": "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
                    },
                    "plan_4": {
                        "enabled": False,
                        "description": "Backup —Å–∏—Å—Ç–µ–º–∞",
                        "status": "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
                    }
                },
                "environment": {
                    "host": os.getenv('HOST', '0.0.0.0'),
                    "port": os.getenv('PORT', '8080'),
                    "external_url": os.getenv('RENDER_EXTERNAL_URL'),
                    "webhook_configured": bool(self.webhook_secret)
                }
            }
            
            self._send_json_response(200, status_data)
            log_api_call(logger, "GET", "/status", "200")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_status: {e}")
            self._send_error(500, "Error getting status")
    
    def _handle_webhook(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
            content_type = self.headers.get('Content-Type', '')
            if not content_type.startswith('application/json'):
                self._send_error(400, "Invalid Content-Type")
                return
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            if content_length == 0:
                self._send_error(400, "Empty request body")
                return
            
            body = self.rfile.read(content_length)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook secret –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if self.webhook_secret:
                # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
                # –î–ª—è –ü–õ–ê–ù–ê 1 –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                pass
            
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                update_data = json.loads(body.decode('utf-8'))
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                self._send_error(400, "Invalid JSON")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –±–æ—Ç
            if not self.bot:
                logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self._send_error(500, "Bot not initialized")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
            try:
                update = telebot.types.Update.de_json(update_data)
                self.bot.process_new_updates([update])
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                update_type = "message" if update.message else "callback_query" if update.callback_query else "unknown"
                log_api_call(logger, "POST", "/webhook", "200", update_type=update_type)
                
                self._send_response(200, "OK")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: {e}")
                self._send_error(500, "Error processing update")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_webhook: {e}")
            self._send_error(500, "Internal webhook error")
    
    def _handle_not_found(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404"""
        self._send_error(404, "Not Found")
        log_api_call(logger, self.command, self.path, "404")
    
    def _send_response(self, status_code: int, content: str, content_type: str = 'text/plain'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞"""
        try:
            self.send_response(status_code)
            self.send_header('Content-Type', f'{content_type}; charset=utf-8')
            self.send_header('Content-Length', str(len(content.encode('utf-8'))))
            
            # CORS headers –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—Ä–æ—Å–æ–≤
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
            self.send_header('Access-Control-Allow-Headers', 'Content-Type')
            
            self.end_headers()
            self.wfile.write(content.encode('utf-8'))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    def _send_json_response(self, status_code: int, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        try:
            json_content = json.dumps(data, ensure_ascii=False, indent=2)
            self._send_response(status_code, json_content, 'application/json')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON: {e}")
            self._send_error(500, "JSON encoding error")
    
    def _send_error(self, status_code: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏"""
        error_data = {
            "error": True,
            "status_code": status_code,
            "message": message,
            "timestamp": datetime.now().isoformat()
        }
        
        self._send_json_response(status_code, error_data)
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –õ–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à –ª–æ–≥–≥–µ—Ä –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        logger.debug(f"üåê HTTP: {format % args}")


class WebhookServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞"""
    
    def __init__(self, bot: telebot.TeleBot, webhook_secret: str = None, 
                 host: str = '0.0.0.0', port: int = 8080):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        self.bot = bot
        self.webhook_secret = webhook_secret
        self.host = host
        self.port = port
        self.server = None
        self.server_thread = None
        
        logger.info(f"WebhookServer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {host}:{port}")
    
    def create_handler_class(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –∏–Ω–∂–µ–∫—Ü–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        bot = self.bot
        webhook_secret = self.webhook_secret
        
        class CustomWebhookHandler(WebhookHandler):
            def __init__(self, *args, **kwargs):
                super().__init__(*args, bot=bot, webhook_secret=webhook_secret, **kwargs)
        
        return CustomWebhookHandler
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            handler_class = self.create_handler_class()
            
            self.server = HTTPServer((self.host, self.port), handler_class)
            
            logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
            logger.info(f"üîó Webhook URL: https://{os.getenv('RENDER_EXTERNAL_URL', 'localhost')}/webhook")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            self.server.serve_forever()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    def start_server_thread(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.server_thread = threading.Thread(
                target=self.start_server,
                daemon=True,
                name="WebhookServer"
            )
            
            self.server_thread.start()
            logger.info("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
            raise
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.server:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
                self.server.shutdown()
                self.server.server_close()
                
                if self.server_thread and self.server_thread.is_alive():
                    self.server_thread.join(timeout=5)
                
                logger.info("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä"""
        return self.server is not None and self.server_thread is not None and self.server_thread.is_alive()


def create_webhook_server(bot: telebot.TeleBot) -> WebhookServer:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    webhook_secret = os.getenv('WEBHOOK_SECRET')
    host = os.getenv('HOST', '0.0.0.0')
    port = int(os.getenv('PORT', '8080'))
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = WebhookServer(
        bot=bot,
        webhook_secret=webhook_secret,
        host=host,
        port=port
    )
    
    return server

def init_webhook_server(config, bot: telebot.TeleBot) -> WebhookServer:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    
    Args:
        config: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        
    Returns:
        WebhookServer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    """
    try:
        logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        server = WebhookServer(
            bot=bot,
            webhook_secret=getattr(config, 'WEBHOOK_SECRET', None),
            host=getattr(config, 'HOST', '0.0.0.0'),
            port=int(os.getenv('PORT', '8080'))
        )
        
        logger.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {server.host}:{server.port}")
        return server
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    import time
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebhookServer...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    print("üåê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    server = WebhookServer(
        bot=None,  # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –±–æ—Ç–∞
        webhook_secret="test_secret",
        host="127.0.0.1",
        port=8888
    )
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        server.start_server_thread()
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        time.sleep(2)
        
        if server.is_running():
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://127.0.0.1:8888")
            print("üîó Health check: http://127.0.0.1:8888/health")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            time.sleep(3)
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        
    finally:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
        server.stop_server()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
