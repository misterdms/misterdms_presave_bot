"""
Keep-Alive —Å–∏—Å—Ç–µ–º–∞ Do Presave Reminder Bot v25+
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Å—ã–ø–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render.com —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
"""

import os
import time
import threading
from datetime import datetime, timedelta
from urllib.request import urlopen, Request
from urllib.error import URLError, HTTPError
from typing import Optional

from utils.logger import get_logger, log_api_call

logger = get_logger(__name__)

class KeepAliveManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä keep-alive –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, external_url: str = None, interval: int = 300, enabled: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è keep-alive –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            external_url: URL —Å–µ—Ä–≤–∏—Å–∞ (–∏–∑ RENDER_EXTERNAL_URL)
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
            enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ keep-alive
        """
        self.external_url = external_url or os.getenv('RENDER_EXTERNAL_URL')
        self.interval = interval
        self.enabled = enabled and bool(self.external_url)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._stop_event = threading.Event()
        self._thread: Optional[threading.Thread] = None
        self._last_ping_time: Optional[datetime] = None
        self._ping_count = 0
        self._error_count = 0
        self._consecutive_errors = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_pings': 0,
            'successful_pings': 0,
            'failed_pings': 0,
            'uptime_start': datetime.now(),
            'last_successful_ping': None,
            'last_error': None
        }
        
        if self.enabled:
            logger.info(f"KeepAliveManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.external_url} –∫–∞–∂–¥—ã–µ {interval}—Å")
        else:
            logger.info("KeepAliveManager –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ—Ç RENDER_EXTERNAL_URL)")
    
    def start_keepalive(self):
        """–ó–∞–ø—É—Å–∫ keep-alive –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.enabled:
            logger.info("Keep-alive –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω")
            return
        
        if self._thread and self._thread.is_alive():
            logger.warning("Keep-alive —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            self._stop_event.clear()
            self._thread = threading.Thread(
                target=self._keepalive_worker,
                daemon=True,
                name="KeepAlive"
            )
            
            self._thread.start()
            logger.info(f"üíì Keep-alive –∑–∞–ø—É—â–µ–Ω: –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ {self.interval} —Å–µ–∫—É–Ω–¥")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ keep-alive: {e}")
            raise
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ keep-alive"""
        if not self.enabled:
            return
        
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ keep-alive...")
            self._stop_event.set()
            
            if self._thread and self._thread.is_alive():
                self._thread.join(timeout=10)
                
                if self._thread.is_alive():
                    logger.warning("‚ö†Ô∏è Keep-alive –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥")
                else:
                    logger.info("‚úÖ Keep-alive –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ keep-alive: {e}")
    
    def _keepalive_worker(self):
        """–†–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è keep-alive –ø–æ—Ç–æ–∫–∞"""
        logger.info("üíì Keep-alive –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø–∏–Ω–≥–æ–º, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(30)
        
        while not self._stop_event.is_set():
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∏–Ω–≥
                self._perform_ping()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∏–Ω–≥–∞
                self._wait_for_next_ping()
                
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ keep-alive –ø–æ—Ç–æ–∫–µ: {e}")
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                time.sleep(60)
        
        logger.info("üíì Keep-alive –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _perform_ping(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–∏–Ω–≥–∞"""
        if not self.external_url:
            return
        
        start_time = datetime.now()
        ping_url = f"https://{self.external_url}/health"
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            request = Request(
                ping_url,
                headers={
                    'User-Agent': 'KeepAlive-Bot/1.0',
                    'Accept': 'application/json',
                    'Connection': 'close'
                }
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            with urlopen(request, timeout=30) as response:
                status_code = response.getcode()
                response_text = response.read().decode('utf-8', errors='ignore')[:100]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—Ö–∞
                self._update_success_stats(start_time, status_code, response_text)
                
        except (URLError, HTTPError) as e:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
            self._update_error_stats(start_time, str(e))
            
        except Exception as e:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            self._update_error_stats(start_time, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def _update_success_stats(self, start_time: datetime, status_code: int, response_text: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤"""
        duration = (datetime.now() - start_time).total_seconds()
        
        self._ping_count += 1
        self._consecutive_errors = 0
        self._last_ping_time = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['total_pings'] += 1
        self.stats['successful_pings'] += 1
        self.stats['last_successful_ping'] = self._last_ping_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Å—Ç–æ—Ç—ã
        if self._ping_count % 10 == 1:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π –ø–∏–Ω–≥
            logger.info(f"üíì Keep-alive: –ø–∏–Ω–≥ #{self._ping_count}, {duration:.1f}—Å, HTTP {status_code}")
        else:
            logger.debug(f"üíì Keep-alive: –ø–∏–Ω–≥ #{self._ping_count}, {duration:.1f}—Å, HTTP {status_code}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 100 –ø–∏–Ω–≥–æ–≤
        if self._ping_count % 100 == 0:
            self._log_statistics()
    
    def _update_error_stats(self, start_time: datetime, error_message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        duration = (datetime.now() - start_time).total_seconds()
        
        self._error_count += 1
        self._consecutive_errors += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['total_pings'] += 1
        self.stats['failed_pings'] += 1
        self.stats['last_error'] = {
            'time': datetime.now(),
            'message': error_message
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
        if self._consecutive_errors == 1:
            logger.warning(f"‚ö†Ô∏è Keep-alive –æ—à–∏–±–∫–∞: {error_message} ({duration:.1f}—Å)")
        elif self._consecutive_errors <= 3:
            logger.error(f"‚ùå Keep-alive –æ—à–∏–±–∫–∞ #{self._consecutive_errors}: {error_message}")
        else:
            logger.critical(f"üö® Keep-alive: {self._consecutive_errors} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥! {error_message}")
    
    def _wait_for_next_ping(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∏–Ω–≥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—à–∏–±–æ–∫
        wait_time = self.interval
        
        if self._consecutive_errors > 0:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            wait_time = min(self.interval * (1 + self._consecutive_errors * 0.5), self.interval * 3)
            logger.debug(f"üíì –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {wait_time:.0f}—Å (–æ—à–∏–±–æ–∫: {self._consecutive_errors})")
        
        # –ñ–¥–µ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self._stop_event.wait(wait_time)
    
    def _log_statistics(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ keep-alive"""
        uptime = datetime.now() - self.stats['uptime_start']
        success_rate = (self.stats['successful_pings'] / self.stats['total_pings'] * 100) if self.stats['total_pings'] > 0 else 0
        
        logger.info(
            f"üìä Keep-alive —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "
            f"{self.stats['successful_pings']}/{self.stats['total_pings']} —É—Å–ø–µ—à–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤ "
            f"({success_rate:.1f}%), uptime: {uptime}"
        )
    
    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ keep-alive"""
        if not self.enabled:
            return {
                'enabled': False,
                'reason': 'RENDER_EXTERNAL_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            }
        
        is_running = self._thread and self._thread.is_alive()
        uptime = datetime.now() - self.stats['uptime_start']
        
        status = {
            'enabled': True,
            'running': is_running,
            'external_url': self.external_url,
            'interval_seconds': self.interval,
            'uptime_seconds': int(uptime.total_seconds()),
            'uptime_human': str(uptime).split('.')[0],  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            'statistics': self.stats.copy(),
            'last_ping_time': self._last_ping_time,
            'consecutive_errors': self._consecutive_errors,
            'health': self._get_health_status()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if self._last_ping_time:
            time_since_ping = datetime.now() - self._last_ping_time
            status['seconds_since_last_ping'] = int(time_since_ping.total_seconds())
        
        return status
    
    def _get_health_status(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è keep-alive"""
        if not self.enabled:
            return "disabled"
        
        if not (self._thread and self._thread.is_alive()):
            return "stopped"
        
        if self._consecutive_errors >= 5:
            return "critical"
        elif self._consecutive_errors >= 3:
            return "warning"
        elif self._last_ping_time and (datetime.now() - self._last_ping_time).total_seconds() > self.interval * 2:
            return "stale"
        else:
            return "healthy"
    
    def force_ping(self) -> dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∏–Ω–≥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        if not self.enabled:
            return {'error': 'Keep-alive –æ—Ç–∫–ª—é—á–µ–Ω'}
        
        logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π keep-alive –ø–∏–Ω–≥...")
        
        start_time = datetime.now()
        self._perform_ping()
        duration = (datetime.now() - start_time).total_seconds()
        
        return {
            'forced_ping': True,
            'duration_seconds': duration,
            'status': self._get_health_status(),
            'consecutive_errors': self._consecutive_errors
        }


def create_keepalive_manager() -> KeepAliveManager:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è keep-alive –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    external_url = os.getenv('RENDER_EXTERNAL_URL')
    interval = int(os.getenv('KEEPALIVE_INTERVAL', '300'))  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    enabled = os.getenv('KEEPALIVE_ENABLED', 'true').lower() == 'true'
    
    return KeepAliveManager(
        external_url=external_url,
        interval=interval,
        enabled=enabled
    )


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ keep-alive —Å–∏—Å—Ç–µ–º—ã"""
    import time
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KeepAliveManager...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    print("üíì –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ keep-alive...")
    manager = KeepAliveManager(
        external_url="httpbin.org",  # –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        interval=10,  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
        enabled=True
    )
    
    try:
        # –ó–∞–ø—É—Å–∫ keep-alive
        print("üöÄ –ó–∞–ø—É—Å–∫ keep-alive...")
        manager.start_keepalive()
        
        # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏–Ω–≥–æ–≤
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∏–Ω–≥–æ–≤...")
        time.sleep(25)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = manager.get_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status['health']}")
        print(f"üìà –ü–∏–Ω–≥–æ–≤: {status['statistics']['total_pings']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {status['statistics']['successful_pings']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {status['statistics']['failed_pings']}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∏–Ω–≥
        print("üîß –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∏–Ω–≥...")
        force_result = manager.force_ping()
        print(f"‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç: {force_result}")
        
    finally:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ keep-alive...")
        manager.stop()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")