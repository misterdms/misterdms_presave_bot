"""
üíì Keep-Alive Manager - Do Presave Reminder Bot v25+
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ "–∑–∞—Å—ã–ø–∞–Ω–∏—è" –Ω–∞ Render.com –∏ –¥—Ä—É–≥–∏—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–ñ–ù–û–°–¢–¨:
- Render.com –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
- UptimeRobot –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ "–±—É–¥–∏—Ç" —Å–µ—Ä–≤–∏—Å
- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π keep-alive –¥—É–±–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
import threading
import time
import requests
import schedule
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any
from urllib.parse import urlparse

from config import config
from utils.logger import get_logger
from utils.helpers import SystemMonitor

logger = get_logger(__name__)

class KeepAliveManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä keep-alive —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, target_url: str, interval: int = 300, enabled: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è keep-alive –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            target_url: URL –¥–ª—è ping –∑–∞–ø—Ä–æ—Å–æ–≤
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
            enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ keep-alive
        """
        self.target_url = target_url
        self.interval = interval
        self.enabled = enabled
        self.is_running = False
        self.stop_event = threading.Event()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.start_time = datetime.now(timezone.utc)
        self.total_requests = 0
        self.successful_requests = 0
        self.failed_requests = 0
        self.last_request_time = None
        self.last_request_status = None
        self.consecutive_failures = 0
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
        self.system_monitor = SystemMonitor()
        
        logger.info(f"üíì KeepAliveManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üéØ Target URL: {target_url}")
        logger.info(f"‚è±Ô∏è Interval: {interval} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üîå Enabled: {'Yes' if enabled else 'No'}")
        
        if not enabled:
            logger.warning("‚ö†Ô∏è Keep-alive –æ—Ç–∫–ª—é—á–µ–Ω! –°–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –∑–∞—Å–Ω—É—Ç—å –Ω–∞ Render.com")
    
    def ping_service(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ping –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        if not self.enabled:
            return True
            
        start_time = time.time()
        
        try:
            response = requests.get(
                self.target_url,
                timeout=30,
                headers={
                    'User-Agent': 'PresaveBot-KeepAlive/1.0',
                    'X-KeepAlive': 'true',
                    'X-Request-ID': f"keepalive-{int(time.time())}"
                }
            )
            
            response_time = time.time() - start_time
            
            self.total_requests += 1
            self.last_request_time = datetime.now(timezone.utc)
            
            if response.status_code == 200:
                self.successful_requests += 1
                self.last_request_status = f"‚úÖ 200 OK ({response_time:.2f}s)"
                self.consecutive_failures = 0
                
                logger.debug(f"üíì Keep-alive —É—Å–ø–µ—à–µ–Ω: {response.status_code} –∑–∞ {response_time:.2f}s")
                return True
            else:
                self.failed_requests += 1
                self.last_request_status = f"‚ö†Ô∏è {response.status_code} ({response_time:.2f}s)"
                self.consecutive_failures += 1
                
                logger.warning(f"‚ö†Ô∏è Keep-alive –ø–æ–ª—É—á–∏–ª {response.status_code}: {self.target_url}")
                return False
                
        except requests.exceptions.Timeout:
            self.failed_requests += 1
            self.consecutive_failures += 1
            self.last_request_status = "‚è±Ô∏è Timeout"
            logger.warning(f"‚è±Ô∏è Keep-alive timeout: {self.target_url}")
            return False
            
        except requests.exceptions.ConnectionError:
            self.failed_requests += 1
            self.consecutive_failures += 1
            self.last_request_status = "üîå Connection Error"
            logger.warning(f"üîå Keep-alive connection error: {self.target_url}")
            return False
            
        except Exception as e:
            self.failed_requests += 1
            self.consecutive_failures += 1
            self.last_request_status = f"‚ùå Error: {str(e)[:50]}"
            logger.error(f"‚ùå Keep-alive error: {e}")
            return False
    
    def keepalive_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª keep-alive"""
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ keep-alive —Ü–∏–∫–ª–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval}s)")
        
        while not self.stop_event.is_set():
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º ping
                success = self.ping_service()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
                if self.consecutive_failures >= 3:
                    logger.error(f"üö® –ö–†–ò–¢–ò–ß–ù–û: {self.consecutive_failures} –ø–æ–¥—Ä—è–¥ –Ω–µ—É–¥–∞—á–Ω—ã—Ö keep-alive –∑–∞–ø—Ä–æ—Å–æ–≤!")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if self.consecutive_failures >= 5:
                        logger.error("üí• –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –ø–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã URL...")
                        self._try_alternative_endpoints()
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                sleep_interval = self._calculate_adaptive_interval(success)
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                self.stop_event.wait(sleep_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ keep-alive —Ü–∏–∫–ª–µ: {e}")
                self.stop_event.wait(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _calculate_adaptive_interval(self, last_success: bool) -> int:
        """
        –†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        Args:
            last_success: –ë—ã–ª –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω—ã–º
            
        Returns:
            int: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        base_interval = self.interval
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
        if self.consecutive_failures > 0:
            # –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏–Ω–≥—É–µ–º —á–∞—â–µ (–Ω–æ –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É)
            return max(60, base_interval // (self.consecutive_failures + 1))
        
        # –ï—Å–ª–∏ –≤—Å–µ –û–ö - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        return base_interval
    
    def _try_alternative_endpoints(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            parsed_url = urlparse(self.target_url)
            base_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
            
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints
            alternative_endpoints = [
                f"{base_url}/health",
                f"{base_url}/ping", 
                f"{base_url}/status",
                f"{base_url}/",
                self.target_url  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É
            ]
            
            for endpoint in alternative_endpoints:
                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint: {endpoint}")
                
                original_url = self.target_url
                self.target_url = endpoint
                
                if self.ping_service():
                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {endpoint}")
                    return
                else:
                    self.target_url = original_url
                    
            logger.error("üí• –í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def start_keepalive(self):
        """–ó–∞–ø—É—Å–∫ keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.enabled:
            logger.info("‚è≠Ô∏è Keep-alive –æ—Ç–∫–ª—é—á–µ–Ω")
            return
            
        if self.is_running:
            logger.warning("‚ö†Ô∏è Keep-alive —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ keep-alive —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ü–µ—Ä–≤—ã–π ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            initial_success = self.ping_service()
            if not initial_success:
                logger.warning("‚ö†Ô∏è –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π ping –Ω–µ—É—Å–ø–µ—à–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            self.keepalive_loop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ keep-alive: {e}")
        finally:
            self.is_running = False
            logger.info("üõë Keep-alive –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ keep-alive"""
        logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ keep-alive...")
        self.stop_event.set()
        self.is_running = False
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ keep-alive
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        """
        uptime = datetime.now(timezone.utc) - self.start_time
        success_rate = (self.successful_requests / max(1, self.total_requests)) * 100
        
        return {
            'enabled': self.enabled,
            'is_running': self.is_running,
            'target_url': self.target_url,
            'interval': self.interval,
            'uptime_seconds': int(uptime.total_seconds()),
            'uptime_human': str(uptime).split('.')[0],
            'total_requests': self.total_requests,
            'successful_requests': self.successful_requests,
            'failed_requests': self.failed_requests,
            'success_rate': round(success_rate, 2),
            'consecutive_failures': self.consecutive_failures,
            'last_request_time': self.last_request_time.isoformat() if self.last_request_time else None,
            'last_request_status': self.last_request_status,
            'system_stats': self.system_monitor.get_system_stats() if hasattr(self, 'system_monitor') else {}
        }
    
    def get_health_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è keep-alive —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            Dict: –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
        """
        stats = self.get_stats()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
        if not self.enabled:
            status = "disabled"
            health = "unknown"
        elif self.consecutive_failures >= 5:
            status = "critical"
            health = "unhealthy"
        elif self.consecutive_failures >= 3:
            status = "warning" 
            health = "degraded"
        elif stats['success_rate'] < 90:
            status = "warning"
            health = "degraded"
        else:
            status = "healthy"
            health = "healthy"
        
        return {
            'status': status,
            'health': health,
            'message': self._get_health_message(status),
            'stats': stats
        }
    
    def _get_health_message(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ"""
        messages = {
            'healthy': '‚úÖ Keep-alive —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
            'warning': '‚ö†Ô∏è Keep-alive —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏',
            'critical': 'üö® Keep-alive –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
            'disabled': '‚è≠Ô∏è Keep-alive –æ—Ç–∫–ª—é—á–µ–Ω'
        }
        return messages.get(status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')

# ============================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° SCHEDULER –î–õ–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ü–†–û–í–ï–†–û–ö
# ============================================

class EnhancedKeepAlive(KeepAliveManager):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π keep-alive —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    def __init__(self, target_url: str, interval: int = 300, enabled: bool = True):
        super().__init__(target_url, interval, enabled)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        if enabled:
            self._setup_scheduler()
    
    def _setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            schedule.every(10).minutes.do(self._health_check)
            
            # –ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á–µ—Ç
            schedule.every().hour.do(self._hourly_report)
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            schedule.every().day.at("00:00").do(self._daily_cleanup)
            
            logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ keep-alive –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def _health_check(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        try:
            health = self.get_health_status()
            
            if health['status'] in ['critical', 'warning']:
                logger.warning(f"‚ö†Ô∏è Keep-alive health check: {health['message']}")
                
                # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π ping
                if health['status'] == 'critical':
                    logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                    self.ping_service()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
    
    def _hourly_report(self):
        """–ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ"""
        try:
            stats = self.get_stats()
            
            if stats['total_requests'] > 0:
                logger.info(
                    f"üìä Keep-alive hourly: "
                    f"{stats['successful_requests']}/{stats['total_requests']} "
                    f"({stats['success_rate']:.1f}%) "
                    f"failures: {stats['consecutive_failures']}"
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ hourly report: {e}")
    
    def _daily_cleanup(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            logger.info("üßπ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ keep-alive —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            old_total = self.total_requests
            old_success_rate = (self.successful_requests / max(1, self.total_requests)) * 100
            
            # –ß–∞—Å—Ç–∏—á–Ω—ã–π —Å–±—Ä–æ—Å (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–∞–Ω–Ω—ã—Ö)
            self.total_requests = min(288, self.total_requests)  # 288 = 24 —á–∞—Å–∞ * 12 (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
            self.successful_requests = int(self.total_requests * old_success_rate / 100)
            self.failed_requests = self.total_requests - self.successful_requests
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏: {old_total} –∑–∞–ø—Ä–æ—Å–æ–≤, {old_success_rate:.1f}% —É—Å–ø–µ—Ö")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ daily cleanup: {e}")
    
    def run_scheduled_tasks(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            schedule.run_pending()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    def keepalive_loop(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ü–∏–∫–ª keep-alive —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º"""
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ keep-alive —Ü–∏–∫–ª–∞")
        
        while not self.stop_event.is_set():
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π ping
                success = self.ping_service()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                self.run_scheduled_tasks()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
                if self.consecutive_failures >= 3:
                    logger.error(f"üö® –ö–†–ò–¢–ò–ß–ù–û: {self.consecutive_failures} –ø–æ–¥—Ä—è–¥ –Ω–µ—É–¥–∞—á–Ω—ã—Ö keep-alive –∑–∞–ø—Ä–æ—Å–æ–≤!")
                    
                    if self.consecutive_failures >= 5:
                        logger.error("üí• –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –ø–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã URL...")
                        self._try_alternative_endpoints()
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                sleep_interval = self._calculate_adaptive_interval(success)
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                self.stop_event.wait(sleep_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º keep-alive —Ü–∏–∫–ª–µ: {e}")
                self.stop_event.wait(60)

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_keepalive_manager: Optional[EnhancedKeepAlive] = None

def get_keepalive_manager() -> Optional[EnhancedKeepAlive]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ keep-alive –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return _keepalive_manager

def init_keepalive(target_url: str, interval: int = 300, enabled: bool = True) -> EnhancedKeepAlive:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ keep-alive –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    Args:
        target_url: URL –¥–ª—è ping –∑–∞–ø—Ä–æ—Å–æ–≤
        interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ keep-alive
        
    Returns:
        EnhancedKeepAlive: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    """
    global _keepalive_manager
    
    _keepalive_manager = EnhancedKeepAlive(
        target_url=target_url,
        interval=interval,
        enabled=enabled
    )
    
    logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π keep-alive –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return _keepalive_manager

def start_keepalive_thread(target_url: str, interval: int = 300, enabled: bool = True):
    """
    –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    
    Args:
        target_url: URL –¥–ª—è ping –∑–∞–ø—Ä–æ—Å–æ–≤
        interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ keep-alive
    """
    if not enabled:
        logger.info("‚è≠Ô∏è Keep-alive –æ—Ç–∫–ª—é—á–µ–Ω")
        return
    
    manager = init_keepalive(target_url, interval, enabled)
    
    keepalive_thread = threading.Thread(
        target=manager.start_keepalive,
        daemon=True,
        name="KeepAliveThread"
    )
    keepalive_thread.start()
    
    logger.info(f"üöÄ Keep-alive –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è {target_url}")

# ============================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
# ============================================

if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ keep-alive —Å–∏—Å—Ç–µ–º—ã"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    test_url = "http://localhost:8000/health"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KeepAlive —Å–∏—Å—Ç–µ–º—ã...")
    print(f"üéØ Test URL: {test_url}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = EnhancedKeepAlive(test_url, interval=10, enabled=True)
    
    try:
        # –¢–µ—Å—Ç ping
        print("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ping...")
        result = manager.ping_service()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç ping: {'‚úÖ –£—Å–ø–µ—Ö' if result else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        stats = manager.get_stats()
        for key, value in stats.items():
            print(f"  {key}: {value}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
        print("üíì –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è:")
        health = manager.get_health_status()
        print(f"  –°—Ç–∞—Ç—É—Å: {health['status']}")
        print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {health['message']}")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except KeyboardInterrupt:
        print("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        manager.stop()
