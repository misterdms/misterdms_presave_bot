"""
Utils/logger.py - –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
Do Presave Reminder Bot v29.07

–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
"""

import logging
import logging.handlers
import os
import sys
import time
import json
from typing import Dict, Any, Optional
from datetime import datetime
from pathlib import Path

try:
    import colorlog
    COLORLOG_AVAILABLE = True
except ImportError:
    COLORLOG_AVAILABLE = False


class StructuredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    
    def format(self, record):
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        log_entry = {
            "timestamp": datetime.fromtimestamp(record.created).isoformat(),
            "level": record.levelname,
            "logger": record.name,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'user_id'):
            log_entry['user_id'] = record.user_id
        if hasattr(record, 'group_id'):
            log_entry['group_id'] = record.group_id
        if hasattr(record, 'command'):
            log_entry['command'] = record.command
        if hasattr(record, 'module_name'):
            log_entry['module_name'] = record.module_name
        if hasattr(record, 'execution_time'):
            log_entry['execution_time'] = record.execution_time
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
        if record.exc_info:
            log_entry['exception'] = self.formatException(record.exc_info)
        
        return json.dumps(log_entry, ensure_ascii=False)


class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    def __init__(self):
        if COLORLOG_AVAILABLE:
            super().__init__()
            self.colored_formatter = colorlog.ColoredFormatter(
                fmt='%(log_color)s%(asctime)s %(levelname)-8s %(name)-20s %(message)s',
                datefmt='%H:%M:%S',
                log_colors={
                    'DEBUG': 'cyan',
                    'INFO': 'green',
                    'WARNING': 'yellow',
                    'ERROR': 'red',
                    'CRITICAL': 'red,bg_white',
                }
            )
        else:
            super().__init__(
                fmt='%(asctime)s %(levelname)-8s %(name)-20s %(message)s',
                datefmt='%H:%M:%S'
            )
    
    def format(self, record):
        if COLORLOG_AVAILABLE:
            return self.colored_formatter.format(record)
        else:
            return super().format(record)


class BotLogger:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.loggers = {}
        self.handlers = {}
        self.log_level = logging.INFO
        self.log_format = "simple"
        self.log_dir = Path("logs")
        self.max_log_size = 10 * 1024 * 1024  # 10MB
        self.backup_count = 5
        
    def setup_logging(self, settings=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if settings:
                self.log_level = getattr(logging, settings.config.get('log_level', 'INFO').upper())
                self.log_format = settings.config.get('log_format', 'simple')
            else:
                self.log_level = getattr(logging, os.getenv('LOG_LEVEL', 'INFO').upper())
                self.log_format = os.getenv('LOG_FORMAT', 'simple')
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
            self.log_dir.mkdir(exist_ok=True)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
            root_logger = logging.getLogger()
            root_logger.setLevel(self.log_level)
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
            for handler in root_logger.handlers[:]:
                root_logger.removeHandler(handler)
            
            # –î–æ–±–∞–≤–ª—è–µ–º handlers
            self._setup_console_handler(root_logger)
            self._setup_file_handler(root_logger)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
            self._setup_module_loggers()
            
            # –ü–æ–¥–∞–≤–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—Ç–ª–∏–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            self._suppress_noisy_loggers()
            
            logging.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            logging.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {logging.getLevelName(self.log_level)}")
            logging.info(f"üé® –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤: {self.log_format}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    def _setup_console_handler(self, logger):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ handler"""
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(self.log_level)
        
        if self.log_format == "structured":
            console_handler.setFormatter(StructuredFormatter())
        else:
            console_handler.setFormatter(ColoredFormatter())
        
        logger.addHandler(console_handler)
        self.handlers['console'] = console_handler
    
    def _setup_file_handler(self, logger):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ handler"""
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
            main_log_file = self.log_dir / "presave_bot.log"
            file_handler = logging.handlers.RotatingFileHandler(
                main_log_file,
                maxBytes=self.max_log_size,
                backupCount=self.backup_count,
                encoding='utf-8'
            )
            file_handler.setLevel(self.log_level)
            
            if self.log_format == "structured":
                file_handler.setFormatter(StructuredFormatter())
            else:
                file_handler.setFormatter(logging.Formatter(
                    fmt='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S'
                ))
            
            logger.addHandler(file_handler)
            self.handlers['file'] = file_handler
            
            # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
            error_log_file = self.log_dir / "errors.log"
            error_handler = logging.handlers.RotatingFileHandler(
                error_log_file,
                maxBytes=self.max_log_size,
                backupCount=self.backup_count,
                encoding='utf-8'
            )
            error_handler.setLevel(logging.ERROR)
            error_handler.setFormatter(logging.Formatter(
                fmt='%(asctime)s [%(levelname)s] %(name)s: %(message)s\n%(pathname)s:%(lineno)d\n',
                datefmt='%Y-%m-%d %H:%M:%S'
            ))
            
            logger.addHandler(error_handler)
            self.handlers['error'] = error_handler
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª–æ–≤—ã–µ –ª–æ–≥–∏: {e}")
    
    def _setup_module_loggers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π"""
        # –ú–æ–¥—É–ª–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ª–æ–≥ —Ñ–∞–π–ª–∞–º–∏
        special_modules = {
            'module.user_management': 'user_management.log',
            'module.track_support': 'track_support.log',
            'module.karma_system': 'karma_system.log',
            'webapp': 'webapp.log',
            'database': 'database.log',
            'telegram_api': 'telegram.log'
        }
        
        for module_name, log_file in special_modules.items():
            try:
                module_logger = logging.getLogger(module_name)
                
                # –§–∞–π–ª–æ–≤—ã–π handler –¥–ª—è –º–æ–¥—É–ª—è
                log_path = self.log_dir / log_file
                module_handler = logging.handlers.RotatingFileHandler(
                    log_path,
                    maxBytes=5 * 1024 * 1024,  # 5MB –¥–ª—è –º–æ–¥—É–ª–µ–π
                    backupCount=3,
                    encoding='utf-8'
                )
                module_handler.setLevel(logging.DEBUG)
                module_handler.setFormatter(logging.Formatter(
                    fmt='%(asctime)s [%(levelname)s]: %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S'
                ))
                
                module_logger.addHandler(module_handler)
                module_logger.propagate = True  # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏
                
                self.handlers[f'module_{module_name}'] = module_handler
                
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è {module_name}: {e}")
    
    def _suppress_noisy_loggers(self):
        """–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—Ç–ª–∏–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        noisy_loggers = [
            'urllib3.connectionpool',
            'requests.packages.urllib3.connectionpool',
            'asyncio',
            'telebot.async_telebot',
            'sqlalchemy.engine',
            'sqlalchemy.pool',
            'aiohttp.access'
        ]
        
        for logger_name in noisy_loggers:
            logging.getLogger(logger_name).setLevel(logging.WARNING)
    
    def get_logger(self, name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ —Å –∏–º–µ–Ω–µ–º"""
        if name not in self.loggers:
            self.loggers[name] = logging.getLogger(name)
        return self.loggers[name]
    
    def get_module_logger(self, module_name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è"""
        logger_name = f"module.{module_name}"
        return self.get_logger(logger_name)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_bot_logger = BotLogger()


def setup_logging(settings=None):
    """–ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _bot_logger.setup_logging(settings)


def get_logger(name: str = None) -> logging.Logger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞"""
    if name is None:
        name = __name__
    return _bot_logger.get_logger(name)


def get_module_logger(module_name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è"""
    return _bot_logger.get_module_logger(module_name)


# === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

def log_user_action(user_id: int, action: str, details: Optional[Dict[str, Any]] = None, logger_name: str = "user_actions"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger = get_logger(logger_name)
    
    extra = {
        'user_id': user_id,
        'action': action
    }
    
    if details:
        extra.update(details)
    
    message = f"User {user_id} performed action: {action}"
    if details:
        message += f" | Details: {details}"
    
    logger.info(message, extra=extra)


def log_command_execution(user_id: int, command: str, execution_time: float = None, success: bool = True, error: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    logger = get_logger("commands")
    
    extra = {
        'user_id': user_id,
        'command': command,
        'success': success
    }
    
    if execution_time is not None:
        extra['execution_time'] = execution_time
    
    if success:
        message = f"Command /{command} executed successfully by user {user_id}"
        if execution_time:
            message += f" in {execution_time:.3f}s"
        logger.info(message, extra=extra)
    else:
        message = f"Command /{command} failed for user {user_id}"
        if error:
            message += f": {error}"
        logger.error(message, extra=extra)


def log_module_activity(module_name: str, activity: str, details: Optional[Dict[str, Any]] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π"""
    logger = get_module_logger(module_name)
    
    extra = {
        'module_name': module_name,
        'activity': activity
    }
    
    if details:
        extra.update(details)
    
    message = f"Module {module_name}: {activity}"
    if details:
        message += f" | {details}"
    
    logger.info(message, extra=extra)


def log_webapp_interaction(user_id: int, action: str, data: Optional[Dict[str, Any]] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å WebApp"""
    logger = get_logger("webapp")
    
    extra = {
        'user_id': user_id,
        'webapp_action': action
    }
    
    if data:
        extra['webapp_data'] = data
    
    message = f"WebApp interaction from user {user_id}: {action}"
    if data:
        message += f" | Data: {data}"
    
    logger.info(message, extra=extra)


def log_database_operation(operation: str, table: str = None, execution_time: float = None, success: bool = True, error: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    logger = get_logger("database")
    
    extra = {
        'db_operation': operation,
        'success': success
    }
    
    if table:
        extra['table'] = table
    if execution_time is not None:
        extra['execution_time'] = execution_time
    
    if success:
        message = f"DB operation {operation}"
        if table:
            message += f" on {table}"
        if execution_time:
            message += f" completed in {execution_time:.3f}s"
        logger.debug(message, extra=extra)
    else:
        message = f"DB operation {operation} failed"
        if table:
            message += f" on {table}"
        if error:
            message += f": {error}"
        logger.error(message, extra=extra)


def log_performance_metric(metric_name: str, value: float, unit: str = "ms", context: Optional[Dict[str, Any]] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not os.getenv("ENABLE_PERFORMANCE_LOGS", "false").lower() == "true":
        return
    
    logger = get_logger("performance")
    
    extra = {
        'metric_name': metric_name,
        'metric_value': value,
        'metric_unit': unit
    }
    
    if context:
        extra['context'] = context
    
    message = f"Performance metric {metric_name}: {value}{unit}"
    if context:
        message += f" | Context: {context}"
    
    logger.info(message, extra=extra)


# === –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ú–ï–ù–ï–î–ñ–ï–†–´ ===

class LogExecutionTime:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    def __init__(self, operation_name: str, logger_name: str = None, log_level: int = logging.INFO):
        self.operation_name = operation_name
        self.logger = get_logger(logger_name or __name__)
        self.log_level = log_level
        self.start_time = None
    
    def __enter__(self):
        self.start_time = time.time()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        execution_time = time.time() - self.start_time
        
        if exc_type is None:
            self.logger.log(
                self.log_level,
                f"‚úÖ {self.operation_name} completed in {execution_time:.3f}s",
                extra={'execution_time': execution_time, 'operation': self.operation_name}
            )
        else:
            self.logger.error(
                f"‚ùå {self.operation_name} failed after {execution_time:.3f}s: {exc_val}",
                extra={'execution_time': execution_time, 'operation': self.operation_name}
            )


# === –£–¢–ò–õ–ò–¢–´ ===

def get_log_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        stats = {
            "log_level": logging.getLevelName(_bot_logger.log_level),
            "log_format": _bot_logger.log_format,
            "handlers_count": len(_bot_logger.handlers),
            "loggers_count": len(_bot_logger.loggers),
            "log_directory": str(_bot_logger.log_dir),
            "colorlog_available": COLORLOG_AVAILABLE
        }
        
        # –†–∞–∑–º–µ—Ä—ã –ª–æ–≥ —Ñ–∞–π–ª–æ–≤
        if _bot_logger.log_dir.exists():
            log_files = {}
            for log_file in _bot_logger.log_dir.glob("*.log"):
                try:
                    size = log_file.stat().st_size
                    log_files[log_file.name] = {
                        "size_bytes": size,
                        "size_mb": round(size / 1024 / 1024, 2)
                    }
                except OSError:
                    pass
            stats["log_files"] = log_files
        
        return stats
        
    except Exception as e:
        return {"error": str(e)}


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–æ–≤
    logger = get_logger("test")
    
    logger.debug("üîç Debug —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.info("‚ÑπÔ∏è Info —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.warning("‚ö†Ô∏è Warning —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.error("‚ùå Error —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    log_user_action(12345, "test_action", {"test": "data"})
    log_command_execution(12345, "test", 0.123, True)
    log_module_activity("test_module", "test_activity", {"key": "value"})
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    with LogExecutionTime("test_operation"):
        time.sleep(0.1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_log_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {json.dumps(stats, indent=2, ensure_ascii=False)}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")