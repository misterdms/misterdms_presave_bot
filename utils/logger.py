"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Do Presave Reminder Bot v25+
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è
"""

import logging
import sys
import os
from datetime import datetime
from typing import Optional, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω colorama)
try:
    from colorama import init, Fore, Back, Style
    init(autoreset=True)
    COLORAMA_AVAILABLE = True
except ImportError:
    COLORAMA_AVAILABLE = False

class EmojiFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –ª–æ–≥–æ–≤ —Å —ç–º–æ–¥–∑–∏"""
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    EMOJI_MAP = {
        'DEBUG': 'üîç',
        'INFO': '‚úÖ',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üö®'
    }
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π (–µ—Å–ª–∏ colorama –¥–æ—Å—Ç—É–ø–µ–Ω)
    COLOR_MAP = {
        'DEBUG': Fore.CYAN if COLORAMA_AVAILABLE else '',
        'INFO': Fore.GREEN if COLORAMA_AVAILABLE else '',
        'WARNING': Fore.YELLOW if COLORAMA_AVAILABLE else '',
        'ERROR': Fore.RED if COLORAMA_AVAILABLE else '',
        'CRITICAL': Fore.RED + Style.BRIGHT if COLORAMA_AVAILABLE else ''
    }
    
    def __init__(self, include_timestamp=True, include_module=True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞"""
        self.include_timestamp = include_timestamp
        self.include_module = include_module
        super().__init__()
    
    def format(self, record):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è
        emoji = self.EMOJI_MAP.get(record.levelname, 'üìù')
        color = self.COLOR_MAP.get(record.levelname, '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = []
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        if self.include_timestamp:
            timestamp = datetime.fromtimestamp(record.created).strftime('%H:%M:%S')
            parts.append(f"[{timestamp}]")
        
        # –≠–º–æ–¥–∑–∏ –∏ —É—Ä–æ–≤–µ–Ω—å
        if COLORAMA_AVAILABLE and color:
            level_part = f"{color}{emoji} {record.levelname}{Style.RESET_ALL}"
        else:
            level_part = f"{emoji} {record.levelname}"
        parts.append(level_part)
        
        # –ú–æ–¥—É–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.include_module and hasattr(record, 'name'):
            module_name = record.name.split('.')[-1]  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
            parts.append(f"[{module_name}]")
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = record.getMessage()
        parts.append(message)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        formatted_message = " ".join(parts)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            formatted_message += "\n" + self.formatException(record.exc_info)
        
        return formatted_message


class StructuredLogger:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self, name: str):
        self.logger = logging.getLogger(name)
        self.context = {}
    
    def set_context(self, **kwargs):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.context.update(kwargs)
    
    def clear_context(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.context.clear()
    
    def _format_message(self, message: str, extra: Optional[Dict[str, Any]] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        if not self.context and not extra:
            return message
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        full_context = {**self.context}
        if extra:
            full_context.update(extra)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if full_context:
            context_str = " | ".join([f"{k}={v}" for k, v in full_context.items()])
            return f"{message} | {context_str}"
        
        return message
    
    def debug(self, message: str, **extra):
        """–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.debug(self._format_message(message, extra))
    
    def info(self, message: str, **extra):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.info(self._format_message(message, extra))
    
    def warning(self, message: str, **extra):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.logger.warning(self._format_message(message, extra))
    
    def error(self, message: str, **extra):
        """–û—à–∏–±–∫–∞"""
        self.logger.error(self._format_message(message, extra))
    
    def critical(self, message: str, **extra):
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"""
        self.logger.critical(self._format_message(message, extra))
    
    def exception(self, message: str, **extra):
        """–û—à–∏–±–∫–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º"""
        self.logger.exception(self._format_message(message, extra))


def setup_logging(level: str = None, log_format: str = None):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if level is None:
        level = os.getenv('LOG_LEVEL', 'INFO')
    if log_format is None:
        log_format = os.getenv('LOG_FORMAT', 'structured')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—Ä–æ–≤–µ–Ω—å
    numeric_level = getattr(logging, level.upper(), logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    if log_format.lower() == 'structured':
        formatter = EmojiFormatter(include_timestamp=True, include_module=True)
    else:
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –±–µ–∑ —ç–º–æ–¥–∑–∏
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%H:%M:%S'
        )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(numeric_level)
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # –°–æ–∑–¥–∞–µ–º handler –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    console_handler.setLevel(numeric_level)
    
    # –î–æ–±–∞–≤–ª—è–µ–º handler
    root_logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('telebot').setLevel(logging.WARNING)
    
    # –ü–õ–ê–ù 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ò–ò –±–∏–±–ª–∏–æ—Ç–µ–∫ (–ó–ê–ì–õ–£–®–ö–ò)
    # logging.getLogger('openai').setLevel(logging.WARNING)
    # logging.getLogger('anthropic').setLevel(logging.WARNING)
    
    print(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: —É—Ä–æ–≤–µ–Ω—å {level}, —Ñ–æ—Ä–º–∞—Ç {log_format}")


def get_logger(name: str) -> StructuredLogger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
    return StructuredLogger(name)


class LoggerContextManager:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    
    def __init__(self, logger: StructuredLogger, **context):
        self.logger = logger
        self.context = context
        self.old_context = None
    
    def __enter__(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.old_context = self.logger.context.copy()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.logger.set_context(**self.context)
        return self.logger
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.logger.context = self.old_context


# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

def log_user_action(logger: StructuredLogger, user_id: int, action: str, **extra):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {action}", user_id=user_id, action=action, **extra)

def log_admin_action(logger: StructuredLogger, admin_id: int, action: str, target: str = None, **extra):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    context = {'admin_id': admin_id, 'action': action}
    if target:
        context['target'] = target
    context.update(extra)
    
    logger.info(f"–ê–¥–º–∏–Ω {admin_id}: {action}" + (f" ‚Üí {target}" if target else ""), **context)

def log_api_call(logger: StructuredLogger, method: str, endpoint: str, status: str, **extra):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–∑–æ–≤–∞"""
    logger.info(f"API {method} {endpoint}: {status}", 
                method=method, endpoint=endpoint, status=status, **extra)

def log_database_operation(logger: StructuredLogger, operation: str, table: str, count: int = None, **extra):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    context = {'operation': operation, 'table': table}
    if count is not None:
        context['count'] = count
    context.update(extra)
    
    count_str = f" ({count} –∑–∞–ø–∏—Å–µ–π)" if count is not None else ""
    logger.info(f"–ë–î {operation} –≤ {table}{count_str}", **context)

# –ü–õ–ê–ù 2: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ò)
# def log_karma_change(logger: StructuredLogger, user_id: int, admin_id: int, 
#                      old_karma: int, new_karma: int, reason: str = None):
#     """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
#     change = new_karma - old_karma
#     change_str = f"+{change}" if change > 0 else str(change)
#     
#     logger.info(f"–ö–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {old_karma}‚Üí{new_karma} ({change_str})",
#                 user_id=user_id, admin_id=admin_id, old_karma=old_karma, 
#                 new_karma=new_karma, change=change, reason=reason)

# –ü–õ–ê–ù 3: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò (–ó–ê–ì–õ–£–®–ö–ò)
# def log_ai_interaction(logger: StructuredLogger, user_id: int, model: str, 
#                        prompt_tokens: int, completion_tokens: int, **extra):
#     """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò"""
#     total_tokens = prompt_tokens + completion_tokens
#     logger.info(f"–ò–ò –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –º–æ–¥–µ–ª—å {model}, —Ç–æ–∫–µ–Ω–æ–≤ {total_tokens}",
#                 user_id=user_id, model=model, prompt_tokens=prompt_tokens,
#                 completion_tokens=completion_tokens, total_tokens=total_tokens, **extra)

# def log_gratitude_detection(logger: StructuredLogger, from_user: int, to_user: int, 
#                            trigger_word: str, karma_added: int):
#     """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–∞—Ä–º—ã –∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"""
#     logger.info(f"–ê–≤—Ç–æ–∫–∞—Ä–º–∞: {from_user}‚Üí{to_user} +{karma_added} –∑–∞ '{trigger_word}'",
#                 from_user=from_user, to_user=to_user, trigger_word=trigger_word, karma_added=karma_added)

# –ü–õ–ê–ù 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ backup (–ó–ê–ì–õ–£–®–ö–ò)
# def log_backup_operation(logger: StructuredLogger, operation: str, filename: str = None, 
#                          size_mb: float = None, duration_seconds: float = None, **extra):
#     """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π backup"""
#     context = {'operation': operation}
#     if filename:
#         context['filename'] = filename
#     if size_mb:
#         context['size_mb'] = round(size_mb, 2)
#     if duration_seconds:
#         context['duration_seconds'] = round(duration_seconds, 2)
#     context.update(extra)
#     
#     size_str = f" ({size_mb:.1f}MB)" if size_mb else ""
#     duration_str = f" –∑–∞ {duration_seconds:.1f}—Å" if duration_seconds else ""
#     
#     logger.info(f"Backup {operation}: {filename or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}{size_str}{duration_str}", **context)


# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
class PerformanceLogger:
    """–õ–æ–≥–≥–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, logger: StructuredLogger, operation: str):
        self.logger = logger
        self.operation = operation
        self.start_time = None
    
    def __enter__(self):
        if os.getenv('ENABLE_PERFORMANCE_LOGS', 'false').lower() == 'true':
            from time import perf_counter
            self.start_time = perf_counter()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.start_time is not None:
            from time import perf_counter
            duration = perf_counter() - self.start_time
            self.logger.info(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.operation} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {duration:.3f}—Å",
                            operation=self.operation, duration_seconds=duration)


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging('DEBUG', 'structured')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logger = get_logger('test')
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    logger.debug("–≠—Ç–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.info("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.warning("–≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    logger.error("–≠—Ç–æ –æ—à–∏–±–∫–∞")
    logger.critical("–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    logger.set_context(user_id=12345, action="test")
    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    with LoggerContextManager(logger, session_id="test_session", module="testing"):
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–∏")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    log_user_action(logger, 12345, "–æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    log_admin_action(logger, 67890, "–∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", target="–ª–∏–º–∏—Ç—ã API")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    with PerformanceLogger(logger, "—Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"):
        import time
        time.sleep(0.1)
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")