"""
utils/validators.py - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, URLs, —Ñ–∞–π–ª–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
–ü–õ–ê–ù 1: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è + –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤
"""

import re
import os
import mimetypes
from typing import Dict, List, Optional, Tuple, Union, Any
from urllib.parse import urlparse
from datetime import datetime

from utils.logger import get_logger

logger = get_logger(__name__)

class ValidationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    pass

class BaseValidator:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤"""
    
    @staticmethod
    def is_valid_telegram_id(user_id: Union[int, str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ Telegram ID"""
        try:
            user_id = int(user_id)
            # Telegram ID –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            return user_id > 0
        except (ValueError, TypeError):
            return False
    
    @staticmethod
    def is_valid_username(username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ Telegram username"""
        if not username:
            return False
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        username = username.lstrip('@')
        
        # Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        # –î–ª–∏–Ω–∞ –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
        pattern = r'^[a-zA-Z0-9_]{5,32}$'
        return bool(re.match(pattern, username))
    
    @staticmethod
    def is_valid_group_id(group_id: Union[int, str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ID –≥—Ä—É–ø–ø—ã"""
        try:
            group_id = int(group_id)
            # ID –≥—Ä—É–ø–ø—ã –≤ Telegram –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            return group_id < 0
        except (ValueError, TypeError):
            return False
    
    @staticmethod
    def is_valid_thread_id(thread_id: Union[int, str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ID —Ç—Ä–µ–¥–∞ (—Ç–æ–ø–∏–∫–∞)"""
        try:
            thread_id = int(thread_id)
            # Thread ID –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            return thread_id > 0
        except (ValueError, TypeError):
            return False

class URLValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è URL –∏ —Å—Å—ã–ª–æ–∫"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    MUSIC_PLATFORMS = {
        'spotify': [
            r'https?://open\.spotify\.com/',
            r'https?://spotify\.link/',
        ],
        'apple_music': [
            r'https?://music\.apple\.com/',
            r'https?://itunes\.apple\.com/',
        ],
        'youtube_music': [
            r'https?://music\.youtube\.com/',
            r'https?://youtu\.be/',
            r'https?://youtube\.com/watch',
        ],
        'deezer': [
            r'https?://deezer\.com/',
            r'https?://www\.deezer\.com/',
        ],
        'soundcloud': [
            r'https?://soundcloud\.com/',
            r'https?://on\.soundcloud\.com/',
        ],
        'bandcamp': [
            r'https?://.*\.bandcamp\.com/',
        ],
        'yandex_music': [
            r'https?://music\.yandex\.',
        ],
        'vk_music': [
            r'https?://vk\.com/music',
            r'https?://m\.vk\.com/music',
        ],
        'other': [
            r'https?://.*',  # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è —Å—Å—ã–ª–∫–∞
        ]
    }
    
    @staticmethod
    def is_valid_url(url: str) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL"""
        if not url:
            return False
        
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc])
        except Exception:
            return False
    
    @staticmethod
    def is_music_platform_url(url: str) -> Tuple[bool, Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É"""
        if not URLValidator.is_valid_url(url):
            return False, None
        
        for platform, patterns in URLValidator.MUSIC_PLATFORMS.items():
            for pattern in patterns:
                if re.search(pattern, url, re.IGNORECASE):
                    return True, platform
        
        return False, None
    
    @staticmethod
    def extract_urls_from_text(text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
        url_pattern = r'https?://(?:[-\w.])+(?:[:\d]+)?(?:/(?:[\w/_.])*(?:\?(?:[\w&=%.])*)?(?:#(?:[\w.])*)?)?'
        
        urls = re.findall(url_pattern, text, re.IGNORECASE)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö URL
        valid_urls = []
        for url in urls:
            if URLValidator.is_valid_url(url):
                valid_urls.append(url)
        
        return valid_urls
    
    @staticmethod
    def sanitize_url(url: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL"""
        if not url:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        url = url.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º https:// –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        return url

class TextValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def is_valid_message_length(text: str, min_length: int = 1, max_length: int = 4096) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
        if not text:
            return min_length == 0
        
        return min_length <= len(text) <= max_length
    
    @staticmethod
    def contains_forbidden_words(text: str, forbidden_words: List[str] = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"""
        if not text or not forbidden_words:
            return False
        
        text_lower = text.lower()
        return any(word.lower() in text_lower for word in forbidden_words)
    
    @staticmethod
    def is_spam_like(text: str) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤/—Å–ª–æ–≤)"""
        if not text:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
        repeated_chars = re.findall(r'(.)\1{4,}', text)  # 5+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥
        if repeated_chars:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –ø–æ–¥—Ä—è–¥
        emoji_pattern = r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]{10,}'
        if re.search(emoji_pattern, text):
            return True
        
        return False
    
    @staticmethod
    def extract_mentions(text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π @username –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return []
        
        mentions = re.findall(r'@(\w+)', text)
        return [mention for mention in mentions if BaseValidator.is_valid_username(mention)]

class CommandValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    PUBLIC_COMMANDS = [
        '/start', '/help', '/mystat', '/last10links', '/last30links'
    ]
    
    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    ADMIN_COMMANDS = [
        '/menu', '/resetmenu', '/enablebot', '/disablebot',
        '/setmode_conservative', '/setmode_normal', '/setmode_burst', '/setmode_adminburst',
        '/currentmode', '/reloadmodes', '/clearlinks'
    ]
    
    # –ü–õ–ê–ù 2: –ö–æ–º–∞–Ω–¥—ã –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ò)
    KARMA_COMMANDS = [
        '/karma', '/leaderboard', '/topusers'
    ]
    
    # –ü–õ–ê–ù 3: –ò–ò –∫–æ–º–∞–Ω–¥—ã (–ó–ê–ì–õ–£–®–ö–ò)
    AI_COMMANDS = [
        '/ai', '/ask', '/help_ai'
    ]
    
    # –ü–õ–ê–ù 4: Backup –∫–æ–º–∞–Ω–¥—ã (–ó–ê–ì–õ–£–®–ö–ò)
    BACKUP_COMMANDS = [
        '/downloadsql', '/backupstatus', '/backuphelp', '/restore'
    ]
    
    @staticmethod
    def is_valid_command(command: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        if not command:
            return False
        
        if not command.startswith('/'):
            return False
        
        # –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        command_name = command[1:]  # –£–±–∏—Ä–∞–µ–º /
        pattern = r'^[a-zA-Z0-9_]+$'
        
        return bool(re.match(pattern, command_name))
    
    @staticmethod
    def is_public_command(command: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—É–±–ª–∏—á–Ω–æ–π"""
        return command.split()[0] in CommandValidator.PUBLIC_COMMANDS
    
    @staticmethod
    def is_admin_command(command: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π"""
        base_command = command.split()[0]
        return base_command in CommandValidator.ADMIN_COMMANDS
    
    @staticmethod
    def validate_karma_command(command_text: str) -> Tuple[bool, Dict]:
        """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –∫–∞—Ä–º—ã"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        logger.debug("üîÑ validate_karma_command - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        return False, {"error": "–ö–æ–º–∞–Ω–¥—ã –∫–∞—Ä–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"}
    
    @staticmethod
    def parse_command_args(command_text: str) -> Tuple[str, List[str]]:
        """–†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã"""
        parts = command_text.split()
        if not parts:
            return "", []
        
        command = parts[0]
        args = parts[1:] if len(parts) > 1 else []
        
        return command, args

class ConfigValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    @staticmethod
    def validate_bot_token(token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        if not token:
            return False
        
        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É: —á–∏—Å–ª–æ:—Å—Ç—Ä–æ–∫–∞
        pattern = r'^\d+:[A-Za-z0-9_-]+$'
        return bool(re.match(pattern, token))
    
    @staticmethod
    def validate_webhook_secret(secret: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–∞ webhook"""
        if not secret:
            return False
        
        # –°–µ–∫—Ä–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        return len(secret) >= 16 and any(c.isalpha() for c in secret) and any(c.isdigit() for c in secret)
    
    @staticmethod
    def validate_database_url(url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not url:
            return False
        
        # PostgreSQL URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å postgresql://
        return url.startswith('postgresql://') or url.startswith('postgres://')
    
    @staticmethod
    def validate_admin_ids(ids_string: str) -> Tuple[bool, List[int]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ —Å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        if not ids_string:
            return False, []
        
        try:
            ids = [int(id_str.strip()) for id_str in ids_string.split(',') if id_str.strip()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π ID
            valid_ids = []
            for user_id in ids:
                if BaseValidator.is_valid_telegram_id(user_id):
                    valid_ids.append(user_id)
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π admin ID: {user_id}")
            
            return len(valid_ids) > 0, valid_ids
            
        except ValueError:
            return False, []
    
    @staticmethod
    def validate_whitelist(whitelist_string: str) -> Tuple[bool, List[int]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è whitelist —Ç–æ–ø–∏–∫–æ–≤"""
        if not whitelist_string:
            return False, []
        
        try:
            thread_ids = [int(id_str.strip()) for id_str in whitelist_string.split(',') if id_str.strip()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π thread ID
            valid_ids = []
            for thread_id in thread_ids:
                if BaseValidator.is_valid_thread_id(thread_id):
                    valid_ids.append(thread_id)
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π thread ID: {thread_id}")
            
            return len(valid_ids) > 0, valid_ids
            
        except ValueError:
            return False, []

# ============================================
# –ü–õ–ê–ù 3: –í–ê–õ–ò–î–ê–¶–ò–Ø –§–ê–ô–õ–û–í –ò –§–û–†–ú (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

class FileValidator:
    """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
    MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB
    
    @staticmethod
    def validate_image_file(file_path: str) -> Tuple[bool, str]:
        """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ validate_image_file - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return False, "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    
    @staticmethod
    def validate_backup_file(file_path: str) -> Tuple[bool, str]:
        """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è backup —Ñ–∞–π–ª–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 4
        logger.debug("üîÑ validate_backup_file - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 4)")
        return False, "–í–∞–ª–∏–¥–∞—Ü–∏—è backup –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

class FormValidator:
    """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º"""
    
    @staticmethod
    def validate_presave_request(form_data: Dict) -> Tuple[bool, List[str]]:
        """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ validate_presave_request - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return False, ["–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"]
    
    @staticmethod
    def validate_approval_claim(form_data: Dict) -> Tuple[bool, List[str]]:
        """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ validate_approval_claim - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return False, ["–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"]

# ============================================
# –ü–õ–ê–ù 3: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ò –ó–ê–ü–†–û–°–û–í (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

class AIValidator:
    """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò"""
    
    @staticmethod
    def validate_ai_prompt(prompt: str) -> Tuple[bool, str]:
        """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ò–ò"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ validate_ai_prompt - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ò –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    
    @staticmethod
    def is_safe_content(text: str) -> bool:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ò–ò"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ is_safe_content - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return True

# ============================================
# UTILITIES –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–ê–õ–ò–î–ê–¢–û–†–ê–ú–ò
# ============================================

def validate_all_required_env_vars() -> Tuple[bool, List[str]]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN
    bot_token = os.getenv('BOT_TOKEN')
    if not ConfigValidator.validate_bot_token(bot_token):
        errors.append("BOT_TOKEN –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GROUP_ID
    group_id = os.getenv('GROUP_ID')
    if not BaseValidator.is_valid_group_id(group_id):
        errors.append("GROUP_ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ADMIN_IDS
    admin_ids = os.getenv('ADMIN_IDS')
    valid, _ = ConfigValidator.validate_admin_ids(admin_ids)
    if not valid:
        errors.append("ADMIN_IDS –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DATABASE_URL
    db_url = os.getenv('DATABASE_URL')
    if not ConfigValidator.validate_database_url(db_url):
        errors.append("DATABASE_URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ WHITELIST
    whitelist = os.getenv('WHITELIST')
    valid, _ = ConfigValidator.validate_whitelist(whitelist)
    if not valid:
        errors.append("WHITELIST –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    return len(errors) == 0, errors

def create_validation_report() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    report = {
        "timestamp": datetime.utcnow(),
        "valid": True,
        "errors": [],
        "warnings": [],
        "config_status": {}
    }
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        valid, errors = validate_all_required_env_vars()
        report["valid"] = valid
        report["errors"] = errors
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        bot_token = os.getenv('BOT_TOKEN')
        report["config_status"]["bot_token"] = ConfigValidator.validate_bot_token(bot_token)
        
        group_id = os.getenv('GROUP_ID')
        report["config_status"]["group_id"] = BaseValidator.is_valid_group_id(group_id)
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        webhook_secret = os.getenv('WEBHOOK_SECRET')
        if webhook_secret:
            report["config_status"]["webhook_secret"] = ConfigValidator.validate_webhook_secret(webhook_secret)
        else:
            report["warnings"].append("WEBHOOK_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        logger.info(f"‚úÖ –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {'‚úÖ OK' if valid else '‚ùå ERRORS'}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        report["valid"] = False
        report["errors"].append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    return report