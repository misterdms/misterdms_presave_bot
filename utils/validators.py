"""
üîç Data Validators - Do Presave Reminder Bot v25+
–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, backup —Ñ–∞–π–ª–æ–≤, AI –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π

–ü–†–ò–ù–¶–ò–ü–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ó–∞—â–∏—Ç–∞ –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π –∏ code injection
- –ü—Ä–æ–≤–µ—Ä–∫–∞ backup —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ restore
- –í–∞–ª–∏–¥–∞—Ü–∏—è AI –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
- –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import re
import os
import json
import zipfile
import hashlib
import mimetypes
from typing import Any, Dict, List, Optional, Union, Tuple
from datetime import datetime, timezone
from urllib.parse import urlparse
from dataclasses import dataclass
from enum import Enum

from config import config
from utils.logger import get_logger

logger = get_logger(__name__)

class ValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def __init__(self, is_valid: bool, message: str = "", data: Any = None, errors: List[str] = None):
        self.is_valid = is_valid
        self.message = message
        self.data = data
        self.errors = errors or []
    
    def __bool__(self):
        return self.is_valid
    
    def __str__(self):
        return f"ValidationResult(valid={self.is_valid}, message='{self.message}')"

class FileType(Enum):
    """–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    IMAGE = "image"
    DOCUMENT = "document"
    BACKUP = "backup"
    AUDIO = "audio"
    VIDEO = "video"
    UNKNOWN = "unknown"

# ============================================
# –ë–ê–ó–û–í–´–ï –í–ê–õ–ò–î–ê–¢–û–†–´
# ============================================

class BaseValidator:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤"""
    
    @staticmethod
    def sanitize_string(text: str, max_length: int = 1000, allow_html: bool = False) -> str:
        """
        –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
            allow_html: –†–∞–∑—Ä–µ—à–∏—Ç—å HTML —Ç–µ–≥–∏
            
        Returns:
            str: –°–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if not isinstance(text, str):
            return ""
        
        # –û–±—Ä–µ–∑–∫–∞ –ø–æ –¥–ª–∏–Ω–µ
        text = text[:max_length]
        
        # –£–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        if not allow_html:
            text = re.sub(r'<[^>]+>', '', text)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        text = re.sub(r'[<>"\'\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]', '', text)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
        text = ' '.join(text.split())
        
        return text.strip()
    
    @staticmethod
    def is_valid_integer(value: Any, min_value: int = None, max_value: int = None) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞"""
        try:
            int_value = int(value)
            
            if min_value is not None and int_value < min_value:
                return ValidationResult(False, f"–ó–Ω–∞—á–µ–Ω–∏–µ {int_value} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_value}")
            
            if max_value is not None and int_value > max_value:
                return ValidationResult(False, f"–ó–Ω–∞—á–µ–Ω–∏–µ {int_value} –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ {max_value}")
            
            return ValidationResult(True, "–í–∞–ª–∏–¥–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ", int_value)
            
        except (ValueError, TypeError):
            return ValidationResult(False, f"'{value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    
    @staticmethod
    def is_valid_float(value: Any, min_value: float = None, max_value: float = None) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π"""
        try:
            float_value = float(value)
            
            if min_value is not None and float_value < min_value:
                return ValidationResult(False, f"–ó–Ω–∞—á–µ–Ω–∏–µ {float_value} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_value}")
            
            if max_value is not None and float_value > max_value:
                return ValidationResult(False, f"–ó–Ω–∞—á–µ–Ω–∏–µ {float_value} –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ {max_value}")
            
            return ValidationResult(True, "–í–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ", float_value)
            
        except (ValueError, TypeError):
            return ValidationResult(False, f"'{value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")

# ============================================
# –í–ê–õ–ò–î–ê–¢–û–†–´ TELEGRAM –î–ê–ù–ù–´–•
# ============================================

class TelegramValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram"""
    
    @staticmethod
    def validate_user_id(user_id: Any) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        result = BaseValidator.is_valid_integer(user_id, min_value=1, max_value=999999999999)
        
        if not result.is_valid:
            return ValidationResult(False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: {result.message}")
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω—ã–π user_id", result.data)
    
    @staticmethod
    def validate_chat_id(chat_id: Any) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è ID —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã"""
        result = BaseValidator.is_valid_integer(chat_id, min_value=-999999999999, max_value=999999999999)
        
        if not result.is_valid:
            return ValidationResult(False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id: {result.message}")
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω—ã–π chat_id", result.data)
    
    @staticmethod
    def validate_message_id(message_id: Any) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è"""
        result = BaseValidator.is_valid_integer(message_id, min_value=1)
        
        if not result.is_valid:
            return ValidationResult(False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π message_id: {result.message}")
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω—ã–π message_id", result.data)
    
    @staticmethod
    def validate_username(username: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è username Telegram"""
        if not isinstance(username, str):
            return ValidationResult(False, "Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ @
        username = username.lstrip('@')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        if not re.match(r'^[a-zA-Z0-9_]{5,32}$', username):
            return ValidationResult(False, "Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5-32 —Å–∏–º–≤–æ–ª–∞ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _)")
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω—ã–π username", username)
    
    @staticmethod
    def validate_callback_data(data: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è callback_data –¥–ª—è inline –∫–Ω–æ–ø–æ–∫"""
        if not isinstance(data, str):
            return ValidationResult(False, "Callback data –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        if len(data) > 64:
            return ValidationResult(False, "Callback data –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[a-zA-Z0-9_\-:.]+$', data):
            return ValidationResult(False, "Callback data —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω–∞—è callback data", data)

# ============================================
# –í–ê–õ–ò–î–ê–¢–û–†–´ –°–°–´–õ–û–ö –ò URL
# ============================================

class URLValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è URL –∏ —Å—Å—ã–ª–æ–∫"""
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    SUPPORTED_PLATFORMS = {
        'spotify.com': 'Spotify',
        'music.apple.com': 'Apple Music',
        'music.youtube.com': 'YouTube Music',
        'youtu.be': 'YouTube',
        'youtube.com': 'YouTube',
        'soundcloud.com': 'SoundCloud',
        'bandcamp.com': 'Bandcamp',
        'deezer.com': 'Deezer',
        'tidal.com': 'Tidal',
        'music.amazon.com': 'Amazon Music',
        'linktr.ee': 'Linktree',
        'fanlink.to': 'FanLink',
        'smarturl.it': 'SmartURL',
        'feature.fm': 'Feature.fm'
    }
    
    @staticmethod
    def validate_url(url: str) -> ValidationResult:
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL"""
        if not isinstance(url, str):
            return ValidationResult(False, "URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        url = url.strip()
        
        if not url:
            return ValidationResult(False, "URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        try:
            parsed = urlparse(url)
            
            if not parsed.netloc:
                return ValidationResult(False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if re.search(r'[<>"\'\x00-\x1F\x7F-\x9F]', url):
                return ValidationResult(False, "URL —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            
            return ValidationResult(True, "–í–∞–ª–∏–¥–Ω—ã–π URL", url)
            
        except Exception as e:
            return ValidationResult(False, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {e}")
    
    @staticmethod
    def validate_music_link(url: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É"""
        url_result = URLValidator.validate_url(url)
        
        if not url_result.is_valid:
            return url_result
        
        url = url_result.data
        parsed = urlparse(url)
        domain = parsed.netloc.lower()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ www.
        domain = re.sub(r'^www\.', '', domain)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platform = None
        for supported_domain, platform_name in URLValidator.SUPPORTED_PLATFORMS.items():
            if domain == supported_domain or domain.endswith('.' + supported_domain):
                platform = platform_name
                break
        
        if not platform:
            return ValidationResult(
                False, 
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {domain}",
                errors=[f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(URLValidator.SUPPORTED_PLATFORMS.values())}"]
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        validation_errors = []
        
        # Spotify - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        if platform == 'Spotify':
            if not re.search(r'(track|album|playlist|artist)/[a-zA-Z0-9]+', url):
                validation_errors.append("Spotify —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å track, album, playlist –∏–ª–∏ artist")
        
        # YouTube - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        elif platform in ['YouTube', 'YouTube Music']:
            if not re.search(r'(watch\?v=|embed/|youtu\.be/)[a-zA-Z0-9_-]+', url):
                validation_errors.append("YouTube —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å video ID")
        
        if validation_errors:
            return ValidationResult(False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏", errors=validation_errors)
        
        return ValidationResult(True, f"–í–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ {platform}", {
            'url': url,
            'platform': platform,
            'domain': domain
        })
    
    @staticmethod
    def extract_links_from_text(text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not isinstance(text, str):
            return []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
        url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        
        links = re.findall(url_pattern, text)
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º —Å—Å—ã–ª–∫–∏ –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        domain_pattern = r'(?:www\.)?(?:' + '|'.join(re.escape(domain) for domain in URLValidator.SUPPORTED_PLATFORMS.keys()) + r')[^\s]*'
        domain_links = re.findall(domain_pattern, text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∫ —Å—Å—ã–ª–∫–∞–º –±–µ–∑ –Ω–µ–≥–æ
        for link in domain_links:
            if link not in links and not link.startswith(('http://', 'https://')):
                links.append('https://' + link)
        
        return list(set(links))  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

# ============================================
# –í–ê–õ–ò–î–ê–¢–û–†–´ –§–ê–ô–õ–û–í
# ============================================

class FileValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"""
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    ALLOWED_IMAGE_TYPES = {'image/jpeg', 'image/png', 'image/webp', 'image/gif'}
    ALLOWED_DOCUMENT_TYPES = {'application/pdf', 'text/plain', 'application/zip'}
    ALLOWED_AUDIO_TYPES = {'audio/mpeg', 'audio/wav', 'audio/ogg'}
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ (–≤ –±–∞–π—Ç–∞—Ö)
    MAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB
    MAX_DOCUMENT_SIZE = 50 * 1024 * 1024  # 50MB
    MAX_BACKUP_SIZE = 100 * 1024 * 1024  # 100MB
    
    @staticmethod
    def get_file_type(mime_type: str) -> FileType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ MIME-type"""
        if mime_type.startswith('image/'):
            return FileType.IMAGE
        elif mime_type.startswith('audio/'):
            return FileType.AUDIO
        elif mime_type.startswith('video/'):
            return FileType.VIDEO
        elif mime_type in FileValidator.ALLOWED_DOCUMENT_TYPES:
            return FileType.DOCUMENT
        elif mime_type == 'application/zip':
            return FileType.BACKUP
        else:
            return FileType.UNKNOWN
    
    @staticmethod
    def validate_file_size(file_size: int, file_type: FileType) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        max_sizes = {
            FileType.IMAGE: FileValidator.MAX_IMAGE_SIZE,
            FileType.DOCUMENT: FileValidator.MAX_DOCUMENT_SIZE,
            FileType.BACKUP: FileValidator.MAX_BACKUP_SIZE,
            FileType.AUDIO: FileValidator.MAX_DOCUMENT_SIZE,
            FileType.VIDEO: FileValidator.MAX_DOCUMENT_SIZE
        }
        
        max_size = max_sizes.get(file_type, FileValidator.MAX_DOCUMENT_SIZE)
        
        if file_size > max_size:
            max_size_mb = max_size / (1024 * 1024)
            file_size_mb = file_size / (1024 * 1024)
            return ValidationResult(
                False, 
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f}MB (–º–∞–∫—Å–∏–º—É–º {max_size_mb:.0f}MB)"
            )
        
        return ValidationResult(True, "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –Ω–æ—Ä–º–µ")
    
    @staticmethod
    def validate_file_name(filename: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        if not isinstance(filename, str):
            return ValidationResult(False, "–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        filename = filename.strip()
        
        if not filename:
            return ValidationResult(False, "–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if re.search(r'[<>:"/\\|?*\x00-\x1f]', filename):
            return ValidationResult(False, "–ò–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(filename) > 255:
            return ValidationResult(False, "–ò–º—è —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞", filename)
    
    @staticmethod
    def validate_image_file(file_path: str = None, file_data: bytes = None, filename: str = None) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if filename:
                name_result = FileValidator.validate_file_name(filename)
                if not name_result.is_valid:
                    return name_result
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if file_data:
                size_result = FileValidator.validate_file_size(len(file_data), FileType.IMAGE)
                if not size_result.is_valid:
                    return size_result
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞
            if filename:
                mime_type, _ = mimetypes.guess_type(filename)
                if mime_type not in FileValidator.ALLOWED_IMAGE_TYPES:
                    return ValidationResult(
                        False, 
                        f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {mime_type}",
                        errors=[f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(FileValidator.ALLOWED_IMAGE_TYPES)}"]
                    )
            
            return ValidationResult(True, "–í–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
        except Exception as e:
            return ValidationResult(False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# ============================================
# –í–ê–õ–ò–î–ê–¢–û–†–´ BACKUP –§–ê–ô–õ–û–í
# ============================================

class BackupValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è backup —Ñ–∞–π–ª–æ–≤"""
    
    REQUIRED_BACKUP_FILES = {
        'metadata.json',
        'tables_data.json',
        'restore_script.sql',
        'README_RESTORE.txt'
    }
    
    @staticmethod
    def validate_backup_file(file_path: str = None, file_data: bytes = None) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è backup ZIP –∞—Ä—Ö–∏–≤–∞"""
        try:
            if file_path and os.path.exists(file_path):
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏
                return BackupValidator._validate_backup_from_path(file_path)
            elif file_data:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
                return BackupValidator._validate_backup_from_data(file_data)
            else:
                return ValidationResult(False, "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ backup: {e}")
            return ValidationResult(False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ backup: {e}")
    
    @staticmethod
    def _validate_backup_from_path(file_path: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è backup —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏"""
        if not zipfile.is_zipfile(file_path):
            return ValidationResult(False, "–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP –∞—Ä—Ö–∏–≤–æ–º")
        
        try:
            with zipfile.ZipFile(file_path, 'r') as zip_file:
                return BackupValidator._validate_zip_contents(zip_file)
        except zipfile.BadZipFile:
            return ValidationResult(False, "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤")
    
    @staticmethod
    def _validate_backup_from_data(file_data: bytes) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è backup –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import io
            
            with zipfile.ZipFile(io.BytesIO(file_data), 'r') as zip_file:
                return BackupValidator._validate_zip_contents(zip_file)
        except zipfile.BadZipFile:
            return ValidationResult(False, "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤")
    
    @staticmethod
    def _validate_zip_contents(zip_file: zipfile.ZipFile) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ZIP –∞—Ä—Ö–∏–≤–∞"""
        file_list = set(zip_file.namelist())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        missing_files = BackupValidator.REQUIRED_BACKUP_FILES - file_list
        if missing_files:
            return ValidationResult(
                False, 
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã backup",
                errors=[f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_files)}"]
            )
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ metadata.json
            metadata_content = zip_file.read('metadata.json')
            metadata = json.loads(metadata_content)
            
            required_metadata = {'backup_date', 'database_age_days', 'tables'}
            missing_metadata = required_metadata - set(metadata.keys())
            if missing_metadata:
                return ValidationResult(
                    False,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π metadata.json",
                    errors=[f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_metadata)}"]
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ tables_data.json
            tables_content = zip_file.read('tables_data.json')
            tables_data = json.loads(tables_content)
            
            if not isinstance(tables_data, dict):
                return ValidationResult(False, "tables_data.json –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç")
            
            return ValidationResult(True, "–í–∞–ª–∏–¥–Ω—ã–π backup —Ñ–∞–π–ª", {
                'metadata': metadata,
                'tables_count': len(tables_data),
                'backup_date': metadata.get('backup_date')
            })
            
        except json.JSONDecodeError as e:
            return ValidationResult(False, f"–û—à–∏–±–∫–∞ JSON –≤ backup: {e}")
        except KeyError as e:
            return ValidationResult(False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –≤ backup: {e}")

# ============================================
# –í–ê–õ–ò–î–ê–¢–û–†–´ AI –ó–ê–ü–†–û–°–û–í
# ============================================

class AIValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è AI –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã –¥–ª—è AI
    MAX_PROMPT_LENGTH = 4000
    MAX_RESPONSE_LENGTH = 8000
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
    FORBIDDEN_TOPICS = {
        'nsfw', 'adult', 'porn', 'violence', 'drugs', 'weapons',
        'hate', 'racism', 'extremism', 'terrorism', 'illegal'
    }
    
    @staticmethod
    def validate_ai_prompt(prompt: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è prompt –¥–ª—è AI"""
        if not isinstance(prompt, str):
            return ValidationResult(False, "Prompt –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        prompt = prompt.strip()
        
        if not prompt:
            return ValidationResult(False, "Prompt –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if len(prompt) > AIValidator.MAX_PROMPT_LENGTH:
            return ValidationResult(
                False, 
                f"Prompt —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º {AIValidator.MAX_PROMPT_LENGTH})"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
        prompt_lower = prompt.lower()
        for forbidden_topic in AIValidator.FORBIDDEN_TOPICS:
            if forbidden_topic in prompt_lower:
                return ValidationResult(
                    False, 
                    f"Prompt —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é —Ç–µ–º—É: {forbidden_topic}"
                )
        
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è
        sanitized_prompt = BaseValidator.sanitize_string(prompt, AIValidator.MAX_PROMPT_LENGTH)
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω—ã–π AI prompt", sanitized_prompt)
    
    @staticmethod
    def validate_ai_response(response: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI"""
        if not isinstance(response, str):
            return ValidationResult(False, "AI –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        response = response.strip()
        
        if not response:
            return ValidationResult(False, "AI –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if len(response) > AIValidator.MAX_RESPONSE_LENGTH:
            return ValidationResult(
                False,
                f"AI –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º {AIValidator.MAX_RESPONSE_LENGTH})"
            )
        
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è (—Ä–∞–∑—Ä–µ—à–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        sanitized_response = BaseValidator.sanitize_string(response, AIValidator.MAX_RESPONSE_LENGTH, allow_html=True)
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω—ã–π AI –æ—Ç–≤–µ—Ç", sanitized_response)

# ============================================
# –í–ê–õ–ò–î–ê–¢–û–†–´ –ö–ê–†–ú–´
# ============================================

class KarmaValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–∞—Ä–º–æ–π"""
    
    @staticmethod
    def validate_karma_change(amount: Any) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
        result = BaseValidator.is_valid_integer(amount, min_value=-1000, max_value=1000)
        
        if not result.is_valid:
            return ValidationResult(False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã: {result.message}")
        
        if result.data == 0:
            return ValidationResult(False, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω—É–ª—é")
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã", result.data)
    
    @staticmethod
    def validate_karma_reason(reason: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
        if not isinstance(reason, str):
            return ValidationResult(False, "–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        reason = reason.strip()
        
        if len(reason) < 3:
            return ValidationResult(False, "–ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
        
        if len(reason) > 200:
            return ValidationResult(False, "–ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è
        sanitized_reason = BaseValidator.sanitize_string(reason, 200)
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞", sanitized_reason)

# ============================================
# –ì–õ–ê–í–ù–´–ô –í–ê–õ–ò–î–ê–¢–û–†
# ============================================

class DataValidator:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.telegram = TelegramValidator()
        self.url = URLValidator()
        self.file = FileValidator()
        self.backup = BackupValidator()
        self.ai = AIValidator()
        self.karma = KarmaValidator()
        self.base = BaseValidator()
    
    def validate_message_data(self, data: Dict[str, Any]) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è"""
        errors = []
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['user_id', 'chat_id', 'message_id']
        for field in required_fields:
            if field not in data:
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
        
        if errors:
            return ValidationResult(False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", errors=errors)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
        user_id_result = self.telegram.validate_user_id(data['user_id'])
        if not user_id_result.is_valid:
            errors.append(f"user_id: {user_id_result.message}")
        
        chat_id_result = self.telegram.validate_chat_id(data['chat_id'])
        if not chat_id_result.is_valid:
            errors.append(f"chat_id: {chat_id_result.message}")
        
        message_id_result = self.telegram.validate_message_id(data['message_id'])
        if not message_id_result.is_valid:
            errors.append(f"message_id: {message_id_result.message}")
        
        if errors:
            return ValidationResult(False, "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è", errors=errors)
        
        return ValidationResult(True, "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", {
            'user_id': user_id_result.data,
            'chat_id': chat_id_result.data,
            'message_id': message_id_result.data
        })

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
_data_validator: Optional[DataValidator] = None

def get_data_validator() -> DataValidator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
    global _data_validator
    
    if _data_validator is None:
        _data_validator = DataValidator()
    
    return _data_validator

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
def validate_user_id(user_id: Any) -> ValidationResult:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è user_id"""
    return TelegramValidator.validate_user_id(user_id)

def validate_url(url: str) -> ValidationResult:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL"""
    return URLValidator.validate_url(url)

def validate_music_link(url: str) -> ValidationResult:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    return URLValidator.validate_music_link(url)

def sanitize_string(text: str, max_length: int = 1000) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏"""
    return BaseValidator.sanitize_string(text, max_length)

def extract_links(text: str) -> List[str]:
    """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return URLValidator.extract_links_from_text(text)

# ============================================
# –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò
# ============================================

def validate_input(**validators):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        **validators: –°–ª–æ–≤–∞—Ä—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            for param_name, validator in validators.items():
                if param_name in kwargs:
                    value = kwargs[param_name]
                    result = validator(value)
                    
                    if not result.is_valid:
                        logger.warning(f"–í–∞–ª–∏–¥–∞—Ü–∏—è {param_name} –≤ {func.__name__}: {result.message}")
                        raise ValueError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {param_name}: {result.message}")
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
                    kwargs[param_name] = result.data if result.data is not None else value
            
            return func(*args, **kwargs)
        
        return wrapper
    return decorator

# ============================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
# ============================================

if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataValidator...")
    
    validator = DataValidator()
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –¥–∞–Ω–Ω—ã—Ö
    print("\nüì± –¢–µ—Å—Ç Telegram –¥–∞–Ω–Ω—ã—Ö:")
    test_cases = [
        (123456789, True),  # –í–∞–ª–∏–¥–Ω—ã–π user_id
        (-1001234567890, True),  # –í–∞–ª–∏–¥–Ω—ã–π chat_id –≥—Ä—É–ø–ø—ã
        ("invalid", False),  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID
        (0, False)  # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π ID
    ]
    
    for test_value, expected in test_cases:
        result = validator.telegram.validate_user_id(test_value)
        status = "‚úÖ" if result.is_valid == expected else "‚ùå"
        print(f"  {test_value}: {status} {result.message}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
    print("\nüîó –¢–µ—Å—Ç URL:")
    url_tests = [
        ("https://spotify.com/track/abc123", True),
        ("youtube.com/watch?v=abc123", True),
        ("invalid-url", False),
        ("javascript:alert(1)", False)
    ]
    
    for url, expected in url_tests:
        result = validator.url.validate_music_link(url)
        status = "‚úÖ" if result.is_valid == expected else "‚ùå"
        print(f"  {url}: {status}")
    
    # –¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏
    print("\nüßπ –¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏:")
    dirty_text = "<script>alert('xss')</script>–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç"
    clean_text = sanitize_string(dirty_text)
    print(f"  –ò—Å—Ö–æ–¥–Ω—ã–π: {dirty_text}")
    print(f"  –û—á–∏—â–µ–Ω–Ω—ã–π: {clean_text}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")