"""
utils/formatters.py - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –º–µ–Ω—é, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
–ü–õ–ê–ù 1: –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤
"""

from typing import List, Dict, Optional, Union, Any
from datetime import datetime, timedelta
import re

from utils.logger import get_logger

logger = get_logger(__name__)

class TelegramFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram —Å —ç–º–æ–¥–∑–∏ –∏ markdown"""
    
    @staticmethod
    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ markdown"""
        if not text:
            return ""
        
        # –°–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram MarkdownV2
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    @staticmethod
    def bold(text: str) -> str:
        """–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        return f"**{text}**"
    
    @staticmethod
    def italic(text: str) -> str:
        """–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        return f"*{text}*"
    
    @staticmethod
    def code(text: str) -> str:
        """–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç"""
        return f"`{text}`"
    
    @staticmethod
    def pre(text: str, language: str = "") -> str:
        """–ë–ª–æ–∫ –∫–æ–¥–∞"""
        return f"```{language}\n{text}\n```"
    
    @staticmethod
    def link(text: str, url: str) -> str:
        """–°—Å—ã–ª–∫–∞"""
        return f"[{text}]({url})"
    
    @staticmethod
    def mention(text: str, user_id: int) -> str:
        """–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"[{text}](tg://user?id={user_id})"

class ProgressBarFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    @staticmethod
    def create_progress_bar(current: int, maximum: int, width: int = 10, 
                          filled_char: str = "‚ñ∞", empty_char: str = "‚ñ±") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if maximum <= 0:
            return empty_char * width
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        percentage = min(current / maximum, 1.0)
        filled_length = int(width * percentage)
        empty_length = width - filled_length
        
        return filled_char * filled_length + empty_char * empty_length
    
    @staticmethod
    def format_karma_progress(current_karma: int, rank_config: Dict) -> str:
        """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞—Ä–º—ã –¥–ª—è –∑–≤–∞–Ω–∏–π"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        logger.debug("üîÑ format_karma_progress - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        progress_bar = ProgressBarFormatter.create_progress_bar(current_karma, 5, 8)
        return f"{progress_bar} {current_karma}/5"
    
    @staticmethod
    def format_backup_countdown(days_left: int, total_days: int = 30) -> str:
        """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –¥–æ backup"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 4
        logger.debug("üîÑ format_backup_countdown - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 4)")
        
        if days_left <= 0:
            return "üî¥‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞ –ü–†–û–°–†–û–ß–ï–ù–û!"
        elif days_left <= 5:
            return f"üî¥‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ± {days_left} –¥–Ω."
        elif days_left <= 10:
            return f"üü°‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ± {days_left} –¥–Ω."
        else:
            return f"üü¢‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ± {days_left} –¥–Ω."

class StatisticsFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def format_user_stats(stats: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            username = stats.get('username', 'unknown')
            first_name = stats.get('first_name', 'Unknown')
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            result += f"üë§ {TelegramFormatter.bold(first_name)} (@{username})\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            result += f"üîó **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
            result += f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {stats.get('total_links', 0)}\n"
            result += f"   ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats.get('links_last_30_days', 0)}\n\n"
            
            # –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã (–ü–õ–ê–ù 2)
            karma = stats.get('karma_points', 0)
            rank = stats.get('rank', 'ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π')
            progress = stats.get('rank_progress', '0/5')
            
            result += f"üèÜ **–ö–∞—Ä–º–∞ –∏ –∑–≤–∞–Ω–∏–µ:**\n"
            result += f"   ‚Ä¢ –ö–∞—Ä–º–∞: {karma} –±–∞–ª–ª–æ–≤\n"
            result += f"   ‚Ä¢ –ó–≤–∞–Ω–∏–µ: {rank}\n"
            result += f"   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
            
            # –ü–õ–ê–ù 3: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ó–ê–ì–õ–£–®–ö–ò)
            if stats.get('presave_requests', 0) > 0 or stats.get('approved_presaves', 0) > 0:
                result += f"üéµ **–ü—Ä–µ—Å–µ–π–≤—ã:**\n"
                result += f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {stats.get('presave_requests', 0)}\n"
                result += f"   ‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats.get('approved_presaves', 0)}\n"
                result += f"   ‚Ä¢ –ò–ò –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {stats.get('ai_interactions', 0)}\n\n"
            
            # –î–∞—Ç—ã
            reg_date = stats.get('registered_at')
            last_activity = stats.get('last_activity')
            
            result += f"üìÖ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
            if reg_date:
                result += f"   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date.strftime('%d.%m.%Y')}\n"
            if last_activity:
                result += f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.strftime('%d.%m.%Y %H:%M')}\n"
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    @staticmethod
    def format_community_stats(stats: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        try:
            result = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞**\n\n"
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            total_users = stats.get('total_users', 0)
            active_users = stats.get('active_users_30d', 0)
            result += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            result += f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            result += f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (30–¥): {active_users}\n\n"
            
            # –°—Å—ã–ª–∫–∏
            total_links = stats.get('total_links', 0)
            recent_links = stats.get('links_last_7d', 0)
            result += f"üîó **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
            result += f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}\n"
            result += f"   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {recent_links}\n\n"
            
            # –ü–õ–ê–ù 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ò)
            avg_karma = stats.get('avg_karma', 0)
            if avg_karma > 0:
                result += f"üíé **–ö–∞—Ä–º–∞:**\n"
                result += f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∫–∞—Ä–º–∞: {avg_karma} –±–∞–ª–ª–æ–≤\n\n"
            
            # –ü–õ–ê–ù 3: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ó–ê–ì–õ–£–®–ö–ò)
            forms_submitted = stats.get('total_forms_submitted', 0)
            ai_interactions = stats.get('ai_interactions_today', 0)
            if forms_submitted > 0 or ai_interactions > 0:
                result += f"ü§ñ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**\n"
                result += f"   ‚Ä¢ –§–æ—Ä–º –ø–æ–¥–∞–Ω–æ: {forms_submitted}\n"
                result += f"   ‚Ä¢ –ò–ò –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {ai_interactions}\n\n"
            
            # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updated = stats.get('updated_at')
            if updated:
                result += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated.strftime('%d.%m.%Y %H:%M')}"
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    @staticmethod
    def format_links_list(links: List[Dict], title: str = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫"""
        try:
            if not links:
                return f"üì≠ {title} - —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
            
            result = f"üîó **{title}**\n\n"
            
            for i, link in enumerate(links, 1):
                username = link.get('username') or 'unknown'
                first_name = link.get('first_name') or 'Unknown'
                url = link.get('url', '')
                created_at = link.get('created_at')
                
                # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                display_url = url
                if len(url) > 60:
                    display_url = url[:57] + "..."
                
                result += f"{i}. **@{username}** ({first_name})\n"
                result += f"   üîó {display_url}\n"
                
                if created_at:
                    result += f"   üìÖ {created_at.strftime('%d.%m %H:%M')}\n"
                
                result += "\n"
            
            result += f"üí° –ü–æ–∫–∞–∑–∞–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}"
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫"

class MenuFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–æ–∫"""
    
    @staticmethod
    def format_main_menu_text() -> str:
        """–¢–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        return """
üéõÔ∏è **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏  
‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """.strip()
    
    @staticmethod
    def format_limit_mode_info(current_mode: str, config: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ –ª–∏–º–∏—Ç–æ–≤"""
        emoji = config.get('emoji', '‚ö°')
        name = config.get('name', current_mode)
        max_hour = config.get('max_hour', 0)
        cooldown = config.get('cooldown', 0)
        
        result = f"{emoji} **–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {name}**\n\n"
        result += f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        result += f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {max_hour}\n"
        result += f"   ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {cooldown} —Å–µ–∫\n\n"
        result += f"üí° –î–ª—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /setmode_*"
        
        return result
    
    @staticmethod
    def format_help_text() -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏ /help"""
        return """
ü§ñ **Do Presave Reminder Bot v25+ - –ü–æ–º–æ—â—å**

**üì± –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:**
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/resetmenu - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö

**üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
/mystat - –¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/last10links - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Ç–µ
/last30links - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Ç–µ

**‚öôÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ò–ú–ò–¢–ê–ú–ò (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):**
/setmode_conservative - –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (60/—á–∞—Å)
/setmode_normal - –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (180/—á–∞—Å)
/setmode_burst - –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (600/—á–∞—Å) üî•
/setmode_adminburst - –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º (1200/—á–∞—Å)
/currentmode - –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤

**üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):**
/enablebot - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
/disablebot - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞

**üèÜ –°–ò–°–¢–ï–ú–ê –ö–ê–†–ú–´ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):**
/karma @username +5 - –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞—Ä–º—ã (–ü–ª–∞–Ω 2)
/karma @username -2 - –°–Ω—è—Ç–∏–µ –∫–∞—Ä–º—ã (–ü–ª–∞–Ω 2)
/leaderboard - –¢–æ–ø –ø–æ –∫–∞—Ä–º–µ (–ü–ª–∞–Ω 2)

**ü§ñ –ò–ò –§–£–ù–ö–¶–ò–ò (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):**
–£–ø–æ–º—è–Ω–∏—Ç–µ –±–æ—Ç–∞ @{bot_username} –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò (–ü–ª–∞–Ω 3)

**üíæ BACKUP (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):**
/downloadsql - –°–∫–∞—á–∞—Ç—å backup –ë–î (–ü–ª–∞–Ω 4)
/backupstatus - –°—Ç–∞—Ç—É—Å backup —Å–∏—Å—Ç–µ–º—ã (–ü–ª–∞–Ω 4)

üí° **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π (–ü–ª–∞–Ω 3)
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ backup –∫–∞–∂–¥—ã–µ 28 –¥–Ω–µ–π (–ü–ª–∞–Ω 4)

‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!
        """.strip()

class ErrorFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    
    @staticmethod
    def format_error(error_type: str, message: str, user_friendly: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        if user_friendly:
            friendly_messages = {
                "permission_denied": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                "user_not_found": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "invalid_input": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã",
                "rate_limit": "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                "database_error": "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                "network_error": "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                "feature_unavailable": "üîÑ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            }
            return friendly_messages.get(error_type, f"‚ùå {message}")
        else:
            return f"‚ùå [{error_type}] {message}"
    
    @staticmethod
    def format_validation_error(field: str, expected: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return f"‚ùå –ü–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: {expected}"
    
    @staticmethod
    def format_development_message(feature_name: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
        return f"üîÑ {feature_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!"

class TimeFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç"""
    
    @staticmethod
    def time_ago(dt: datetime) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∑–∞–¥'"""
        now = datetime.utcnow()
        diff = now - dt
        
        if diff.total_seconds() < 60:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
        elif diff.total_seconds() < 3600:
            minutes = int(diff.total_seconds() / 60)
            return f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
        elif diff.total_seconds() < 86400:
            hours = int(diff.total_seconds() / 3600)
            return f"{hours} —á –Ω–∞–∑–∞–¥"
        elif diff.days == 1:
            return "–≤—á–µ—Ä–∞"
        elif diff.days < 7:
            return f"{diff.days} –¥–Ω –Ω–∞–∑–∞–¥"
        elif diff.days < 30:
            weeks = diff.days // 7
            return f"{weeks} –Ω–µ–¥ –Ω–∞–∑–∞–¥"
        else:
            months = diff.days // 30
            return f"{months} –º–µ—Å –Ω–∞–∑–∞–¥"
    
    @staticmethod
    def format_duration(seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds} —Å–µ–∫"
        elif seconds < 3600:
            minutes = seconds // 60
            return f"{minutes} –º–∏–Ω"
        elif seconds < 86400:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours}—á {minutes}–º"
        else:
            days = seconds // 86400
            hours = (seconds % 86400) // 3600
            return f"{days}–¥ {hours}—á"

# ============================================
# –ü–õ–ê–ù 2: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–†–ú–´ (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

class KarmaFormatter:
    """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã"""
    
    @staticmethod
    def format_karma_change(user_id: int, old_karma: int, new_karma: int, reason: str) -> str:
        """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        logger.debug("üîÑ format_karma_change - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        return "üîÑ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    
    @staticmethod
    def format_leaderboard(users: List[Dict]) -> str:
        """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        logger.debug("üîÑ format_leaderboard - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        return "üîÑ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

# ============================================
# –ü–õ–ê–ù 3: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò–ò (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

class AIFormatter:
    """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò"""
    
    @staticmethod
    def format_ai_response(response: str, model: str) -> str:
        """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ format_ai_response - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return "ü§ñ –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    
    @staticmethod
    def format_form_submission(form_data: Dict) -> str:
        """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3
        logger.debug("üîÑ format_form_submission - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        return "üìù –§–æ—Ä–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

# ============================================
# –ü–õ–ê–ù 4: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï BACKUP (–ó–ê–ì–õ–£–®–ö–ò)
# ============================================

class BackupFormatter:
    """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ backup"""
    
    @staticmethod
    def format_backup_status(status: Dict) -> str:
        """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ backup"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 4
        logger.debug("üîÑ format_backup_status - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 4)")
        return "üíæ Backup —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"