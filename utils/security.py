"""
üõ°Ô∏è Security System - Do Presave Reminder Bot v25+
–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤
"""

import re
import hashlib
import hmac
import time
from functools import wraps
from typing import List, Optional, Dict, Any, Union, Callable
from urllib.parse import urlparse
import telebot
from telebot.types import Message, CallbackQuery, User as TelegramUser

from config import config
from utils.logger import get_logger, telegram_logger

logger = get_logger(__name__)

# ============================================
# –û–°–ù–û–í–ù–´–ï –ö–õ–ê–°–°–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
# ============================================

class SecurityError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    pass

class AccessDeniedError(SecurityError):
    """–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–ø—Ä–µ—â–µ–Ω"""
    pass

class ValidationError(SecurityError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass

class RateLimitError(SecurityError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"""
    pass

class SecurityManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.admin_ids = set(config.ADMIN_IDS)
        self.whitelist_threads = set(config.WHITELIST_THREADS)
        self.rate_limit_storage = {}  # –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∏–º–∏—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        self.rate_limits = {
            'admin_commands': {'max_calls': 100, 'window_seconds': 3600},    # 100 –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            'user_commands': {'max_calls': 20, 'window_seconds': 3600},     # 20 –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            'karma_changes': {'max_calls': 10, 'window_seconds': 300},      # 10 –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä–º—ã –≤ 5 –º–∏–Ω—É—Ç
            'ai_requests': {'max_calls': 50, 'window_seconds': 3600},       # 50 –ò–ò –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
            'form_submissions': {'max_calls': 5, 'window_seconds': 300},    # 5 —Ñ–æ—Ä–º –≤ 5 –º–∏–Ω—É—Ç
            'backup_operations': {'max_calls': 3, 'window_seconds': 3600}   # 3 backup –≤ —á–∞—Å
        }
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admin_ids
    
    def is_whitelisted_thread(self, thread_id: Optional[int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ–ø–∏–∫ –≤ whitelist"""
        if thread_id is None:
            return False
        return thread_id in self.whitelist_threads
    
    def validate_telegram_user(self, user: TelegramUser) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        if not user:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        if not user.id or user.id <= 0:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–æ—Ç (–∫—Ä–æ–º–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞)
        if user.is_bot and user.id != int(config.BOT_TOKEN.split(':')[0]):
            logger.warning(f"ü§ñ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –±–æ—Ç–∞: {user.id}")
            return False
            
        return True
    
    def check_rate_limit(self, user_id: int, operation_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if operation_type not in self.rate_limits:
            return True  # –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            
        limit_config = self.rate_limits[operation_type]
        key = f"{user_id}:{operation_type}"
        current_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–∑–æ–≤–æ–≤
        if key not in self.rate_limit_storage:
            self.rate_limit_storage[key] = []
            
        calls = self.rate_limit_storage[key]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        window_start = current_time - limit_config['window_seconds']
        calls[:] = [call_time for call_time in calls if call_time > window_start]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(calls) >= limit_config['max_calls']:
            logger.warning(
                f"‚ö†Ô∏è Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –æ–ø–µ—Ä–∞—Ü–∏—è {operation_type}",
                user_id=user_id,
                operation_type=operation_type,
                calls_count=len(calls),
                limit=limit_config['max_calls']
            )
            return False
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤
        calls.append(current_time)
        return True
    
    def sanitize_input(self, text: str, max_length: int = 1000, 
                      allow_html: bool = False, allow_sql: bool = False) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        if not isinstance(text, str):
            raise ValidationError("–í–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(text) > max_length:
            text = text[:max_length]
            
        # –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω HTML
        if not allow_html:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
            text = text.replace('&', '&amp;')
            text = text.replace('<', '&lt;')
            text = text.replace('>', '&gt;')
            text = text.replace('"', '&quot;')
            text = text.replace("'", '&#x27;')
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω SQL
        if not allow_sql:
            sql_keywords = [
                'SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER',
                'UNION', 'EXEC', 'EXECUTE', '--', ';', 'xp_', 'sp_'
            ]
            
            text_upper = text.upper()
            for keyword in sql_keywords:
                if keyword in text_upper:
                    logger.warning(
                        f"üö® –ü–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏: {keyword} –≤ —Ç–µ–∫—Å—Ç–µ",
                        text=text[:100],
                        detected_keyword=keyword
                    )
                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
                    text = text.replace(keyword.lower(), '[FILTERED]')
                    text = text.replace(keyword.upper(), '[FILTERED]')
                    
        return text.strip()
    
    def validate_url(self, url: str, allowed_domains: Optional[List[str]] = None) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è URL"""
        try:
            parsed = urlparse(url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
            if parsed.scheme not in ['http', 'https']:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
            if not parsed.netloc:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            if allowed_domains:
                domain = parsed.netloc.lower()
                if not any(allowed_domain in domain for allowed_domain in allowed_domains):
                    return False
                    
            return True
            
        except Exception:
            return False
    
    def validate_username(self, username: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è username Telegram"""
        if not username:
            return False
            
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        username = username.lstrip('@')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, 5-32 —Å–∏–º–≤–æ–ª–∞)
        pattern = r'^[a-zA-Z][a-zA-Z0-9_]{4,31}$'
        return bool(re.match(pattern, username))
    
    def verify_webhook_signature(self, body: bytes, signature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç Telegram"""
        try:
            secret_key = config.WEBHOOK_SECRET.encode()
            expected_signature = hmac.new(secret_key, body, hashlib.sha256).hexdigest()
            return hmac.compare_digest(signature, expected_signature)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook –ø–æ–¥–ø–∏—Å–∏: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_manager = SecurityManager()

# ============================================
# –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í
# ============================================

def admin_required(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        # –ò—â–µ–º –æ–±—ä–µ–∫—Ç —Å user_id —Å—Ä–µ–¥–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        user_id = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        for arg in args:
            if isinstance(arg, (Message, CallbackQuery)):
                user_id = arg.from_user.id
                break
            elif hasattr(arg, 'user_id'):
                user_id = arg.user_id
                break
            elif hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                user_id = arg.from_user.id
                break
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º kwargs
        if user_id is None:
            user_id = kwargs.get('user_id') or kwargs.get('admin_id')
            
        if user_id is None:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞")
            raise AccessDeniedError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
        if not security_manager.is_admin(user_id):
            telegram_logger.user_action(
                user_id, 
                f"–ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}",
                function=func.__name__,
                access_denied=True
            )
            raise AccessDeniedError("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if not security_manager.check_rate_limit(user_id, 'admin_commands'):
            raise RateLimitError("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞")
            
        telegram_logger.admin_action(
            user_id,
            f"–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}",
            function=func.__name__
        )
        
        return func(*args, **kwargs)
    
    return wrapper

def user_rate_limit(operation_type: str = 'user_commands'):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs):
            # –ò—â–µ–º user_id
            user_id = None
            
            for arg in args:
                if isinstance(arg, (Message, CallbackQuery)):
                    user_id = arg.from_user.id
                    break
                elif hasattr(arg, 'user_id'):
                    user_id = arg.user_id
                    break
                    
            if user_id is None:
                user_id = kwargs.get('user_id')
                
            if user_id and not security_manager.check_rate_limit(user_id, operation_type):
                raise RateLimitError(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ {operation_type}")
                
            return func(*args, **kwargs)
        
        return wrapper
    return decorator

def whitelisted_thread_required(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        # –ò—â–µ–º thread_id —Å—Ä–µ–¥–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        thread_id = None
        
        for arg in args:
            if isinstance(arg, Message):
                thread_id = getattr(arg, 'message_thread_id', None)
                break
            elif hasattr(arg, 'thread_id'):
                thread_id = arg.thread_id
                break
                
        if thread_id is None:
            thread_id = kwargs.get('thread_id')
            
        # –ï—Å–ª–∏ thread_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –õ–°
        if thread_id is None:
            return func(*args, **kwargs)
            
        if not security_manager.is_whitelisted_thread(thread_id):
            logger.warning(
                f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ: {thread_id}",
                thread_id=thread_id,
                function=func.__name__
            )
            raise AccessDeniedError("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ")
            
        return func(*args, **kwargs)
    
    return wrapper

def validate_input(**validation_rules):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs):
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º kwargs —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
            for param_name, rules in validation_rules.items():
                if param_name in kwargs:
                    value = kwargs[param_name]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
                    if 'type' in rules and not isinstance(value, rules['type']):
                        raise ValidationError(f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–∞ {rules['type'].__name__}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –¥–ª—è —Å—Ç—Ä–æ–∫
                    if isinstance(value, str):
                        max_length = rules.get('max_length', 1000)
                        if len(value) > max_length:
                            raise ValidationError(f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É {max_length}")
                        
                        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥
                        allow_html = rules.get('allow_html', False)
                        allow_sql = rules.get('allow_sql', False)
                        kwargs[param_name] = security_manager.sanitize_input(
                            value, max_length, allow_html, allow_sql
                        )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
                    if isinstance(value, (int, float)):
                        if 'min_value' in rules and value < rules['min_value']:
                            raise ValidationError(f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è {rules['min_value']}")
                        if 'max_value' in rules and value > rules['max_value']:
                            raise ValidationError(f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è {rules['max_value']}")
            
            return func(*args, **kwargs)
        
        return wrapper
    return decorator

# ============================================
# –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –í–ê–õ–ò–î–ê–¢–û–†–´ –ü–û –ü–õ–ê–ù–ê–ú
# ============================================

class Plan1Validators:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –ü–ª–∞–Ω–∞ 1 - –±–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"""
    
    @staticmethod
    def validate_limit_mode(mode: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        valid_modes = ['CONSERVATIVE', 'NORMAL', 'BURST', 'ADMIN_BURST']
        return mode.upper() in valid_modes
    
    @staticmethod
    def validate_reminder_text(text: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if len(text) > 500:
            raise ValidationError("–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        return security_manager.sanitize_input(text, max_length=500, allow_html=True)

class Plan2Validators:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –ü–ª–∞–Ω–∞ 2 - —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã"""
    
    @staticmethod
    def validate_karma_change(change: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
        # –ö–∞—Ä–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ ¬±50 –∑–∞ —Ä–∞–∑
        if abs(change) > 50:
            raise ValidationError("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã (–º–∞–∫—Å. ¬±50)")
        return True
    
    @staticmethod
    def validate_karma_amount(karma: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä–º—ã"""
        if karma < 0:
            raise ValidationError("–ö–∞—Ä–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        if karma > config.MAX_KARMA:
            raise ValidationError(f"–ö–∞—Ä–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {config.MAX_KARMA}")
        return True
    
    @staticmethod
    def validate_ratio_format(ratio_string: str) -> tuple[int, int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–æ—Å—å–±—ã:–∫–∞—Ä–º–∞"""
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: "15:12", "15-12", "15/12"
        pattern = r'^(\d+)[:\-/](\d+)$'
        match = re.match(pattern, ratio_string.strip())
        
        if not match:
            raise ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 15:12")
        
        requests_count = int(match.group(1))
        karma_count = int(match.group(2))
        
        if requests_count > 1000:
            raise ValidationError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—å–± –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000")
        if karma_count > config.MAX_KARMA:
            raise ValidationError(f"–ö–∞—Ä–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {config.MAX_KARMA}")
            
        return requests_count, karma_count

class Plan3Validators:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –ü–ª–∞–Ω–∞ 3 - –ò–ò –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã"""
    
    @staticmethod
    def validate_ai_prompt(prompt: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò"""
        if len(prompt) > 2000:
            raise ValidationError("–ó–∞–ø—Ä–æ—Å –∫ –ò–ò —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 2000 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        forbidden_phrases = [
            'ignore previous instructions',
            'forget everything',
            'system prompt',
            'jailbreak',
            'act as if'
        ]
        
        prompt_lower = prompt.lower()
        for phrase in forbidden_phrases:
            if phrase in prompt_lower:
                raise ValidationError(f"–ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É: {phrase}")
        
        return security_manager.sanitize_input(prompt, max_length=2000)
    
    @staticmethod
    def validate_file_upload(file_size: int, file_type: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10MB
        max_size = 10 * 1024 * 1024
        if file_size > max_size:
            raise ValidationError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10MB)")
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        allowed_types = ['image/jpeg', 'image/png', 'image/webp']
        if file_type not in allowed_types:
            raise ValidationError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, WebP")
        
        return True
    
    @staticmethod
    def validate_presave_links(links: List[str]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–µ—Å–µ–π–≤–æ–≤"""
        if len(links) > 10:
            raise ValidationError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫ (–º–∞–∫—Å. 10)")
        
        validated_links = []
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–µ—Å–µ–π–≤–æ–≤
        allowed_domains = [
            'spotify.com', 'music.apple.com', 'music.youtube.com',
            'soundcloud.com', 'bandcamp.com', 'deezer.com',
            'tidal.com', 'music.amazon.com', 'linktr.ee',
            'fanlink.to', 'smarturl.it', 'ffm.to'
        ]
        
        for link in links:
            if not security_manager.validate_url(link, allowed_domains):
                raise ValidationError(f"–ù–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")
            validated_links.append(link)
        
        return validated_links

class Plan4Validators:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –ü–ª–∞–Ω–∞ 4 - backup —Å–∏—Å—Ç–µ–º–∞"""
    
    @staticmethod
    def validate_backup_filename(filename: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ backup —Ñ–∞–π–ª–∞"""
        # –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å presave_bot_backup_ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ .zip
        pattern = r'^presave_bot_backup_\d{8}_\d{6}\.zip$'
        return bool(re.match(pattern, filename))
    
    @staticmethod
    def validate_backup_age(created_date: str) -> int:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ backup –∏ –≤–æ–∑–≤—Ä–∞—Ç –¥–Ω–µ–π"""
        try:
            from datetime import datetime
            created = datetime.strptime(created_date, '%Y-%m-%d')
            age_days = (datetime.now() - created).days
            
            if age_days < 0:
                raise ValidationError("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            if age_days > 365:
                raise ValidationError("Backup —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π (–±–æ–ª–µ–µ –≥–æ–¥–∞)")
                
            return age_days
        except ValueError:
            raise ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD")

# ============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

def check_admin_rights(user_id: int) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
    return security_manager.is_admin(user_id)

def check_whitelist_thread(thread_id: Optional[int]) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ whitelist —Ç–æ–ø–∏–∫–∞"""
    return security_manager.is_whitelisted_thread(thread_id)

def sanitize_user_input(text: str, max_length: int = 1000) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    return security_manager.sanitize_input(text, max_length)

def validate_telegram_username(username: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è username"""
    return security_manager.validate_username(username)

def extract_user_id_from_message(message: Message) -> int:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return message.from_user.id

def extract_thread_id_from_message(message: Message) -> Optional[int]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ thread_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return getattr(message, 'message_thread_id', None)

def log_security_event(event_type: str, user_id: int, details: Dict[str, Any]):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    telegram_logger.user_action(
        user_id,
        f"security_event: {event_type}",
        event_type=event_type,
        **details
    )

# ============================================
# –≠–ö–°–ü–û–†–¢
# ============================================

__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    'SecurityManager', 'SecurityError', 'AccessDeniedError', 'ValidationError', 'RateLimitError',
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    'security_manager',
    
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    'admin_required', 'user_rate_limit', 'whitelisted_thread_required', 'validate_input',
    
    # –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –ø–æ –ø–ª–∞–Ω–∞–º
    'Plan1Validators', 'Plan2Validators', 'Plan3Validators', 'Plan4Validators',
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'check_admin_rights', 'check_whitelist_thread', 'sanitize_user_input', 
    'validate_telegram_username', 'extract_user_id_from_message', 
    'extract_thread_id_from_message', 'log_security_event'
]

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    try:
        text = security_manager.sanitize_input("<script>alert('xss')</script>Hello World!")
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ XSS: {text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
    valid_url = security_manager.validate_url("https://spotify.com/track/123")
    invalid_url = security_manager.validate_url("ftp://evil.com/malware")
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è URL: spotify.com = {valid_url}, evil.com = {invalid_url}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ username
    valid_username = security_manager.validate_username("@test_user_123")
    invalid_username = security_manager.validate_username("@123invalid")
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è username: test_user_123 = {valid_username}, 123invalid = {invalid_username}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    admin_check = security_manager.is_admin(471560832)  # –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: {admin_check}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –ø–ª–∞–Ω–æ–≤
    try:
        Plan2Validators.validate_karma_change(5)
        requests, karma = Plan2Validators.validate_ratio_format("15:12")
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä–º—ã: –∏–∑–º–µ–Ω–µ–Ω–∏–µ +5, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {requests}:{karma}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ä–º—ã: {e}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
