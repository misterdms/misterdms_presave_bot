"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ API Do Presave Reminder Bot v25+
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 4 —Ä–µ–∂–∏–º–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ Telegram API
"""

import os
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from dataclasses import dataclass
from collections import defaultdict, deque

from utils.logger import get_logger, log_api_call

logger = get_logger(__name__)

@dataclass
class LimitConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
    name: str
    emoji: str
    max_requests_per_hour: int
    cooldown_seconds: int
    description: str
    
    def __str__(self):
        return f"{self.emoji} {self.name}"

class LimitManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∏–º–∏—Ç–æ–≤ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4 —Ä–µ–∂–∏–º–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–∏–º–∏—Ç–æ–≤"""
        
        # –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.limit_configs = {
            'CONSERVATIVE': LimitConfig(
                name='Conservative',
                emoji='üêå',
                max_requests_per_hour=int(os.getenv('CONSERVATIVE_MAX_HOUR', '60')),
                cooldown_seconds=int(os.getenv('CONSERVATIVE_COOLDOWN', '60')),
                description='–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º'
            ),
            'NORMAL': LimitConfig(
                name='Normal',
                emoji='‚ö°',
                max_requests_per_hour=int(os.getenv('NORMAL_MAX_HOUR', '180')),
                cooldown_seconds=int(os.getenv('NORMAL_COOLDOWN', '20')),
                description='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
            ),
            'BURST': LimitConfig(
                name='Burst',
                emoji='üöÄ',
                max_requests_per_hour=int(os.getenv('BURST_MAX_HOUR', '600')),
                cooldown_seconds=int(os.getenv('BURST_COOLDOWN', '6')),
                description='–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'
            ),
            'ADMIN_BURST': LimitConfig(
                name='Admin Burst',
                emoji='‚ö°‚ö°',
                max_requests_per_hour=int(os.getenv('ADMIN_BURST_MAX_HOUR', '1200')),
                cooldown_seconds=int(os.getenv('ADMIN_BURST_COOLDOWN', '3')),
                description='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∞–¥–º–∏–Ω–æ–≤'
            )
        }
        
        # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BURST)
        self.current_mode = os.getenv('CURRENT_LIMIT_MODE', 'BURST').upper()
        if self.current_mode not in self.limit_configs:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º {self.current_mode}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BURST")
            self.current_mode = 'BURST'
        
        # –°—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ü–õ–ê–ù–ê 1)
        self.request_history = defaultdict(deque)  # user_id -> deque of timestamps
        self.last_request_time = defaultdict(float)  # user_id -> timestamp
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'blocked_requests': 0,
            'mode_changes': 0,
            'startup_time': datetime.now()
        }
        
        logger.info(f"LimitManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: —Ä–µ–∂–∏–º {self.get_current_config()}")
    
    def get_current_config(self) -> LimitConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return self.limit_configs[self.current_mode]
    
    def set_mode(self, mode: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        mode = mode.upper()
        
        if mode not in self.limit_configs:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤: {mode}")
            return False
        
        old_mode = self.current_mode
        self.current_mode = mode
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)
        os.environ['CURRENT_LIMIT_MODE'] = mode
        
        self.stats['mode_changes'] += 1
        
        logger.info(f"–†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω: {old_mode} ‚Üí {mode}")
        return True
    
    def get_all_modes(self) -> Dict[str, LimitConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        return self.limit_configs.copy()
    
    def check_rate_limit(self, user_id: int, is_admin: bool = False) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            dict: {'allowed': bool, 'reason': str, 'retry_after': int, 'config': LimitConfig}
        """
        
        current_time = time.time()
        config = self.get_current_config()
        
        # –ê–¥–º–∏–Ω—ã –≤ —Ä–µ–∂–∏–º–µ ADMIN_BURST –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ
        if is_admin and self.current_mode == 'ADMIN_BURST':
            # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            last_request = self.last_request_time.get(user_id, 0)
            time_since_last = current_time - last_request
            
            if time_since_last < config.cooldown_seconds:
                retry_after = int(config.cooldown_seconds - time_since_last)
                return {
                    'allowed': False,
                    'reason': f'Cooldown (–∞–¥–º–∏–Ω): –ø–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after}—Å',
                    'retry_after': retry_after,
                    'config': config
                }
        
        # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        result = self._check_hourly_limit(user_id, config, current_time)
        
        if not result['allowed']:
            self.stats['blocked_requests'] += 1
            return result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
        last_request = self.last_request_time.get(user_id, 0)
        time_since_last = current_time - last_request
        
        if time_since_last < config.cooldown_seconds:
            retry_after = int(config.cooldown_seconds - time_since_last)
            self.stats['blocked_requests'] += 1
            
            return {
                'allowed': False,
                'reason': f'Cooldown: –ø–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after}—Å',
                'retry_after': retry_after,
                'config': config
            }
        
        # –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω
        self._record_request(user_id, current_time)
        self.stats['total_requests'] += 1
        
        return {
            'allowed': True,
            'reason': 'OK',
            'retry_after': 0,
            'config': config
        }
    
    def _check_hourly_limit(self, user_id: int, config: LimitConfig, current_time: float) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_history = self.request_history[user_id]
        
        # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞
        hour_ago = current_time - 3600
        while user_history and user_history[0] < hour_ago:
            user_history.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(user_history) >= config.max_requests_per_hour:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
            oldest_request = user_history[0]
            retry_after = int(oldest_request + 3600 - current_time)
            
            return {
                'allowed': False,
                'reason': f'–ß–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç {config.max_requests_per_hour} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω',
                'retry_after': max(retry_after, 1),
                'config': config
            }
        
        return {
            'allowed': True,
            'reason': 'OK',
            'retry_after': 0,
            'config': config
        }
    
    def _record_request(self, user_id: int, timestamp: float):
        """–ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.request_history[user_id].append(timestamp)
        self.last_request_time[user_id] = timestamp
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.request_history[user_id]) > 2000:
            self.request_history[user_id] = deque(
                list(self.request_history[user_id])[-1000:],
                maxlen=2000
            )
    
    def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = time.time()
        config = self.get_current_config()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        user_history = self.request_history[user_id]
        hour_ago = current_time - 3600
        while user_history and user_history[0] < hour_ago:
            user_history.popleft()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å
        last_request = self.last_request_time.get(user_id, 0)
        time_since_last = current_time - last_request if last_request > 0 else None
        
        return {
            'user_id': user_id,
            'current_mode': self.current_mode,
            'config': config,
            'requests_last_hour': len(user_history),
            'remaining_requests': max(0, config.max_requests_per_hour - len(user_history)),
            'last_request_time': datetime.fromtimestamp(last_request) if last_request > 0 else None,
            'seconds_since_last_request': int(time_since_last) if time_since_last is not None else None,
            'cooldown_remaining': max(0, int(config.cooldown_seconds - time_since_last)) if time_since_last is not None else 0
        }
    
    def get_global_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        current_time = time.time()
        uptime = current_time - self.stats['startup_time'].timestamp()
        
        # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = 0
        total_requests_last_hour = 0
        
        hour_ago = current_time - 3600
        
        for user_id, history in self.request_history.items():
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            while history and history[0] < hour_ago:
                history.popleft()
            
            if history:
                active_users += 1
                total_requests_last_hour += len(history)
        
        return {
            'current_mode': self.current_mode,
            'current_config': self.get_current_config(),
            'uptime_seconds': int(uptime),
            'uptime_human': str(timedelta(seconds=int(uptime))),
            'total_requests': self.stats['total_requests'],
            'blocked_requests': self.stats['blocked_requests'],
            'mode_changes': self.stats['mode_changes'],
            'active_users_last_hour': active_users,
            'total_requests_last_hour': total_requests_last_hour,
            'success_rate': (
                (self.stats['total_requests'] - self.stats['blocked_requests']) / 
                max(self.stats['total_requests'], 1) * 100
            )
        }
    
    def reset_user_limits(self, user_id: int):
        """–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω—É–∂–¥)"""
        if user_id in self.request_history:
            del self.request_history[user_id]
        if user_id in self.last_request_time:
            del self.last_request_time[user_id]
        
        logger.info(f"–õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
        current_time = time.time()
        hour_ago = current_time - 3600
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
        for user_id in list(self.request_history.keys()):
            history = self.request_history[user_id]
            
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            while history and history[0] < hour_ago:
                history.popleft()
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
            if not history:
                del self.request_history[user_id]
        
        # –û—á–∏—â–∞–µ–º last_request_time –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in list(self.last_request_time.keys()):
            if user_id not in self.request_history:
                del self.last_request_time[user_id]
        
        logger.debug(f"–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {len(self.request_history)}")
    
    def export_config(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤"""
        return {
            'current_mode': self.current_mode,
            'modes': {
                mode: {
                    'name': config.name,
                    'emoji': config.emoji,
                    'max_requests_per_hour': config.max_requests_per_hour,
                    'cooldown_seconds': config.cooldown_seconds,
                    'description': config.description
                }
                for mode, config in self.limit_configs.items()
            },
            'stats': self.get_global_stats()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–∏–º–∏—Ç–æ–≤
_limit_manager: Optional[LimitManager] = None

def get_limit_manager() -> LimitManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–∏–º–∏—Ç–æ–≤"""
    global _limit_manager
    
    if _limit_manager is None:
        _limit_manager = LimitManager()
    
    return _limit_manager

def check_user_rate_limit(user_id: int, is_admin: bool = False) -> Dict[str, Any]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    manager = get_limit_manager()
    return manager.check_rate_limit(user_id, is_admin)

def set_limit_mode(mode: str) -> bool:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
    manager = get_limit_manager()
    return manager.set_mode(mode)

def get_current_limit_mode() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
    manager = get_limit_manager()
    return manager.current_mode

def get_limit_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤"""
    manager = get_limit_manager()
    return manager.get_global_stats()

def get_current_limits() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–∞—Ö"""
    manager = get_limit_manager()
    current_config = manager.get_current_config()
    
    return {
        'current_mode': manager.current_mode,
        'mode_name': current_config.name,
        'mode_emoji': current_config.emoji,
        'max_requests_per_hour': current_config.max_requests_per_hour,
        'cooldown_seconds': current_config.cooldown_seconds,
        'description': current_config.description,
        'all_modes': {
            mode: {
                'name': config.name,
                'emoji': config.emoji,
                'max_hour': config.max_requests_per_hour,
                'cooldown': config.cooldown_seconds
            }
            for mode, config in manager.get_all_modes().items()
        }
    }

if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤"""
    import time
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LimitManager...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = LimitManager()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤:")
    for mode_name, config in manager.get_all_modes().items():
        print(f"‚Ä¢ {mode_name}: {config}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–æ–≤
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–æ–≤:")
    print(f"–¢–µ–∫—É—â–∏–π: {manager.current_mode}")
    
    success = manager.set_mode('CONSERVATIVE')
    print(f"–°–º–µ–Ω–∞ –Ω–∞ CONSERVATIVE: {'‚úÖ' if success else '‚ùå'}")
    print(f"–ù–æ–≤—ã–π —Ä–µ–∂–∏–º: {manager.current_mode}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
    print("\nüö¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤:")
    test_user_id = 12345
    
    # –ù–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for i in range(3):
        result = manager.check_rate_limit(test_user_id, is_admin=False)
        status = "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω" if result['allowed'] else f"‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {result['reason']}"
        print(f"–ó–∞–ø—Ä–æ—Å {i+1}: {status}")
        
        if not result['allowed']:
            print(f"  –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑: {result['retry_after']}—Å")
        
        time.sleep(1)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_stats = manager.get_user_stats(test_user_id)
    print(f"–ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —á–∞—Å: {user_stats['requests_last_hour']}")
    print(f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {user_stats['remaining_requests']}")
    print(f"Cooldown: {user_stats['cooldown_remaining']}—Å")
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüåç –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    global_stats = manager.get_global_stats()
    print(f"–û–±—â–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤: {global_stats['total_requests']}")
    print(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {global_stats['blocked_requests']}")
    print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['active_users_last_hour']}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {global_stats['success_rate']:.1f}%")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LimitManager –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
