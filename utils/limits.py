"""
üéõÔ∏è API Limits Manager - Do Presave Reminder Bot v25+
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4 —Ä–µ–∂–∏–º–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤ API –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram

–†–ï–ñ–ò–ú–´ –õ–ò–ú–ò–¢–û–í:
- Conservative: 60 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å, cooldown 60—Å (–¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤)
- Normal: 180 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å, cooldown 20—Å (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)  
- Burst: 600 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å, cooldown 6—Å (–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
- Admin Burst: 1200 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å, cooldown 3—Å (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
"""

import os
import time
import threading
from datetime import datetime, timezone, timedelta
from typing import Dict, Optional, Any, List
from dataclasses import dataclass
from enum import Enum

from config import config
from utils.logger import get_logger
from utils.helpers import MessageFormatter
from database.manager import get_database_manager

logger = get_logger(__name__)

class LimitMode(Enum):
    """–†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ API"""
    CONSERVATIVE = "conservative"
    NORMAL = "normal"
    BURST = "burst"
    ADMIN_BURST = "admin_burst"

@dataclass
class LimitConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞"""
    mode: LimitMode
    max_requests_per_hour: int
    cooldown_seconds: int
    description: str
    emoji: str
    recommended_for: str

class RateLimitTracker:
    """–¢—Ä–µ–∫–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.requests_history: List[datetime] = []
        self.last_request_time: Optional[datetime] = None
        self.total_requests = 0
        self.lock = threading.Lock()
    
    def add_request(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        with self.lock:
            now = datetime.now(timezone.utc)
            self.requests_history.append(now)
            self.last_request_time = now
            self.total_requests += 1
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
            cutoff_time = now - timedelta(hours=1)
            self.requests_history = [
                req_time for req_time in self.requests_history 
                if req_time > cutoff_time
            ]
    
    def get_requests_last_hour(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"""
        with self.lock:
            now = datetime.now(timezone.utc)
            cutoff_time = now - timedelta(hours=1)
            return len([
                req_time for req_time in self.requests_history 
                if req_time > cutoff_time
            ])
    
    def get_requests_last_minute(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É"""
        with self.lock:
            now = datetime.now(timezone.utc)
            cutoff_time = now - timedelta(minutes=1)
            return len([
                req_time for req_time in self.requests_history 
                if req_time > cutoff_time
            ])
    
    def time_since_last_request(self) -> float:
        """–í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.last_request_time is None:
            return float('inf')
        
        now = datetime.now(timezone.utc)
        return (now - self.last_request_time).total_seconds()
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.lock:
            self.requests_history = []
            self.last_request_time = None

class LimitManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ª–∏–º–∏—Ç–æ–≤ API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–∏–º–∏—Ç–æ–≤"""
        self.current_mode = LimitMode.BURST  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é BURST
        self.rate_tracker = RateLimitTracker()
        self.lock = threading.Lock()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ª–∏–º–∏—Ç–æ–≤
        self.limit_configs = self._load_limit_configs()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑ –ë–î
        self._load_saved_mode()
        
        logger.info(f"üéõÔ∏è LimitManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ {self.current_mode.value}")
        self._log_current_config()
    
    def _load_limit_configs(self) -> Dict[LimitMode, LimitConfig]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ª–∏–º–∏—Ç–æ–≤ –∏–∑ environment variables"""
        
        configs = {
            LimitMode.CONSERVATIVE: LimitConfig(
                mode=LimitMode.CONSERVATIVE,
                max_requests_per_hour=config.CONSERVATIVE_MAX_HOUR,
                cooldown_seconds=config.CONSERVATIVE_COOLDOWN,
                description="–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º",
                emoji="üêå",
                recommended_for="–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å API –∏–ª–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ"
            ),
            LimitMode.NORMAL: LimitConfig(
                mode=LimitMode.NORMAL,
                max_requests_per_hour=config.NORMAL_MAX_HOUR,
                cooldown_seconds=config.NORMAL_COOLDOWN,
                description="–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º",
                emoji="üö∂",
                recommended_for="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è"
            ),
            LimitMode.BURST: LimitConfig(
                mode=LimitMode.BURST,
                max_requests_per_hour=config.BURST_MAX_HOUR,
                cooldown_seconds=config.BURST_COOLDOWN,
                description="–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º",
                emoji="üèÉ",
                recommended_for="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã, –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã"
            ),
            LimitMode.ADMIN_BURST: LimitConfig(
                mode=LimitMode.ADMIN_BURST,
                max_requests_per_hour=config.ADMIN_BURST_MAX_HOUR,
                cooldown_seconds=config.ADMIN_BURST_COOLDOWN,
                description="–ê–¥–º–∏–Ω—Å–∫–∏–π —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º",
                emoji="üöÄ",
                recommended_for="–ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏"
            )
        }
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ environment variables")
        return configs
    
    def _load_saved_mode(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = get_database_manager()
            saved_mode = db.get_setting('current_limit_mode')
            
            if saved_mode and saved_mode in [mode.value for mode in LimitMode]:
                self.current_mode = LimitMode(saved_mode)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {self.current_mode.value}")
            else:
                logger.info(f"üìÇ –†–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º BURST –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                self._save_current_mode()
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∂–∏–º –∏–∑ –ë–î: {e}")
            logger.info("üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º BURST —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def _save_current_mode(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = get_database_manager()
            db.set_setting('current_limit_mode', self.current_mode.value)
            logger.debug(f"üíæ –†–µ–∂–∏–º {self.current_mode.value} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
    
    def _log_current_config(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = self.get_current_config()
        logger.info(f"üéõÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: {config.emoji} {config.description}")
        logger.info(f"üìä –õ–∏–º–∏—Ç—ã: {config.max_requests_per_hour}/—á–∞—Å, cooldown {config.cooldown_seconds}—Å")
    
    def get_current_mode(self) -> LimitMode:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        return self.current_mode
    
    def get_current_config(self) -> LimitConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤"""
        return self.limit_configs[self.current_mode]
    
    def set_mode(self, new_mode: LimitMode, save_to_db: bool = True) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤
        
        Args:
            new_mode: –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤
            save_to_db: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            with self.lock:
                old_mode = self.current_mode
                self.current_mode = new_mode
                
                if save_to_db:
                    self._save_current_mode()
                
                logger.info(f"üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: {old_mode.value} ‚Üí {new_mode.value}")
                self._log_current_config()
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    def set_mode_by_name(self, mode_name: str, save_to_db: bool = True) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            mode_name: –ò–º—è —Ä–µ–∂–∏–º–∞ (conservative, normal, burst, admin_burst)
            save_to_db: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            new_mode = LimitMode(mode_name.lower())
            return self.set_mode(new_mode, save_to_db)
        except ValueError:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode_name}")
            return False
    
    def can_make_request(self, force: bool = False) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
            
        Returns:
            bool: –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        """
        if force:
            return True
        
        config = self.get_current_config()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ —á–∞—Å
        requests_last_hour = self.rate_tracker.get_requests_last_hour()
        if requests_last_hour >= config.max_requests_per_hour:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç: {requests_last_hour}/{config.max_requests_per_hour}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
        time_since_last = self.rate_tracker.time_since_last_request()
        if time_since_last < config.cooldown_seconds:
            logger.debug(f"‚è±Ô∏è Cooldown –∞–∫—Ç–∏–≤–µ–Ω: –æ—Å—Ç–∞–ª–æ—Å—å {config.cooldown_seconds - time_since_last:.1f}—Å")
            return False
        
        return True
    
    def wait_for_cooldown(self) -> float:
        """
        –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è cooldown
        
        Returns:
            float: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        config = self.get_current_config()
        time_since_last = self.rate_tracker.time_since_last_request()
        
        if time_since_last >= config.cooldown_seconds:
            return 0.0
        
        wait_time = config.cooldown_seconds - time_since_last
        logger.debug(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ cooldown: {wait_time:.1f}—Å")
        time.sleep(wait_time)
        
        return wait_time
    
    def register_request(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞"""
        self.rate_tracker.add_request()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π 10-–π –∑–∞–ø—Ä–æ—Å
        if self.rate_tracker.total_requests % 10 == 0:
            stats = self.get_usage_stats()
            logger.debug(f"üìä API Stats: {stats['requests_last_hour']}/—á–∞—Å, total: {stats['total_requests']}")
    
    def get_usage_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        config = self.get_current_config()
        
        return {
            'current_mode': self.current_mode.value,
            'mode_description': config.description,
            'mode_emoji': config.emoji,
            'max_requests_per_hour': config.max_requests_per_hour,
            'cooldown_seconds': config.cooldown_seconds,
            'requests_last_hour': self.rate_tracker.get_requests_last_hour(),
            'requests_last_minute': self.rate_tracker.get_requests_last_minute(),
            'total_requests': self.rate_tracker.total_requests,
            'time_since_last_request': round(self.rate_tracker.time_since_last_request(), 1),
            'can_make_request': self.can_make_request(),
            'usage_percentage': round(
                (self.rate_tracker.get_requests_last_hour() / config.max_requests_per_hour) * 100, 1
            )
        }
    
    def get_formatted_stats(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        stats = self.get_usage_stats()
        
        usage_bar = self._create_usage_bar(stats['usage_percentage'])
        
        return f"""üéõÔ∏è **–†–ï–ñ–ò–ú –õ–ò–ú–ò–¢–û–í API**

{stats['mode_emoji']} **–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:** {stats['mode_description']}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
{usage_bar}
‚Ä¢ –ó–∞ —á–∞—Å: {stats['requests_last_hour']}/{stats['max_requests_per_hour']} ({stats['usage_percentage']}%)
‚Ä¢ –ó–∞ –º–∏–Ω—É—Ç—É: {stats['requests_last_minute']}
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤

‚è±Ô∏è **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ Cooldown: {stats['cooldown_seconds']}—Å
‚Ä¢ –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {stats['time_since_last_request']}—Å
‚Ä¢ –ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å: {'‚úÖ –î–∞' if stats['can_make_request'] else '‚ùå –ù–µ—Ç'}"""
    
    def _create_usage_bar(self, percentage: float) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        bar_length = 10
        filled_length = int(bar_length * percentage // 100)
        
        if percentage < 50:
            bar_char = "üü¢"
        elif percentage < 80:
            bar_char = "üü°"
        else:
            bar_char = "üî¥"
        
        bar = bar_char * filled_length + "‚ö™" * (bar_length - filled_length)
        return f"{bar} {percentage}%"
    
    def reload_from_config(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ environment variables"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ª–∏–º–∏—Ç–æ–≤...")
        
        try:
            old_configs = self.limit_configs.copy()
            self.limit_configs = self._load_limit_configs()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            current_config = self.get_current_config()
            old_config = old_configs.get(self.current_mode)
            
            if old_config and (
                old_config.max_requests_per_hour != current_config.max_requests_per_hour or
                old_config.cooldown_seconds != current_config.cooldown_seconds
            ):
                logger.info("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤")
                self._log_current_config()
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return False
    
    def get_mode_recommendations(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ä–µ–∂–∏–º–æ–≤"""
        recommendations = {}
        
        for mode, config in self.limit_configs.items():
            recommendations[mode.value] = f"{config.emoji} {config.description}: {config.recommended_for}"
        
        return recommendations
    
    def auto_adjust_mode(self) -> Optional[LimitMode]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        
        Returns:
            Optional[LimitMode]: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ None –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω—É–∂–Ω–æ
        """
        stats = self.get_usage_stats()
        current_usage = stats['usage_percentage']
        
        # –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏
        if current_usage > 90 and self.current_mode != LimitMode.CONSERVATIVE:
            # –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            return LimitMode.CONSERVATIVE
        elif current_usage < 30 and self.current_mode == LimitMode.CONSERVATIVE:
            # –ü—Ä–∏ –Ω–∏–∑–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            return LimitMode.NORMAL
        elif current_usage < 10 and self.current_mode == LimitMode.NORMAL:
            # –ü—Ä–∏ –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ burst —Ä–µ–∂–∏–º
            return LimitMode.BURST
        
        return None
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        logger.info("üßπ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")
        self.rate_tracker.reset_stats()

# ============================================
# –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø –õ–ò–ú–ò–¢–û–í
# ============================================

def rate_limit(force: bool = False, auto_wait: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ API –∑–∞–ø—Ä–æ—Å–æ–≤
    
    Args:
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        auto_wait: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è cooldown
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            manager = get_limit_manager()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            if not manager.can_make_request(force=force):
                if auto_wait:
                    manager.wait_for_cooldown()
                else:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å {func.__name__} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏–º–∏—Ç–∞–º–∏")
                    return None
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            try:
                result = func(*args, **kwargs)
                manager.register_request()
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
                raise
        
        return wrapper
    return decorator

def critical_request(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ª–∏–º–∏—Ç—ã)"""
    return rate_limit(force=True, auto_wait=False)(func)

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_limit_manager: Optional[LimitManager] = None

def get_limit_manager() -> LimitManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–∏–º–∏—Ç–æ–≤"""
    global _limit_manager
    
    if _limit_manager is None:
        _limit_manager = LimitManager()
    
    return _limit_manager

def init_limit_manager() -> LimitManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–∏–º–∏—Ç–æ–≤"""
    global _limit_manager
    
    _limit_manager = LimitManager()
    logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π LimitManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    return _limit_manager

def get_current_mode() -> LimitMode:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
    return get_limit_manager().get_current_mode()

def set_mode(mode: LimitMode) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
    return get_limit_manager().set_mode(mode)

def set_mode_by_name(mode_name: str) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ –∏–º–µ–Ω–∏"""
    return get_limit_manager().set_mode_by_name(mode_name)

def can_make_request(force: bool = False) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
    return get_limit_manager().can_make_request(force)

def register_request():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    get_limit_manager().register_request()

def get_usage_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    return get_limit_manager().get_usage_stats()

def get_formatted_stats() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return get_limit_manager().get_formatted_stats()

# ============================================
# –ö–û–ú–ê–ù–î–´ –î–õ–Ø TELEGRAM –ë–û–¢–ê
# ============================================

def get_mode_change_commands() -> Dict[str, tuple]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
    return {
        'setmode_conservative': (LimitMode.CONSERVATIVE, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"),
        'setmode_normal': (LimitMode.NORMAL, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º"),
        'setmode_burst': (LimitMode.BURST, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"),
        'setmode_adminburst': (LimitMode.ADMIN_BURST, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º")
    }

def handle_mode_change_command(command: str) -> tuple[bool, str]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
    
    Args:
        command: –ö–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'setmode_burst')
        
    Returns:
        tuple: (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    mode_commands = get_mode_change_commands()
    
    if command not in mode_commands:
        return False, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /{command}"
    
    mode, description = mode_commands[command]
    
    try:
        manager = get_limit_manager()
        old_mode = manager.get_current_mode()
        
        if old_mode == mode:
            return True, f"‚ÑπÔ∏è –†–µ–∂–∏–º {mode.value} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω"
        
        success = manager.set_mode(mode)
        
        if success:
            config = manager.get_current_config()
            return True, f"""‚úÖ **{description}**

{config.emoji} **–ù–æ–≤—ã–π —Ä–µ–∂–∏–º:** {config.description}
üìä **–õ–∏–º–∏—Ç—ã:** {config.max_requests_per_hour}/—á–∞—Å, cooldown {config.cooldown_seconds}—Å
üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:** {config.recommended_for}"""
        else:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∂–∏–º {mode.value}"
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
        return False, f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞"

# ============================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–õ–ê–î–ö–ê
# ============================================

if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LimitManager...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = LimitManager()
    
    # –¢–µ—Å—Ç —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–æ–≤
    print("\nüîÑ –¢–µ—Å—Ç —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–æ–≤:")
    for mode in LimitMode:
        success = manager.set_mode(mode, save_to_db=False)
        print(f"  {mode.value}: {'‚úÖ' if success else '‚ùå'}")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\nüìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    stats = manager.get_usage_stats()
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    # –¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    print("\nüéØ –¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤:")
    
    @rate_limit()
    def test_api_call():
        return "API call successful"
    
    for i in range(3):
        result = test_api_call()
        print(f"  –ó–∞–ø—Ä–æ—Å {i+1}: {result}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(manager.get_formatted_stats())
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")