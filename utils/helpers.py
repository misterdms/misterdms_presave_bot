"""
üîß Helper Functions - Do Presave Reminder Bot v25+
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –æ–±—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import re
import math
from datetime import datetime, timezone
from typing import List, Dict, Any, Optional, Tuple, Union
from urllib.parse import urlparse
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from config import config
from database.models import User, UserKarma, UserRank, Link
from utils.logger import get_logger

logger = get_logger(__name__)

# ============================================
# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
# ============================================

class MessageFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏"""
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    EMOJIS = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        'menu': 'üéõÔ∏è',
        'back': 'üîô',
        'home': 'üè†',
        'info': '‚ÑπÔ∏è',
        'success': '‚úÖ',
        'error': '‚ùå',
        'warning': '‚ö†Ô∏è',
        'loading': 'üîÑ',
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        'stats': 'üìä',
        'user': 'üë§',
        'admin': 'üëë',
        'leaderboard': 'üèÜ',
        'rank': 'üéñÔ∏è',
        'progress': 'üìà',
        
        # –ö–∞—Ä–º–∞ –∏ –∑–≤–∞–Ω–∏—è
        'karma': 'üèÜ',
        'newbie': 'ü•â',
        'hope': 'ü•à', 
        'mega': 'ü•á',
        'ambassador': 'üíé',
        'plus_karma': '‚¨ÜÔ∏è',
        'minus_karma': '‚¨áÔ∏è',
        
        # –°—Å—ã–ª–∫–∏ –∏ –ø—Ä–µ—Å–µ–π–≤—ã
        'link': 'üîó',
        'presave': 'üéµ',
        'music': 'üé∂',
        'spotify': 'üéµ',
        'apple_music': 'üçé',
        'youtube': 'üì∫',
        
        # –§–æ—Ä–º—ã –∏ –∑–∞—è–≤–∫–∏
        'form': 'üìù',
        'claim': '‚úÖ',
        'screenshot': 'üì∏',
        'pending': '‚è≥',
        'approved': '‚úÖ',
        'rejected': '‚ùå',
        
        # –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
        'ai': 'ü§ñ',
        'auto': '‚ö°',
        'gratitude': 'üôè',
        'thank_you': 'üíñ',
        
        # Backup –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ
        'backup': 'üíæ',
        'database': 'üóÉÔ∏è',
        'system': '‚öôÔ∏è',
        'health': 'üíä',
        'time': '‚è∞',
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        'next': '‚ñ∂Ô∏è',
        'prev': '‚óÄÔ∏è',
        'up': '‚¨ÜÔ∏è',
        'down': '‚¨áÔ∏è',
        'refresh': 'üîÑ'
    }
    
    @classmethod
    def get_emoji(cls, key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –ø–æ –∫–ª—é—á—É"""
        return cls.EMOJIS.get(key, 'üìù')
    
    @classmethod
    def format_user_mention(cls, user: User, include_emoji: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        emoji = cls.get_emoji('admin' if user.is_admin else 'user') if include_emoji else ''
        
        if user.username:
            return f"{emoji} @{user.username}"
        else:
            name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            if user.last_name:
                name += f" {user.last_name}"
            return f"{emoji} {name}"
    
    @classmethod
    def format_karma_info(cls, karma_record: UserKarma, show_progress: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä–º–µ"""
        if not karma_record:
            return f"{cls.get_emoji('newbie')} –ù–æ–≤–µ–Ω—å–∫–∏–π (0 –∫–∞—Ä–º—ã)"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        rank_emoji = {
            UserRank.NEWBIE: cls.get_emoji('newbie'),
            UserRank.HOPE: cls.get_emoji('hope'),
            UserRank.MEGA: cls.get_emoji('mega'),
            UserRank.AMBASSADOR: cls.get_emoji('ambassador')
        }.get(karma_record.rank, cls.get_emoji('karma'))
        
        result = f"{rank_emoji} {karma_record.rank.value} ({karma_record.karma_points} –∫–∞—Ä–º—ã)"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        if show_progress and karma_record.rank != UserRank.AMBASSADOR:
            from database.models import get_karma_threshold_for_next_rank
            next_threshold = get_karma_threshold_for_next_rank(karma_record.karma_points)
            
            if next_threshold:
                progress_bar = cls.create_progress_bar(
                    karma_record.karma_points, 
                    next_threshold,
                    length=10
                )
                remaining = next_threshold - karma_record.karma_points
                result += f"\nüìà –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {progress_bar} {remaining} –∫–∞—Ä–º—ã"
        
        return result
    
    @classmethod
    def create_progress_bar(cls, current: int, total: int, length: int = 10, 
                           filled_char: str = '‚ñà', empty_char: str = '‚ñë') -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if total <= 0:
            return empty_char * length
            
        filled_length = int(length * current / total)
        filled_length = min(filled_length, length)  # –ù–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
        
        bar = filled_char * filled_length + empty_char * (length - filled_length)
        percentage = min(int(100 * current / total), 100)
        
        return f"{bar} {percentage}%"
    
    @classmethod
    def format_time_ago(cls, dt: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ "–Ω–∞–∑–∞–¥" """
        if not dt:
            return "–Ω–∏–∫–æ–≥–¥–∞"
            
        now = datetime.now(timezone.utc)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
            
        diff = now - dt
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    
    @classmethod
    def format_file_size(cls, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB"]
        i = int(math.floor(math.log(size_bytes, 1024)))
        p = math.pow(1024, i)
        s = round(size_bytes / p, 2)
        
        return f"{s} {size_names[i]}"
    
    @classmethod
    def format_number(cls, number: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
        if number >= 1000000:
            return f"{number/1000000:.1f}M"
        elif number >= 1000:
            return f"{number/1000:.1f}K"
        else:
            return str(number)
    
    @classmethod
    def truncate_text(cls, text: str, max_length: int = 50) -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"""
        if len(text) <= max_length:
            return text
        return text[:max_length-3] + "..."
    
    @classmethod
    def format_url_domain(cls, url: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ URL"""
        try:
            domain = urlparse(url).netloc.lower()
            
            # –£–±–∏—Ä–∞–µ–º www.
            if domain.startswith('www.'):
                domain = domain[4:]
                
            # –ö—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            domain_mapping = {
                'spotify.com': 'üéµ Spotify',
                'music.apple.com': 'üçé Apple Music',
                'music.youtube.com': 'üì∫ YouTube Music',
                'soundcloud.com': 'üîä SoundCloud',
                'bandcamp.com': 'üé∏ Bandcamp',
                'deezer.com': 'üéß Deezer',
                'tidal.com': 'üåä Tidal',
                'music.amazon.com': 'üì¶ Amazon Music',
                'linktr.ee': 'üîó Linktree',
                'fanlink.to': 'üîó FanLink',
                'smarturl.it': 'üîó SmartURL',
                'ffm.to': 'üîó Feature.fm'
            }
            
            return domain_mapping.get(domain, f"üîó {domain}")
            
        except:
            return "üîó –°—Å—ã–ª–∫–∞"

# ============================================
# –°–û–ó–î–ê–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†
# ============================================

class KeyboardBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram"""
    
    @staticmethod
    def create_inline_keyboard(buttons: List[List[Dict[str, str]]], 
                             row_width: int = 2) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        keyboard = InlineKeyboardMarkup(row_width=row_width)
        
        for row in buttons:
            button_row = []
            for button in row:
                btn = InlineKeyboardButton(
                    text=button['text'],
                    callback_data=button.get('callback_data'),
                    url=button.get('url'),
                    switch_inline_query=button.get('switch_inline_query'),
                    switch_inline_query_current_chat=button.get('switch_inline_query_current_chat')
                )
                button_row.append(btn)
            keyboard.row(*button_row)
        
        return keyboard
    
    @staticmethod
    def create_main_menu_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–ü–ª–∞–Ω 1)"""
        buttons = [
            [{'text': f"{MessageFormatter.get_emoji('stats')} –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 'callback_data': 'menu_mystat'}],
            [{'text': f"{MessageFormatter.get_emoji('leaderboard')} –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –¢–æ–ø-10", 'callback_data': 'menu_leaderboard'}],
            [{'text': f"{MessageFormatter.get_emoji('form')} –î–µ–π—Å—Ç–≤–∏—è", 'callback_data': 'menu_actions'}],
            [{'text': f"{MessageFormatter.get_emoji('stats')} –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 'callback_data': 'menu_analytics'}],
            [{'text': f"{MessageFormatter.get_emoji('system')} –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", 'callback_data': 'menu_diagnostics'}],
            [{'text': f"{MessageFormatter.get_emoji('info')} –ö–æ–º–∞–Ω–¥—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ", 'callback_data': 'menu_help'}]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        if config.ENABLE_PLAN_3_FEATURES:
            ai_button = [{'text': f"{MessageFormatter.get_emoji('ai')} –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", 'callback_data': 'menu_ai'}]
            buttons.insert(-2, ai_button)  # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
    
    @staticmethod
    def create_leaderboard_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤ (–ü–ª–∞–Ω 2)"""
        buttons = [
            [{'text': f"{MessageFormatter.get_emoji('presave')} –ü–æ –ø—Ä–æ—Å—å–±–∞–º –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö", 'callback_data': 'leaderboard_requests'}],
            [{'text': f"{MessageFormatter.get_emoji('karma')} –ü–æ –∫–∞—Ä–º–µ", 'callback_data': 'leaderboard_karma'}],
            [{'text': f"{MessageFormatter.get_emoji('progress')} –ü–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –ü—Ä–æ—Å—å–±–∞-–ö–∞—Ä–º–∞", 'callback_data': 'leaderboard_ratio'}],
            [{'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥", 'callback_data': 'menu_main'}]
        ]
        
        # –ï—Å–ª–∏ –ü–ª–∞–Ω 2 –Ω–µ –≤–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        if not config.ENABLE_PLAN_2_FEATURES:
            buttons = [
                [{'text': f"{MessageFormatter.get_emoji('loading')} –õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 'callback_data': 'under_development'}],
                [{'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥", 'callback_data': 'menu_main'}]
            ]
        
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
    
    @staticmethod
    def create_actions_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π"""
        buttons = []
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã (–ü–ª–∞–Ω 3)
        if config.ENABLE_PLAN_3_FEATURES:
            buttons.extend([
                [{'text': f"{MessageFormatter.get_emoji('presave')} –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–µ—Å–µ–π–≤–µ", 'callback_data': 'action_ask_presave'}],
                [{'text': f"{MessageFormatter.get_emoji('claim')} –ó–∞—è–≤–∏—Ç—å –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–º –ø—Ä–µ—Å–µ–π–≤–µ", 'callback_data': 'action_claim_presave'}],
                [{'text': f"{MessageFormatter.get_emoji('pending')} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã", 'callback_data': 'action_check_approvals'}]
            ])
        else:
            buttons.extend([
                [{'text': f"{MessageFormatter.get_emoji('loading')} –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–µ—Å–µ–π–≤–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", 'callback_data': 'under_development'}],
                [{'text': f"{MessageFormatter.get_emoji('loading')} –ó–∞—è–≤–∏—Ç—å –æ –ø—Ä–µ—Å–µ–π–≤–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", 'callback_data': 'under_development'}],
                [{'text': f"{MessageFormatter.get_emoji('loading')} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", 'callback_data': 'under_development'}]
            ])
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–ü–ª–∞–Ω 1)
        buttons.extend([
            [{'text': f"{MessageFormatter.get_emoji('link')} –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Å—ã–ª–æ–∫", 'callback_data': 'action_last30_links'}],
            [{'text': f"{MessageFormatter.get_emoji('link')} –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫", 'callback_data': 'action_last10_links'}],
            [{'text': f"{MessageFormatter.get_emoji('system')} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", 'callback_data': 'menu_settings'}],
            [{'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥", 'callback_data': 'menu_main'}]
        ])
        
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
    
    @staticmethod
    def create_settings_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        buttons = [
            [{'text': f"{MessageFormatter.get_emoji('system')} –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤", 'callback_data': 'settings_limits'}],
            [{'text': f"{MessageFormatter.get_emoji('refresh')} –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∂–∏–º—ã", 'callback_data': 'settings_reload_modes'}],
            [{'text': f"{MessageFormatter.get_emoji('success')} –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", 'callback_data': 'settings_enable_bot'}],
            [{'text': f"{MessageFormatter.get_emoji('error')} –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", 'callback_data': 'settings_disable_bot'}],
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        if config.ENABLE_PLAN_3_FEATURES:
            buttons.append([{'text': f"{MessageFormatter.get_emoji('form')} –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", 'callback_data': 'settings_edit_reminder'}])
            buttons.append([{'text': f"{MessageFormatter.get_emoji('error')} –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã", 'callback_data': 'settings_clear_approvals'}])
            buttons.append([{'text': f"{MessageFormatter.get_emoji('error')} –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å—å–±", 'callback_data': 'settings_clear_asks'}])
        
        buttons.extend([
            [{'text': f"{MessageFormatter.get_emoji('error')} –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Å—ã–ª–æ–∫", 'callback_data': 'settings_clear_links'}],
            [{'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥", 'callback_data': 'menu_actions'}]
        ])
        
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
    
    @staticmethod
    def create_limits_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Ä–µ–∂–∏–º–æ–≤ –ª–∏–º–∏—Ç–æ–≤"""
        buttons = [
            [{'text': f"{MessageFormatter.get_emoji('down')} Conservative", 'callback_data': 'limits_conservative'}],
            [{'text': f"{MessageFormatter.get_emoji('user')} Normal", 'callback_data': 'limits_normal'}],
            [{'text': f"{MessageFormatter.get_emoji('up')} Burst (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", 'callback_data': 'limits_burst'}],
            [{'text': f"{MessageFormatter.get_emoji('admin')} Admin Burst", 'callback_data': 'limits_admin_burst'}],
            [{'text': f"{MessageFormatter.get_emoji('info')} –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º", 'callback_data': 'limits_current'}],
            [{'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥", 'callback_data': 'menu_settings'}]
        ]
        
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
    
    @staticmethod
    def create_back_button(callback_data: str = 'menu_main') -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" """
        buttons = [
            [{'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥", 'callback_data': callback_data}]
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
    
    @staticmethod
    def create_pagination_keyboard(current_page: int, total_pages: int, 
                                  callback_prefix: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append({
                'text': f"{MessageFormatter.get_emoji('prev')} –ü—Ä–µ–¥.",
                'callback_data': f"{callback_prefix}_page_{current_page - 1}"
            })
        
        nav_buttons.append({
            'text': f"{current_page}/{total_pages}",
            'callback_data': f"{callback_prefix}_page_info"
        })
        
        if current_page < total_pages:
            nav_buttons.append({
                'text': f"–°–ª–µ–¥. {MessageFormatter.get_emoji('next')}",
                'callback_data': f"{callback_prefix}_page_{current_page + 1}"
            })
        
        buttons.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.append([{
            'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥",
            'callback_data': 'menu_main'
        }])
        
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=3)

# ============================================
# –ü–ê–†–°–ò–ù–ì –ò –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î
# ============================================

class CommandParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    
    @staticmethod
    def parse_karma_command(text: str) -> Optional[Tuple[str, int]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã /karma @username +/-—á–∏—Å–ª–æ"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω: /karma @username +5 –∏–ª–∏ /karma @username -3
        pattern = r'/karma\s+@?(\w+)\s+([\+\-]?\d+)'
        match = re.match(pattern, text.strip())
        
        if match:
            username = match.group(1)
            try:
                karma_change = int(match.group(2))
                return username, karma_change
            except ValueError:
                pass
        
        return None
    
    @staticmethod
    def parse_ratio_command(text: str) -> Optional[Tuple[str, int, int]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã /ratiostat @username 15:12"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω: /ratiostat @username 15:12 –∏–ª–∏ 15-12
        pattern = r'/ratiostat\s+@?(\w+)\s+(\d+)[:\-/](\d+)'
        match = re.match(pattern, text.strip())
        
        if match:
            username = match.group(1)
            try:
                requests = int(match.group(2))
                karma = int(match.group(3))
                return username, requests, karma
            except ValueError:
                pass
        
        return None
    
    @staticmethod
    def parse_user_query(text: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ —Å @username"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–∞ /linksby @username
        patterns = [
            r'/\w+\s+@?(\w+)',  # /linksby @username
            r'@(\w+)',          # –ø—Ä–æ—Å—Ç–æ @username
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text.strip())
            if match:
                return match.group(1)
        
        return None
    
    @staticmethod
    def extract_links_from_text(text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è URL
        url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        
        return re.findall(url_pattern, text)
    
    @staticmethod
    def is_mention_bot(text: str, bot_username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if not text or not bot_username:
            return False
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        bot_username = bot_username.lstrip('@')
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        pattern = rf'@{re.escape(bot_username)}'
        return bool(re.search(pattern, text, re.IGNORECASE))

# ============================================
# –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò –ò –î–ê–ù–ù–´–ú–ò
# ============================================

class UserHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    @staticmethod
    def get_user_display_name(user: User) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user.username:
            return f"@{user.username}"
        
        name_parts = []
        if user.first_name:
            name_parts.append(user.first_name)
        if user.last_name:
            name_parts.append(user.last_name)
        
        return " ".join(name_parts) if name_parts else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user.telegram_id}"
    
    @staticmethod
    def is_user_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in config.ADMIN_IDS
    
    @staticmethod
    def format_user_stats_message(stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not stats.get('user_info'):
            return f"{MessageFormatter.get_emoji('error')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        user_info = stats['user_info']
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        emoji = MessageFormatter.get_emoji('admin' if user_info['is_admin'] else 'user')
        username = user_info['username'] or '–±–µ–∑ username'
        result = f"{emoji} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        result += f"{MessageFormatter.get_emoji('link')} **–°—Å—ã–ª–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:** {stats['links_count']}\n"
        
        # –ö–∞—Ä–º–∞ (–ü–ª–∞–Ω 2)
        if stats.get('karma_info'):
            karma_info = stats['karma_info']
            result += f"{MessageFormatter.get_emoji('karma')} **–ö–∞—Ä–º–∞:** {karma_info['karma_points']}\n"
            result += f"{MessageFormatter.get_emoji('rank')} **–ó–≤–∞–Ω–∏–µ:** {karma_info['rank']}\n"
            
            if karma_info['progress_to_next']:
                progress_bar = MessageFormatter.create_progress_bar(
                    karma_info['karma_points'],
                    karma_info['next_rank_threshold'] or karma_info['karma_points']
                )
                result += f"{MessageFormatter.get_emoji('progress')} **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_bar}\n"
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–æ–ø–∏–∫–∞–º
        if stats.get('message_stats'):
            result += f"\n{MessageFormatter.get_emoji('stats')} **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–æ–ø–∏–∫–∞–º:**\n"
            for thread_id, thread_stats in stats['message_stats'].items():
                result += f"‚Ä¢ –¢–æ–ø–∏–∫ {thread_id}: {thread_stats['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        # –ò–ò –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–ü–ª–∞–Ω 3)
        if stats.get('ai_interactions', 0) > 0:
            result += f"{MessageFormatter.get_emoji('ai')} **–ò–ò –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:** {stats['ai_interactions']}\n"
        
        # –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if user_info.get('created_at'):
            created_time = MessageFormatter.format_time_ago(user_info['created_at'])
            result += f"\n{MessageFormatter.get_emoji('time')} **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {created_time}\n"
        
        return result

class DataHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
    
    @staticmethod
    def format_links_list(links: List[Link], max_links: int = 10) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫"""
        if not links:
            return f"{MessageFormatter.get_emoji('info')} –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        result = f"{MessageFormatter.get_emoji('link')} **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏:**\n\n"
        
        for i, link in enumerate(links[:max_links], 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω
            domain = MessageFormatter.format_url_domain(link.url)
            
            # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            time_ago = MessageFormatter.format_time_ago(link.created_at)
            
            # –ê–≤—Ç–æ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
            author = ""
            if hasattr(link, 'user') and link.user:
                author = f" –æ—Ç {UserHelper.get_user_display_name(link.user)}"
            
            result += f"{i}. {domain}{author} ({time_ago})\n"
        
        if len(links) > max_links:
            result += f"\n... –∏ –µ—â—ë {len(links) - max_links} —Å—Å—ã–ª–æ–∫"
        
        return result
    
    @staticmethod
    def format_leaderboard(data: List[Tuple], leaderboard_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
        if not data:
            return f"{MessageFormatter.get_emoji('info')} –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        headers = {
            'karma': f"{MessageFormatter.get_emoji('karma')} **–¢–æ–ø –ø–æ –∫–∞—Ä–º–µ:**",
            'requests': f"{MessageFormatter.get_emoji('presave')} **–¢–æ–ø –ø–æ –ø—Ä–æ—Å—å–±–∞–º –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö:**",
            'ratio': f"{MessageFormatter.get_emoji('progress')} **–¢–æ–ø –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é:**"
        }
        
        result = headers.get(leaderboard_type, f"{MessageFormatter.get_emoji('leaderboard')} **–†–µ–π—Ç–∏–Ω–≥:**")
        result += "\n\n"
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        position_emojis = ['ü•á', 'ü•à', 'ü•â'] + ['üèÖ'] * 7
        
        for i, item in enumerate(data, 1):
            emoji = position_emojis[i-1] if i <= len(position_emojis) else 'üìç'
            
            if leaderboard_type == 'karma' and len(item) >= 2:
                user, karma_record = item
                username = UserHelper.get_user_display_name(user)
                value = f"{karma_record.karma_points} –∫–∞—Ä–º—ã"
                rank = karma_record.rank.value
                result += f"{emoji} {i}. {username} - {value} ({rank})\n"
                
            elif leaderboard_type == 'requests' and len(item) >= 2:
                user, count = item
                username = UserHelper.get_user_display_name(user)
                result += f"{emoji} {i}. {username} - {count} –ø—Ä–æ—Å—å–±\n"
                
            else:
                # –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
                result += f"{emoji} {i}. {item}\n"
        
        return result
    
    @staticmethod
    def validate_and_clean_data(data: Any, data_type: str) -> Any:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if data_type == 'username':
            if isinstance(data, str):
                return data.lstrip('@').strip()
        elif data_type == 'karma_change':
            if isinstance(data, (int, str)):
                try:
                    change = int(data)
                    return max(-50, min(50, change))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                except ValueError:
                    pass
        elif data_type == 'url':
            if isinstance(data, str) and data.startswith(('http://', 'https://')):
                return data.strip()
        
        return None

# ============================================
# –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò –ò –ú–ï–î–ò–ê
# ============================================

class FileHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    
    @staticmethod
    def is_image_file(file_type: Optional[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        if not file_type:
            return False
        
        image_types = ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
        return file_type.lower() in image_types
    
    @staticmethod
    def generate_safe_filename(original_name: str, max_length: int = 100) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        if not original_name:
            return f"file_{int(datetime.now().timestamp())}"
        
        # –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        safe_name = re.sub(r'[<>:"/\\|?*]', '_', original_name)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(safe_name) > max_length:
            name_part, ext = safe_name.rsplit('.', 1) if '.' in safe_name else (safe_name, '')
            safe_name = name_part[:max_length-len(ext)-1] + '.' + ext if ext else name_part[:max_length]
        
        return safe_name

# ============================================
# –£–¢–ò–õ–ò–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ============================================

class ConfigHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    @staticmethod
    def get_current_limit_mode() -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        from database.manager import get_database_manager
        
        try:
            db = get_database_manager()
            mode = db.get_setting('current_limit_mode')
            return mode or config.DEFAULT_LIMIT_MODE
        except:
            return config.DEFAULT_LIMIT_MODE
    
    @staticmethod
    def format_limit_mode_info(mode: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∂–∏–º–µ –ª–∏–º–∏—Ç–æ–≤"""
        limit_config = config.get_limit_config(mode)
        
        mode_descriptions = {
            'CONSERVATIVE': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ API',
            'NORMAL': '–û–±—ã—á–Ω—ã–π - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º',
            'BURST': 'Burst - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)',
            'ADMIN_BURST': 'Admin Burst - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤'
        }
        
        description = mode_descriptions.get(mode, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º')
        
        return f"{MessageFormatter.get_emoji('system')} **–†–µ–∂–∏–º:** {mode}\n" \
               f"{MessageFormatter.get_emoji('info')} **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n" \
               f"{MessageFormatter.get_emoji('stats')} **–õ–∏–º–∏—Ç:** {limit_config['max_hour']} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å\n" \
               f"{MessageFormatter.get_emoji('time')} **Cooldown:** {limit_config['cooldown']} —Å–µ–∫"
    
    @staticmethod
    def is_bot_enabled() -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç"""
        from database.manager import get_database_manager
        
        try:
            db = get_database_manager()
            enabled = db.get_setting('bot_enabled')
            return enabled == 'true' if enabled else True
        except:
            return True

# ============================================
# –°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–† (–ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –ü–õ–ê–ù 1)
# ============================================

class SystemMonitor:
    """–ó–∞–≥–ª—É—à–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è Plan 1"""
    
    def __init__(self):
        self.start_time = datetime.now(timezone.utc)
    
    def get_system_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        return {
            'status': 'ok',
            'uptime': (datetime.now(timezone.utc) - self.start_time).total_seconds(),
            'memory_usage': 0,
            'cpu_usage': 0
        }
    
    def is_healthy(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        return True

# ============================================
# –≠–ö–°–ü–û–†–¢
# ============================================

__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    'MessageFormatter', 'KeyboardBuilder', 'CommandParser', 
    'UserHelper', 'DataHelper', 'FileHelper', 'ConfigHelper'
]

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Helper Functions...")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    progress_bar = MessageFormatter.create_progress_bar(25, 50, 10)
    print(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: {progress_bar}")
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥
    karma_result = CommandParser.parse_karma_command("/karma @testuser +5")
    print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä–º—ã: {karma_result}")
    
    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    links = CommandParser.extract_links_from_text("–ü–æ—Å–ª—É—à–∞–π—Ç–µ https://spotify.com/track/123 –∏ https://music.apple.com/track/456")
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫: {len(links)} –Ω–∞–π–¥–µ–Ω–æ")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞
    domain = MessageFormatter.format_url_domain("https://music.apple.com/us/album/test")
    print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞: {domain}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = KeyboardBuilder.create_main_menu_keyboard()
    print(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤")
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã helpers –ø—Ä–æ–π–¥–µ–Ω—ã!")
