import logging
import re
import sqlite3
import time
import threading
from datetime import datetime, timedelta
from typing import Optional
from http.server import HTTPServer, BaseHTTPRequestHandler
import socketserver
import json
import ssl
import os

import telebot
from telebot import types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))  # -1001992546193
THREAD_ID = int(os.getenv('THREAD_ID'))  # 10
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x]
DEFAULT_REMINDER = os.getenv('REMINDER_TEXT', 'üéß –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤—ã—à–µ! ‚ô•Ô∏è')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
MAX_RESPONSES_PER_HOUR = 10
MIN_COOLDOWN_SECONDS = 30
BATCH_RESPONSE_WINDOW = 300  # 5 –º–∏–Ω—É—Ç
RESPONSE_DELAY = 3

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_HOST = "misterdms-presave-bot.onrender.com"  # –í–∞—à Render URL
WEBHOOK_PORT = int(os.getenv('PORT', 10000))
WEBHOOK_PATH = f"/{BOT_TOKEN}/"
WEBHOOK_URL = f"https://{WEBHOOK_HOST}{WEBHOOK_PATH}"

# Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
URL_PATTERN = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Database:
    def __init__(self, db_path: str = "bot.db"):
        self.db_path = db_path
        self.lock = threading.Lock()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å—Å—ã–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_links (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    total_links INTEGER DEFAULT 0,
                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS link_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    link_url TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    message_id INTEGER
                )
            ''')
            
            # –õ–æ–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_responses (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    response_text TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_activity (
                    id INTEGER PRIMARY KEY,
                    is_active BOOLEAN DEFAULT 1,
                    responses_today INTEGER DEFAULT 0,
                    last_response_time TIMESTAMP,
                    last_reset_date DATE DEFAULT CURRENT_DATE
                )
            ''')
            
            # –õ–∏–º–∏—Ç—ã –∏ cooldown
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS rate_limits (
                    id INTEGER PRIMARY KEY,
                    hourly_responses INTEGER DEFAULT 0,
                    last_hour_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    cooldown_until TIMESTAMP
                )
            ''')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            cursor.execute('INSERT OR IGNORE INTO bot_activity (id, is_active) VALUES (1, 1)')
            cursor.execute('INSERT OR IGNORE INTO rate_limits (id) VALUES (1)')
            cursor.execute(
                'INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)',
                ('reminder_text', DEFAULT_REMINDER)
            )
            
            conn.commit()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def add_user_links(self, user_id: int, username: str, links: list, message_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                INSERT OR REPLACE INTO user_links (user_id, username, total_links, last_updated)
                VALUES (?, ?, COALESCE((SELECT total_links FROM user_links WHERE user_id = ?), 0) + ?, CURRENT_TIMESTAMP)
            ''', (user_id, username, user_id, len(links)))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            for link in links:
                cursor.execute('''
                    INSERT INTO link_history (user_id, link_url, message_id)
                    VALUES (?, ?, ?)
                ''', (user_id, link, message_id))
            
            conn.commit()
            conn.close()

    def log_bot_response(self, user_id: int, response_text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO bot_responses (user_id, response_text)
                VALUES (?, ?)
            ''', (user_id, response_text))
            conn.commit()
            conn.close()

    def is_bot_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT is_active FROM bot_activity WHERE id = 1')
            result = cursor.fetchone()
            conn.close()
            return bool(result[0]) if result else False

    def set_bot_active(self, active: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('UPDATE bot_activity SET is_active = ? WHERE id = 1', (active,))
            conn.commit()
            conn.close()

    def can_send_response(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT hourly_responses, last_hour_reset, cooldown_until
                FROM rate_limits WHERE id = 1
            ''')
            result = cursor.fetchone()
            
            if not result:
                conn.close()
                return False, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"
            
            hourly_responses, last_hour_reset, cooldown_until = result
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            if cooldown_until:
                cooldown_time = datetime.fromisoformat(cooldown_until)
                if now < cooldown_time:
                    remaining = int((cooldown_time - now).total_seconds())
                    conn.close()
                    return False, f"Cooldown –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫"
            
            # –°–±—Ä–æ—Å –ø–æ—á–∞—Å–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
            if last_hour_reset:
                last_reset = datetime.fromisoformat(last_hour_reset)
                if now - last_reset > timedelta(hours=1):
                    cursor.execute('''
                        UPDATE rate_limits 
                        SET hourly_responses = 0, last_hour_reset = ?
                        WHERE id = 1
                    ''', (now.isoformat(),))
                    hourly_responses = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
            if hourly_responses >= MAX_RESPONSES_PER_HOUR:
                conn.close()
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {MAX_RESPONSES_PER_HOUR} –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å"
            
            conn.close()
            return True, "OK"

    def update_response_limits(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            now = datetime.now()
            cooldown_until = now + timedelta(seconds=MIN_COOLDOWN_SECONDS)
            
            cursor.execute('''
                UPDATE rate_limits 
                SET hourly_responses = hourly_responses + 1,
                    cooldown_until = ?
                WHERE id = 1
            ''', (cooldown_until.isoformat(),))
            
            conn.commit()
            conn.close()

    def get_user_stats(self, username: str = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if username:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    SELECT username, total_links, last_updated
                    FROM user_links 
                    WHERE username = ? AND total_links > 0
                ''', (username.replace('@', ''),))
                result = cursor.fetchone()
                conn.close()
                return result
            else:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cursor.execute('''
                    SELECT username, total_links, last_updated
                    FROM user_links 
                    WHERE total_links > 0
                    ORDER BY total_links DESC
                ''')
                result = cursor.fetchall()
                conn.close()
                return result

    def get_bot_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
            cursor.execute('''
                SELECT hourly_responses, cooldown_until FROM rate_limits WHERE id = 1
            ''')
            limits = cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            cursor.execute('''
                SELECT is_active, last_response_time FROM bot_activity WHERE id = 1
            ''')
            activity = cursor.fetchone()
            
            # –°—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute('''
                SELECT COUNT(*) FROM bot_responses 
                WHERE DATE(timestamp) = DATE('now')
            ''')
            today_responses = cursor.fetchone()
            
            conn.close()
            
            return {
                'hourly_responses': limits[0] if limits else 0,
                'hourly_limit': MAX_RESPONSES_PER_HOUR,
                'cooldown_until': limits[1] if limits else None,
                'is_active': bool(activity[0]) if activity else False,
                'last_response': activity[1] if activity else None,
                'today_responses': today_responses[0] if today_responses else 0
            }

    def clear_link_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫ (—Å—á—ë—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è)"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('DELETE FROM link_history')
            conn.commit()
            conn.close()

    def get_reminder_text(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT value FROM settings WHERE key = ?', ('reminder_text',))
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else DEFAULT_REMINDER

    def set_reminder_text(self, text: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)
            ''', ('reminder_text', text))
            conn.commit()
            conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS

def extract_links(text: str) -> list:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return URL_PATTERN.findall(text)

def safe_send_message(chat_id: int, text: str, message_thread_id: int = None, reply_to_message_id: int = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        time.sleep(RESPONSE_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        
        if message_thread_id:
            # –ï—Å–ª–∏ –µ—Å—Ç—å thread_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫
            bot.send_message(
                chat_id=chat_id, 
                text=text, 
                message_thread_id=message_thread_id,
                reply_to_message_id=reply_to_message_id
            )
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if reply_to_message_id:
                bot.reply_to(reply_to_message_id, text)
            else:
                bot.send_message(chat_id, text)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

# Webhook —Å–µ—Ä–≤–µ—Ä
class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
        if self.path == WEBHOOK_PATH:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                
                # –ü–∞—Ä—Å–∏–º JSON
                update_data = json.loads(post_data.decode('utf-8'))
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
                update = telebot.types.Update.de_json(update_data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
                if update:
                    bot.process_new_updates([update])
                
                # –û—Ç–≤–µ—á–∞–µ–º Telegram
                self.send_response(200)
                self.end_headers()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                self.send_response(500)
                self.end_headers()
        
        elif self.path == '/' or self.path == '/health':
            # Health check
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({
                "status": "healthy", 
                "service": "telegram-bot",
                "webhook_url": WEBHOOK_URL,
                "bot": "@misterdms_presave_bot"
            })
            self.wfile.write(response.encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/' or self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({
                "status": "healthy", 
                "service": "telegram-bot",
                "webhook_url": WEBHOOK_URL,
                "bot": "@misterdms_presave_bot"
            })
            self.wfile.write(response.encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º HTTP –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        pass

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

@bot.message_handler(commands=['start'])
def cmd_start(message):
    if not is_admin(message.from_user.id):
        return
    
    bot.reply_to(message, """
ü§ñ Presave Reminder Bot –∑–∞–ø—É—â–µ–Ω!

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ –≥—Ä—É–ø–ø—ã.
    """)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    if not is_admin(message.from_user.id):
        return
    
    help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

üëë –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/help ‚Äî —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/activate ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ
/deactivate ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ  
/stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/linkstats ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–∞–º
/topusers ‚Äî —Ç–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö
/userstat @username ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/setmessage —Ç–µ–∫—Å—Ç ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/clearhistory ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Å—ã–ª–æ–∫ (—Å—á—ë—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
/botstat ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç–æ–≤ –±–æ—Ç–∞
/test_regex ‚Äî —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫

‚ÑπÔ∏è –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤
üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –º–∞–∫—Å–∏–º—É–º 10 –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å, –ø–∞—É–∑–∞ 30 —Å–µ–∫ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
    """
    
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['activate'])
def cmd_activate(message):
    if not is_admin(message.from_user.id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –Ω—É–∂–Ω–æ–º —Ç–æ–ø–∏–∫–µ
    if message.chat.id != GROUP_ID or message.message_thread_id != THREAD_ID:
        bot.reply_to(message, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤")
        return
    
    db.set_bot_active(True)
    
    welcome_text = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö!

‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ç–æ–ø–∏–∫–µ "–ü—Ä–µ—Å–µ–π–≤—ã"
üéØ –ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /help
üõë –û—Ç–∫–ª—é—á–∏—Ç—å: /deactivate

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üéµ
    """
    
    bot.reply_to(message, welcome_text)
    logger.info(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

@bot.message_handler(commands=['deactivate'])
def cmd_deactivate(message):
    if not is_admin(message.from_user.id):
        return
    
    db.set_bot_active(False)
    bot.reply_to(message, "üõë –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate")
    logger.info(f"–ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

@bot.message_handler(commands=['botstat'])
def cmd_bot_stat(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        stats = db.get_bot_stats()
        
        # –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        cooldown_text = "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≤–µ—Ç—É"
        if stats['cooldown_until']:
            cooldown_time = datetime.fromisoformat(stats['cooldown_until'])
            now = datetime.now()
            if now < cooldown_time:
                remaining = int((cooldown_time - now).total_seconds())
                cooldown_text = f"–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑: {remaining} —Å–µ–∫"
        
        status_emoji = "üü¢" if stats['is_active'] else "üî¥"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if stats['is_active'] else "–û—Ç–∫–ª—é—á–µ–Ω"
        
        stat_text = f"""
ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:

{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}
‚ö° –û—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å: {stats['hourly_responses']}/{stats['hourly_limit']}
üìä –û—Ç–≤–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_responses']}
‚è±Ô∏è {cooldown_text}
üîó Webhook: –∞–∫—Ç–∏–≤–µ–Ω

‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {'üü° –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É' if stats['hourly_responses'] >= 8 else '‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ'}
        """
        
        bot.reply_to(message, stat_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['linkstats'])
def cmd_link_stats(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        users = db.get_user_stats()
        
        if not users:
            bot.reply_to(message, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Å—ã–ª–∫–∞–º–∏")
            return
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º:\n\n"
        
        for i, (username, total_links, last_updated) in enumerate(users[:10], 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ
            if total_links >= 31:
                rank = "üíé"
            elif total_links >= 16:
                rank = "ü•á"
            elif total_links >= 6:
                rank = "ü•à"
            else:
                rank = "ü•â"
            
            stats_text += f"{rank} {i}. @{username} ‚Äî {total_links} —Å—Å—ã–ª–æ–∫\n"
        
        bot.reply_to(message, stats_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['topusers'])
def cmd_top_users(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        users = db.get_user_stats()
        
        if not users:
            bot.reply_to(message, "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        top_text = "üèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö:\n\n"
        
        for i, (username, total_links, last_updated) in enumerate(users[:5], 1):
            medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
            medal = medals[i-1] if i <= 5 else "‚ñ´Ô∏è"
            
            top_text += f"{medal} @{username} ‚Äî {total_links} —Å—Å—ã–ª–æ–∫\n"
        
        bot.reply_to(message, top_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞")

@bot.message_handler(commands=['userstat'])
def cmd_user_stat(message):
    if not is_admin(message.from_user.id):
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ username: /userstat @username")
        return
    
    username = args[1].replace('@', '')
    
    try:
        user_data = db.get_user_stats(username)
        
        if not user_data:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        username, total_links, last_updated = user_data
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ
        if total_links >= 31:
            rank = "üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä"
        elif total_links >= 16:
            rank = "ü•á –ü—Ä–æ–º–æ—É—Ç–µ—Ä"
        elif total_links >= 6:
            rank = "ü•à –ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            rank = "ü•â –ù–∞—á–∏–Ω–∞—é—â–∏–π"
        
        stat_text = f"""
üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:

üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_updated[:16]}
üèÜ –ó–≤–∞–Ω–∏–µ: {rank}
        """
        
        bot.reply_to(message, stat_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(commands=['setmessage'])
def cmd_set_message(message):
    if not is_admin(message.from_user.id):
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current_text = db.get_reminder_text()
        bot.reply_to(message, f"üìù –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{current_text}\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: /setmessage –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
        return
    
    new_text = args[1]
    
    try:
        db.set_reminder_text(new_text)
        bot.reply_to(message, f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω:\n\n{new_text}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")

@bot.message_handler(commands=['clearhistory'])
def cmd_clear_history(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        db.clear_link_history()
        bot.reply_to(message, "üßπ –ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫ –æ—á–∏—â–µ–Ω–∞ (–æ–±—â–∏–µ —Å—á—ë—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

@bot.message_handler(commands=['test_regex'])
def cmd_test_regex(message):
    if not is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "üß™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ: /test_regex –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
        return
    
    test_text = args[1]
    links = extract_links(test_text)
    
    result_text = f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\nüìù –¢–µ–∫—Å—Ç: {test_text}\n\n"
    
    if links:
        result_text += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}\n"
        for i, link in enumerate(links, 1):
            result_text += f"{i}. {link}\n"
        result_text += "\nüëç –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    else:
        result_text += "‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\nüëé –ë–æ—Ç –ù–ï –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    bot.reply_to(message, result_text)

# === –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ===

@bot.message_handler(func=lambda message: message.chat.id == GROUP_ID and message.message_thread_id == THREAD_ID)
def handle_topic_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤"""
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.text and message.text.startswith('/'):
        return
    
    if message.from_user.is_bot:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    if not db.is_bot_active():
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = message.text or message.caption or ""
    links = extract_links(message_text)
    
    if not links:
        return  # –ù–µ—Ç —Å—Å—ã–ª–æ–∫ - –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    can_respond, reason = db.can_send_response()
    
    if not can_respond:
        logger.warning(f"–û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason}")
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É
        username = message.from_user.username or f"user_{message.from_user.id}"
        db.add_user_links(
            user_id=message.from_user.id,
            username=username,
            links=links,
            message_id=message.message_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_text = db.get_reminder_text()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        success = safe_send_message(
            chat_id=GROUP_ID,
            text=reminder_text,
            message_thread_id=THREAD_ID,
            reply_to_message_id=message.message_id
        )
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
            db.update_response_limits()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            db.log_bot_response(message.from_user.id, reminder_text)
            
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} ({len(links)} —Å—Å—ã–ª–æ–∫)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        bot.remove_webhook()
        logger.info("‚úÖ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        bot.set_webhook(url=WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.init_db()
        
        logger.info("ü§ñ Presave Reminder Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"üë• –ì—Ä—É–ø–ø–∞: {GROUP_ID}")
        logger.info(f"üìã –¢–æ–ø–∏–∫: {THREAD_ID}")
        logger.info(f"üëë –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        if setup_webhook():
            logger.info("üîó Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook")
            return
        
        # –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
        with socketserver.TCPServer(("", WEBHOOK_PORT), WebhookHandler) as httpd:
            logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEBHOOK_PORT}")
            logger.info(f"üîó URL: {WEBHOOK_URL}")
            httpd.serve_forever()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º webhook –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        try:
            bot.remove_webhook()
            logger.info("üßπ Webhook –æ—á–∏—â–µ–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
        except:
            pass
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
