# Do Presave Reminder Bot by Mister DMS v24.19 - Menu Fixes
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é: —É–ø—Ä–æ—â–µ–Ω–∏–µ callback handler –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

# ================================
# 1. –ò–ú–ü–û–†–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò
# ================================

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
import os
import logging
import sqlite3
import threading
import time
import json
import re
import urllib.parse
import urllib.request
import urllib.error
import html
import functools
import base64
import traceback
import signal
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Union
from dataclasses import dataclass
from enum import Enum
from collections import defaultdict
from contextlib import contextmanager
from queue import Queue
from http.server import HTTPServer, BaseHTTPRequestHandler
import socketserver

# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–∏–∑ requirements.txt)
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# ================================
# 2. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
# ================================

# –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
REQUIRED_VARS = ["BOT_TOKEN", "GROUP_ID", "THREAD_ID", "ADMIN_IDS"]

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID", "-1002811959953"))
THREAD_ID = int(os.getenv("THREAD_ID", "3"))
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]

# –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ (–∏–∑ Environment_Variables.md)
CONSERVATIVE_MAX_HOUR = int(os.getenv("CONSERVATIVE_MAX_HOUR", "60"))
CONSERVATIVE_COOLDOWN = int(os.getenv("CONSERVATIVE_COOLDOWN", "60"))
NORMAL_MAX_HOUR = int(os.getenv("NORMAL_MAX_HOUR", "180"))
NORMAL_COOLDOWN = int(os.getenv("NORMAL_COOLDOWN", "20"))
BURST_MAX_HOUR = int(os.getenv("BURST_MAX_HOUR", "600"))
BURST_COOLDOWN = int(os.getenv("BURST_COOLDOWN", "6"))
ADMIN_BURST_MAX_HOUR = int(os.getenv("ADMIN_BURST_MAX_HOUR", "1200"))
ADMIN_BURST_COOLDOWN = int(os.getenv("ADMIN_BURST_COOLDOWN", "3"))

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
RESPONSE_DELAY = int(os.getenv("RESPONSE_DELAY", "3"))
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "your_secret")
DB_POOL_SIZE = int(os.getenv("DB_POOL_SIZE", "5"))

# –ß–µ—Ç–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è –∏–∑ –≥–∞–π–¥–∞
REMINDER_TEXT = os.getenv("REMINDER_TEXT", "üéß –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –Ω–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤—ã—à–µ! ‚ô•Ô∏è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
MAX_SCREENSHOT_SIZE = 10 * 1024 * 1024  # 10MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
SCREENSHOT_TTL_DAYS = 7  # –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è 7 –¥–Ω–µ–π
ALLOWED_PHOTO_FORMATS = ['jpg', 'jpeg', 'png', 'webp']  # Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
MAX_SCREENSHOTS_PER_CLAIM = 10  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render.com
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
LOG_FORMAT = os.getenv("LOG_FORMAT", "structured")  # structured –∏–ª–∏ simple
ENABLE_PERFORMANCE_LOGS = os.getenv("ENABLE_PERFORMANCE_LOGS", "true").lower() == "true"
CORRELATION_ID_HEADER = "X-Request-ID"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º Render.com
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è Render.com"""
    
    if LOG_FORMAT == "structured":
        # JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ Render.com
        
        class StructuredFormatter(logging.Formatter):
            def format(self, record):
                log_entry = {
                    "timestamp": self.formatTime(record),
                    "level": record.levelname,
                    "logger": record.name,
                    "message": record.getMessage(),
                    "module": record.module,
                    "function": record.funcName,
                    "line": record.lineno,
                    "process_id": os.getpid(),
                    "thread_id": threading.current_thread().ident
                }
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(record, 'user_id'):
                    log_entry['user_id'] = record.user_id
                if hasattr(record, 'correlation_id'):
                    log_entry['correlation_id'] = record.correlation_id
                if hasattr(record, 'performance_ms'):
                    log_entry['performance_ms'] = record.performance_ms
                if hasattr(record, 'client_ip'):
                    log_entry['client_ip'] = record.client_ip
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                if record.exc_info:
                    log_entry['exception'] = self.formatException(record.exc_info)
                
                return json.dumps(log_entry, ensure_ascii=False)
        
        handler = logging.StreamHandler()
        handler.setFormatter(StructuredFormatter())
        
    else:
        # –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        format_string = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        logging.basicConfig(
            level=getattr(logging, LOG_LEVEL),
            format=format_string,
            handlers=[logging.StreamHandler()]
        )
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, LOG_LEVEL))
    root_logger.handlers.clear()
    root_logger.addHandler(handler)
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–ª–∏—à–Ω–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤ –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)

setup_logging()
logger = logging.getLogger(__name__)

# ================================
# 3. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ================================

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DeprecationWarning –¥–ª—è SQLite datetime –≤ Python 3.12+
import sqlite3
from datetime import datetime

def adapt_datetime(dt):
    return dt.isoformat()

def convert_datetime(s):
    return datetime.fromisoformat(s.decode())

sqlite3.register_adapter(datetime, adapt_datetime)
sqlite3.register_converter("datetime", convert_datetime)

# ================================
# 4. –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–ò–ú–ò–¢–û–í
# ================================

class LimitMode(Enum):
    CONSERVATIVE = "conservative"
    NORMAL = "normal" 
    BURST = "burst"
    ADMIN_BURST = "admin_burst"

class UserRank(Enum):
    NEWBIE = "ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π"
    RELIABLE = "ü•à –ù–∞–¥–µ–∂–Ω—ã–π –ø—Ä–µ—Å–µ–π–≤–µ—Ä"
    MEGA = "ü•á –ú–µ–≥–∞-—á–µ–ª–æ–≤–µ—á–∏—â–µ"
    AMBASSADOR = "üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ"

class UserState(Enum):
    IDLE = "idle"
    # –ü–†–û–°–¨–ë–ê –û –ü–†–ï–°–ï–ô–í–ï (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
    ASKING_PRESAVE_LINKS = "asking_presave_links" 
    ASKING_PRESAVE_COMMENT = "asking_presave_comment"
    ASKING_PRESAVE_COMPLETE = "asking_presave_complete"
    # –ó–ê–Ø–í–ö–ê –û –°–û–í–ï–†–®–ï–ù–ù–û–ú –ü–†–ï–°–ï–ô–í–ï (–∞–ø–ø—Ä—É–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
    CLAIMING_PRESAVE_SCREENSHOTS = "claiming_presave_screenshots"
    CLAIMING_PRESAVE_COMMENT = "claiming_presave_comment"
    # –ê–î–ú–ò–ù–°–ö–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø
    EDITING_REMINDER = "editing_reminder"
    WAITING_USERNAME_FOR_ANALYTICS = "waiting_username_for_analytics"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ —Ä–µ–∂–∏–º–∞–º –∏–∑ Environment_Variables.md
LIMIT_MODES = {
    LimitMode.CONSERVATIVE: {"max_hour": CONSERVATIVE_MAX_HOUR, "cooldown": CONSERVATIVE_COOLDOWN},
    LimitMode.NORMAL: {"max_hour": NORMAL_MAX_HOUR, "cooldown": NORMAL_COOLDOWN},
    LimitMode.BURST: {"max_hour": BURST_MAX_HOUR, "cooldown": BURST_COOLDOWN},
    LimitMode.ADMIN_BURST: {"max_hour": ADMIN_BURST_MAX_HOUR, "cooldown": ADMIN_BURST_COOLDOWN}
}

# Telegram API –ª–∏–º–∏—Ç—ã (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ)
TELEGRAM_LIMITS = {
    "individual_chat": 1,  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
    "group_chat": 20,      # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É  
    "bulk_overall": 30,    # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –æ–±—â–∏–π –ª–∏–º–∏—Ç
    "webhook_requests": 100 # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É –æ—Ç Telegram
}

# –°–∫—Ä—ã—Ç—ã–µ –ª–∏–º–∏—Ç—ã –º–µ—Ç–æ–¥–æ–≤ (–∏–∑ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –•–∞–±—Ä–µ)
METHOD_LIMITS = {
    "send_message": {"count": 60, "period": 15},        # –∑–∞ 15 —Å–µ–∫—É–Ω–¥
    "send_animation": {"count": 10, "period": 300},     # –∑–∞ 5 –º–∏–Ω—É—Ç (!)
    "send_photo": {"count": 60, "period": 15},          # –∑–∞ 15 —Å–µ–∫—É–Ω–¥
    "send_video": {"count": 35, "period": 60},          # –∑–∞ 60 —Å–µ–∫—É–Ω–¥
    "send_audio": {"count": 40, "period": 60},          # –∑–∞ 60 —Å–µ–∫—É–Ω–¥
    "edit_message_text": {"count": 140, "period": 40}, # –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    "edit_message_reply_markup": {"count": 100, "period": 30}
}

RANK_THRESHOLDS = {1: UserRank.NEWBIE, 6: UserRank.RELIABLE, 16: UserRank.MEGA, 31: UserRank.AMBASSADOR}
TELEGRAM_DOMAINS = ["t.me", "telegram.me", "telegram.org", "telegram.dog"]

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dataclass
class UserSession:
    state: UserState
    data: dict
    timestamp: datetime
    
    def is_expired(self) -> bool:
        return (datetime.now() - self.timestamp) > timedelta(hours=1)

@dataclass  
class PresaveRequestSession:
    """–°–µ—Å—Å–∏—è –¥–ª—è –ü–†–û–°–¨–ë–´ –û –ü–†–ï–°–ï–ô–í–ï (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è)"""
    links: List[str]
    comment: str
    user_id: int
    timestamp: datetime

@dataclass  
class PresaveClaimSession:
    """–°–µ—Å—Å–∏—è –¥–ª—è –ó–ê–Ø–í–ö–ò –û –°–û–í–ï–†–®–ï–ù–ù–û–ú –ü–†–ï–°–ï–ô–í–ï (–∞–ø–ø—Ä—É–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)"""
    screenshots: List[str]  # file_id –∏–∑ Telegram
    comment: str
    user_id: int
    timestamp: datetime

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π –∏ –ª–∏–º–∏—Ç–æ–≤
message_queue = Queue(maxsize=1000)
method_limits_tracker = defaultdict(list)
# –£–î–ê–õ–ï–ù–û: callback_rate_limiter = defaultdict(list) - –≤—ã–∑—ã–≤–∞–ª–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–µ–Ω—é
user_sessions: Dict[int, UserSession] = {}
presave_request_sessions: Dict[int, PresaveRequestSession] = {}
presave_claim_sessions: Dict[int, PresaveClaimSession] = {}
bot_status = {"enabled": True, "start_time": datetime.now()}

# ================================
# 5. –£–ü–†–û–©–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ï–ù–Æ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º V24.18)
# ================================

def clear_user_sessions_simple(user_id: int):
    """–ü–†–û–°–¢–ê–Ø —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π"""
    try:
        if user_id in user_sessions:
            del user_sessions[user_id]
        if user_id in presave_request_sessions:
            del presave_request_sessions[user_id]
        if user_id in presave_claim_sessions:
            del presave_claim_sessions[user_id]
        log_user_action(user_id, "SUCCESS", "Sessions cleared")
    except Exception as e:
        log_user_action(user_id, "ERROR", f"Session cleanup error: {str(e)}")

def create_main_menu_simple(user_id: int) -> tuple[str, InlineKeyboardMarkup]:
    """–ü–†–û–°–¢–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if validate_admin(user_id):
        text = "üëë **–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é**"
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"))
        keyboard.add(InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard"))
        keyboard.add(InlineKeyboardButton("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è", callback_data="admin_actions"))
        keyboard.add(InlineKeyboardButton("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"))
        keyboard.add(InlineKeyboardButton("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="diagnostics"))
        keyboard.add(InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
    else:
        text = "üì± **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**"
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"))
        keyboard.add(InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard"))
        keyboard.add(InlineKeyboardButton("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è", callback_data="user_actions"))
        keyboard.add(InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="user_analytics"))
        keyboard.add(InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
    
    return text, keyboard

# ================================
# 6. –£–¢–ò–õ–ò–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ================================

def is_external_link(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –≤–Ω–µ—à–Ω–µ–π (–Ω–µ Telegram) - blacklist –ø–æ–¥—Ö–æ–¥"""
    return not any(domain in url.lower() for domain in TELEGRAM_DOMAINS)

def format_user_stats(user_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏"""
    requests_count = user_data.get('requests_count', 0)
    approvals_count = user_data.get('approvals_count', 0)
    links_count = user_data.get('links_count', 0)
    rank = user_data.get('rank', UserRank.NEWBIE)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–∞–Ω–∏—è
    next_threshold = None
    for threshold, threshold_rank in RANK_THRESHOLDS.items():
        if approvals_count < threshold:
            next_threshold = threshold
            break
    
    progress_text = ""
    if next_threshold:
        progress_bar = format_progress_bar(approvals_count, next_threshold, 10)
        next_rank = RANK_THRESHOLDS[next_threshold]
        progress_text = f"\nüéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ {next_rank.value}: {progress_bar}"
    
    return f"""
üë§ **–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {links_count}
üéµ –ü—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö: {requests_count}
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {approvals_count}
üèÜ –ó–≤–∞–Ω–∏–µ: {rank.value}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å–µ–≥–æ–¥–Ω—è
{'üåü **–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–µ—Å–µ–π–≤–µ—Ä** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ø–ø—Ä—É–≤—ã' if is_trusted_user(approvals_count) else ''}
{progress_text}

üí™ {'–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!' if approvals_count >= 16 else '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤—ã –¥–ª—è —Ä–æ—Å—Ç–∞!'}
"""

def get_user_rank(approval_count: int) -> UserRank:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–ø–ø—Ä—É–≤–æ–≤"""
    for threshold in sorted(RANK_THRESHOLDS.keys(), reverse=True):
        if approval_count >= threshold:
            return RANK_THRESHOLDS[threshold]
    return UserRank.NEWBIE

def is_trusted_user(approval_count: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º (>= 6 –∞–ø–ø—Ä—É–≤–æ–≤)"""
    return approval_count >= 6

def validate_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
def encode_screenshot_for_db(file_content: bytes) -> str:
    """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ SQLite"""
    return base64.b64encode(file_content).decode('utf-8')

def decode_screenshot_from_db(encoded_content: str) -> bytes:
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–∑ base64"""
    return base64.b64decode(encoded_content.encode('utf-8'))

def validate_screenshot_size(file_size: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    return file_size <= MAX_SCREENSHOT_SIZE

def cleanup_expired_screenshots():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)"""
    cutoff_date = datetime.now() - timedelta(days=SCREENSHOT_TTL_DAYS)
    try:
        with database_transaction() as conn:
            cursor = conn.cursor()
            cutoff_date_str = cutoff_date.isoformat()
            cursor.execute('DELETE FROM screenshot_files WHERE expires_at < ?', (cutoff_date_str,))
            deleted_count = cursor.rowcount
            if deleted_count > 0:
                log_user_action(0, "SUCCESS", f"Cleaned up {deleted_count} expired screenshots")
    except Exception as e:
        log_user_action(0, "ERROR", f"Failed to cleanup screenshots: {str(e)}")

def get_file_extension_from_telegram(file_path: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Telegram file_path"""
    return file_path.split('.')[-1].lower() if '.' in file_path else 'jpg'

# –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –¥–ª—è Render.com
def log_user_action(user_id: int, action: str, details: str = "", correlation_id: str = None, client_ip: str = None):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è Render.com"""
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è
    emoji_map = {
        'COMMAND': 'üéØ',
        'HTTP_REQUEST': 'üì®', 
        'SEND_MESSAGE': 'üí¨',
        'PROCESS': 'üîÑ',
        'SUCCESS': '‚úÖ',
        'ERROR': '‚ùå',
        'WARNING': 'üö®',
        'KEEP_ALIVE': 'üíì',
        'SECURITY': 'üîê',
        'STATS': 'üìä',
        'MUSIC': 'üéµ',
        'SCREENSHOT': 'üì∏',
        'DATABASE': 'üíæ',
        'CALLBACK': 'üì≤',
        'WEBHOOK': 'üîó',
        'RATE_LIMIT': '‚è±Ô∏è',
        'REQUEST_PRESAVE': 'üéµ',
        'CLAIM_PRESAVE': 'üì∏',
        'ADMIN_APPROVE': '‚úÖ',
        'ADMIN_REJECT': '‚ùå',
        'SCREENSHOT_UPLOAD': 'üì§',
        'LINK_DETECTED': 'üîó'
    }
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    action_upper = action.upper()
    emoji = 'üîç'  # default
    for category, category_emoji in emoji_map.items():
        if category in action_upper:
            emoji = category_emoji
            break
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if LOG_FORMAT == "structured":
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        extra = {
            'user_id': user_id,
            'action': action,
            'details': details,
            'correlation_id': correlation_id,
            'client_ip': client_ip
        }
        logger.info(f"{emoji} {action}", extra=extra)
    else:
        # –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        message_parts = [f"{emoji} {action}"]
        if user_id:
            message_parts.append(f"User: {user_id}")
        if details:
            message_parts.append(f"Details: {details}")
        if correlation_id:
            message_parts.append(f"ReqID: {correlation_id}")
        if client_ip:
            message_parts.append(f"IP: {client_ip}")
        
        logger.info(" | ".join(message_parts))

def performance_logger(operation_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            if not ENABLE_PERFORMANCE_LOGS:
                return func(*args, **kwargs)
            
            start_time = time.time()
            correlation_id = getattr(wrapper, '_correlation_id', None)
            
            try:
                result = func(*args, **kwargs)
                duration_ms = round((time.time() - start_time) * 1000, 2)
                
                if LOG_FORMAT == "structured":
                    extra = {
                        'operation': operation_name,
                        'performance_ms': duration_ms,
                        'correlation_id': correlation_id,
                        'status': 'success'
                    }
                    logger.info(f"‚ö° Operation completed: {operation_name}", extra=extra)
                else:
                    logger.info(f"‚ö° {operation_name}: {duration_ms}ms")
                
                return result
            except Exception as e:
                duration_ms = round((time.time() - start_time) * 1000, 2)
                
                if LOG_FORMAT == "structured":
                    extra = {
                        'operation': operation_name,
                        'performance_ms': duration_ms,
                        'correlation_id': correlation_id,
                        'status': 'error',
                        'error': str(e)
                    }
                    logger.error(f"‚ùå Operation failed: {operation_name}", extra=extra)
                else:
                    logger.error(f"‚ùå {operation_name}: {duration_ms}ms - ERROR: {str(e)}")
                
                raise
        return wrapper
    return decorator

@contextmanager
def request_context(correlation_id: str = None, user_id: int = None, client_ip: str = None):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if not correlation_id:
        correlation_id = f"req_{int(time.time() * 1000)}_{os.getpid()}"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ thread-local storage
    context = {
        'correlation_id': correlation_id,
        'user_id': user_id,
        'client_ip': client_ip,
        'start_time': time.time()
    }
    
    old_context = getattr(threading.current_thread(), '_request_context', None)
    threading.current_thread()._request_context = context
    
    try:
        if LOG_FORMAT == "structured":
            extra = {
                'correlation_id': correlation_id,
                'user_id': user_id,
                'client_ip': client_ip
            }
            logger.info("üîÑ Request started", extra=extra)
        else:
            logger.info(f"üîÑ Request started: {correlation_id}")
        
        yield context
    
    finally:
        duration_ms = round((time.time() - context['start_time']) * 1000, 2)
        
        if LOG_FORMAT == "structured":
            extra = {
                'correlation_id': correlation_id,
                'user_id': user_id,
                'client_ip': client_ip,
                'total_duration_ms': duration_ms
            }
            logger.info("‚úÖ Request completed", extra=extra)
        else:
            logger.info(f"‚úÖ Request completed: {correlation_id} in {duration_ms}ms")
        
        threading.current_thread()._request_context = old_context

def get_current_context():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        return getattr(threading.current_thread(), '_request_context', {})
    except Exception:
        return {}

def centralized_error_logger(error: Exception, context: str = "", user_id: int = None, correlation_id: str = None):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    
    error_type = type(error).__name__
    error_message = str(error)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
    critical_errors = ['ConnectionError', 'TimeoutError', 'DatabaseError', 'MemoryError']
    is_critical = any(critical_type in error_type for critical_type in critical_errors)
    
    emoji = 'üö®' if is_critical else '‚ùå'
    level = logging.CRITICAL if is_critical else logging.ERROR
    
    if LOG_FORMAT == "structured":
        extra = {
            'error_type': error_type,
            'error_message': error_message,
            'context': context,
            'user_id': user_id,
            'correlation_id': correlation_id,
            'is_critical': is_critical,
            'stack_trace': traceback.format_exc() if hasattr(traceback, 'format_exc') else None
        }
        logger.log(level, f"{emoji} {error_type}: {error_message}", extra=extra)
    else:
        message_parts = [f"{emoji} {error_type}: {error_message}"]
        if context:
            message_parts.append(f"Context: {context}")
        if user_id:
            message_parts.append(f"User: {user_id}")
        if correlation_id:
            message_parts.append(f"ReqID: {correlation_id}")
        
        logger.log(level, " | ".join(message_parts))

def sanitize_for_logs(data: any) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if isinstance(data, str):
        # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
        data = re.sub(r'(token["\']?\s*[:=]\s*["\']?)([a-zA-Z0-9_\-]{10,})', r'\1***MASKED***', data, flags=re.IGNORECASE)
        data = re.sub(r'(secret["\']?\s*[:=]\s*["\']?)([a-zA-Z0-9_\-]{10,})', r'\1***MASKED***', data, flags=re.IGNORECASE)
        data = re.sub(r'(password["\']?\s*[:=]\s*["\']?)([^\s"\']{6,})', r'\1***MASKED***', data, flags=re.IGNORECASE)
    
    return str(data)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ API
def check_method_limit(method_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ API"""
    if method_name not in METHOD_LIMITS:
        return True
    
    current_time = time.time()
    method_data = METHOD_LIMITS[method_name]
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    method_limits_tracker[method_name] = [
        timestamp for timestamp in method_limits_tracker[method_name]
        if current_time - timestamp < method_data["period"]
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    return len(method_limits_tracker[method_name]) < method_data["count"]

def get_method_cooldown(method_name: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –º–µ—Ç–æ–¥–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
    if method_name in METHOD_LIMITS:
        return METHOD_LIMITS[method_name]["period"] / METHOD_LIMITS[method_name]["count"]
    return 1.0

def get_current_limit_mode() -> LimitMode:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –ë–î"""
    try:
        with database_transaction() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT value FROM settings WHERE key = ?', ('limit_mode',))
            result = cursor.fetchone()
            if result:
                return LimitMode(result[0])
    except:
        pass
    return LimitMode.NORMAL

def update_limit_mode(mode: LimitMode, admin_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–º"""
    try:
        with database_transaction() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value, updated_at)
                VALUES (?, ?, ?)
            ''', ('limit_mode', mode.value, datetime.now()))
        
        log_user_action(admin_id, "SUCCESS", f"Limit mode changed to {mode.value}")
    except Exception as e:
        log_user_action(admin_id, "ERROR", f"Failed to update limit mode: {str(e)}")

def format_progress_bar(current: int, target: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    filled = int(length * current / target) if target > 0 else 0
    filled = min(filled, length)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º
    bar = "‚ñà" * filled + "‚ñë" * (length - filled)
    return f"{bar} {current}/{target}"

def extract_links_from_text(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.findall(url_pattern, text)

def safe_html_escape(text: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç XSS"""
    return html.escape(text, quote=True)

def parse_url_safely(url: str) -> Optional[urllib.parse.ParseResult]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ URL —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        parsed = urllib.parse.urlparse(url)
        return parsed if parsed.scheme in ['http', 'https'] else None
    except Exception:
        return None

def make_keep_alive_request(url: str) -> bool:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ keep-alive –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        req = urllib.request.Request(url, headers={'User-Agent': 'PresaveBot-KeepAlive/1.0'})
        with urllib.request.urlopen(req, timeout=10) as response:
            return response.status == 200
    except (urllib.error.URLError, urllib.error.HTTPError, Exception):
        return False

@contextmanager
def database_transaction():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ë–î"""
    conn = None
    try:
        conn = sqlite3.connect('bot.db', timeout=30.0)
        conn.execute('PRAGMA foreign_keys = ON')
        conn.execute('PRAGMA journal_mode = WAL')
        yield conn
        conn.commit()
    except sqlite3.OperationalError as e:
        if conn:
            conn.rollback()
        log_user_action(0, "ERROR", f"Database operational error: {str(e)}")
        raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    except sqlite3.IntegrityError as e:
        if conn:
            conn.rollback()
        log_user_action(0, "ERROR", f"Database integrity error: {str(e)}")
        raise Exception("–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        if conn:
            conn.rollback()
        log_user_action(0, "ERROR", f"Database transaction error: {str(e)}")
        raise
    finally:
        if conn:
            conn.close()

# –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è Render.com
class MetricsCollector:
    """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.metrics = defaultdict(int)
        self.timings = defaultdict(list)
        self.lock = threading.Lock()
    
    def increment(self, metric_name: str, value: int = 1):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –º–µ—Ç—Ä–∏–∫–∏"""
        with self.lock:
            self.metrics[metric_name] += value
    
    def timing(self, metric_name: str, duration_ms: float):
        """–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        with self.lock:
            self.timings[metric_name].append(duration_ms)
            # –•—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
            if len(self.timings[metric_name]) > 100:
                self.timings[metric_name] = self.timings[metric_name][-100:]
    
    def get_summary(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫"""
        with self.lock:
            summary = {
                'counters': dict(self.metrics),
                'timings': {}
            }
            
            for metric, times in self.timings.items():
                if times:
                    summary['timings'][metric] = {
                        'count': len(times),
                        'avg_ms': round(sum(times) / len(times), 2),
                        'min_ms': round(min(times), 2),
                        'max_ms': round(max(times), 2)
                    }
            
            return summary

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
metrics = MetricsCollector()

# Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
class RateLimiter:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ rate limiting"""
    
    def __init__(self):
        self.requests = defaultdict(list)
        self.lock = threading.Lock()
    
    def is_allowed(self, client_ip: str, max_requests: int = 10, window_seconds: int = 60) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è IP"""
        with self.lock:
            current_time = time.time()
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            self.requests[client_ip] = [
                req_time for req_time in self.requests[client_ip]
                if current_time - req_time < window_seconds
            ]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
            if len(self.requests[client_ip]) >= max_requests:
                return False
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            self.requests[client_ip].append(current_time)
            return True

rate_limiter = RateLimiter()

# –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ webhook
class WebhookSecurity:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    @staticmethod
    def verify_telegram_request(headers: dict, content_length: int, client_ip: str = None) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram"""
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º health check –∑–∞–ø—Ä–æ—Å—ã
        if content_length == 0:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ secret token –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞)
        if WEBHOOK_SECRET and WEBHOOK_SECRET != "your_secret":
            secret_header = headers.get('X-Telegram-Bot-Api-Secret-Token')
            if secret_header != WEBHOOK_SECRET:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
        if content_length > 10 * 1024 * 1024:  # 10MB –ª–∏–º–∏—Ç
            return False
        
        # –ï—Å–ª–∏ secret token –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return True

security = WebhookSecurity()

def get_user_role(user_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return 'admin' if user_id in ADMIN_IDS else 'user'

def send_message_to_thread(chat_id, text, message_thread_id=None, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫"""
    # –î–ª—è —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º thread_id
    if chat_id == GROUP_ID:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π thread_id –∏–ª–∏ THREAD_ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        kwargs['message_thread_id'] = message_thread_id if message_thread_id is not None else THREAD_ID
    # –î–ª—è –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤ thread_id –Ω–µ –Ω—É–∂–µ–Ω
    return bot.send_message(chat_id, text, **kwargs)

def send_document_to_thread(chat_id, document, message_thread_id=None, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫"""
    if chat_id == GROUP_ID:
        kwargs['message_thread_id'] = message_thread_id if message_thread_id is not None else THREAD_ID
    return bot.send_document(chat_id, document, **kwargs)

def send_photo_to_thread(chat_id, photo, message_thread_id=None, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫"""
    if chat_id == GROUP_ID:
        kwargs['message_thread_id'] = message_thread_id if message_thread_id is not None else THREAD_ID
    return bot.send_photo(chat_id, photo, **kwargs)

def safe_string(text: str, max_length: int = 100) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ —Å Unicode"""
    if not text:
        return "Unknown"
    
    try:
        # –£–¥–∞–ª—è–µ–º null bytes –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        cleaned = ''.join(char for char in text if ord(char) >= 32 or char in '\n\r\t')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(cleaned) > max_length:
            cleaned = cleaned[:max_length-3] + "..."
        
        return cleaned
    except (UnicodeError, TypeError):
        return "Unknown"

def safe_username(user) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ username"""
    try:
        if hasattr(user, 'username') and user.username:
            return safe_string(user.username, 50)
        elif hasattr(user, 'first_name') and user.first_name:
            return safe_string(user.first_name, 50)
        else:
            return f"User_{user.id if hasattr(user, 'id') else 'Unknown'}"
    except Exception:
        return "Unknown"

def clean_url(url: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è webhook"""
    if not url:
        return url
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if url.startswith('https://'):
        return url[8:]
    elif url.startswith('http://'):
        return url[7:]
    
    return url

def determine_chat_context(message) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    
    Returns:
        - "private_chat": –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        - "correct_thread": –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ  
        - "wrong_thread": –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ
        - "wrong_group": –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞
        - "unsupported": –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —á–∞—Ç–∞
    """
    chat_type = message.chat.type
    chat_id = message.chat.id
    current_thread = getattr(message, 'message_thread_id', None)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ user_id
    user_id = message.from_user.id if hasattr(message, 'from_user') and message.from_user else 0
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log_user_action(
        user_id=user_id,
        action="PROCESS_CONTEXT_CHECK",
        details=f"ChatType: {chat_type}, ChatID: {chat_id}, Thread: {current_thread}, ExpectedGroup: {GROUP_ID}, ExpectedThread: {THREAD_ID}"
    )
    
    # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if chat_type == 'private':
        return "private_chat"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã
    if chat_id == GROUP_ID:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–∏–∫
        if current_thread == THREAD_ID:
            return "correct_thread"
        else:
            return "wrong_thread"
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞
        return "wrong_group"

def get_context_adaptive_response(context: str, base_message: str) -> str:
    """
    –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    if context == "private_chat":
        return base_message + "\n\nüí° –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–æ—Å—Ç—É–ø–Ω—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    elif context == "correct_thread":
        return base_message + f"\n\nüéØ –†–∞–±–æ—Ç–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ç–æ–ø–∏–∫–µ:  https://t.me/c/{str(abs(GROUP_ID))}/{THREAD_ID}"
    else:
        return base_message

def cleanup_expired_sessions():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    current_time = datetime.now()
    expired_users = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    for user_id, session in list(user_sessions.items()):  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        try:
            if session.is_expired():
                expired_users.append(user_id)
        except (AttributeError, TypeError):
            # –°–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë
            expired_users.append(user_id)
    
    for user_id in expired_users:
        del user_sessions[user_id]
        log_user_action(user_id, "SESSION_EXPIRED", "Auto cleanup")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π –ø—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö
    expired_request_users = []
    for user_id, session in presave_request_sessions.items():
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –µ—Å–ª–∏ timestamp —Å—Ç—Ä–æ–∫–∞
        session_time = session.timestamp
        if isinstance(session_time, str):
            session_time = datetime.fromisoformat(session_time)
        if (current_time - session_time) > timedelta(hours=1):
            expired_request_users.append(user_id)
    
    for user_id in expired_request_users:
        del presave_request_sessions[user_id]
        log_user_action(user_id, "REQUEST_SESSION_EXPIRED", "Auto cleanup")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–ø–ø—Ä—É–≤
    expired_claim_users = []
    for user_id, session in presave_claim_sessions.items():
        if (current_time - session.timestamp) > timedelta(hours=1):
            expired_claim_users.append(user_id)
    
    for user_id in expired_claim_users:
        del presave_claim_sessions[user_id]
        log_user_action(user_id, "CLAIM_SESSION_EXPIRED", "Auto cleanup")
		
# ================================
# 7. –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ò –õ–ò–ú–ò–¢–û–í
# ================================

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    @functools.wraps(func)
    def wrapper(message):
        user_id = message.from_user.id
        correlation_id = get_current_context().get('correlation_id')
        
        if user_id not in ADMIN_IDS:
            log_user_action(
                user_id=user_id,
                action="SECURITY_ACCESS_DENIED", 
                details=f"Attempted admin function: {func.__name__}",
                correlation_id=correlation_id
            )
            metrics.increment('security.access_denied')
            bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        
        log_user_action(
            user_id=user_id,
            action="SECURITY_ADMIN_ACCESS", 
            details=f"Admin function: {func.__name__}",
            correlation_id=correlation_id
        )
        metrics.increment('security.admin_access')
        return func(message)
    return wrapper

def rate_limit(method_name: str = "send_message"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–∫—Ä—ã—Ç—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""
    def decorator(func):
        @functools.wraps(func)
        @performance_logger(f"rate_limit_{method_name}")
        def wrapper(*args, **kwargs):
            correlation_id = get_current_context().get('correlation_id')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            if not check_method_limit(method_name):
                cooldown_time = get_method_cooldown(method_name)
                
                log_user_action(
                    user_id=0,
                    action="RATE_LIMIT_HIT",
                    details=f"Method: {method_name}, Cooldown: {cooldown_time}s",
                    correlation_id=correlation_id
                )
                metrics.increment(f'rate_limit.hit.{method_name}')
                
                time.sleep(cooldown_time)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç—Ä–µ–∫–µ—Ä
            method_limits_tracker[method_name].append(time.time())
            
            return func(*args, **kwargs)
        return wrapper
    return decorator

def safe_api_call(method_name: str = "send_message"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ 429"""
    def decorator(func):
        @functools.wraps(func)
        @performance_logger(f"api_call_{method_name}")
        def wrapper(*args, **kwargs):
            correlation_id = get_current_context().get('correlation_id')
            max_retries = 3
            
            for attempt in range(max_retries):
                try:
                    start_time = time.time()
                    result = func(*args, **kwargs)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                    duration_ms = round((time.time() - start_time) * 1000, 2)
                    log_user_action(
                        user_id=0,
                        action="SUCCESS_API_CALL",
                        details=f"Method: {method_name}, Duration: {duration_ms}ms",
                        correlation_id=correlation_id
                    )
                    metrics.increment(f'api.success.{method_name}')
                    metrics.timing(f'api.duration.{method_name}', duration_ms)
                    
                    return result
                    
                except Exception as e:
                    error_str = str(e).lower()
                    duration_ms = round((time.time() - start_time) * 1000, 2)
                    
                    if any(keyword in error_str for keyword in ['429', 'rate limit', 'too many requests']):
                        wait_time = (2 ** attempt) * get_method_cooldown(method_name)
                        
                        log_user_action(
                            user_id=0,
                            action="ERROR_API_RATE_LIMIT",
                            details=f"Method: {method_name}, Attempt: {attempt+1}, Wait: {wait_time}s",
                            correlation_id=correlation_id
                        )
                        metrics.increment(f'api.rate_limit.{method_name}')
                        
                        if attempt < max_retries - 1:
                            time.sleep(wait_time)
                            continue
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                    centralized_error_logger(
                        error=e,
                        context=f"API call {method_name} attempt {attempt+1}",
                        correlation_id=correlation_id
                    )
                    metrics.increment(f'api.error.{method_name}')
                    
                    if attempt == max_retries - 1:
                        raise Exception(f"Max retries exceeded for {method_name}: {str(e)}")
                    
            return None
        return wrapper
    return decorator

def log_performance(operation_name: str = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    def decorator(func):
        nonlocal operation_name
        if operation_name is None:
            operation_name = f"{func.__module__}.{func.__name__}"
        
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            correlation_id = get_current_context().get('correlation_id')
            start_time = time.time()
            
            try:
                result = func(*args, **kwargs)
                duration_ms = round((time.time() - start_time) * 1000, 2)
                
                log_user_action(
                    user_id=0,
                    action="PROCESS_PERFORMANCE",
                    details=f"Operation: {operation_name}, Duration: {duration_ms}ms",
                    correlation_id=correlation_id
                )
                metrics.timing(f'performance.{operation_name}', duration_ms)
                
                return result
                
            except Exception as e:
                duration_ms = round((time.time() - start_time) * 1000, 2)
                
                centralized_error_logger(
                    error=e,
                    context=f"Performance tracking for {operation_name}",
                    correlation_id=correlation_id
                )
                metrics.increment(f'performance.error.{operation_name}')
                
                raise
        return wrapper
    return decorator

def topic_restricted(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ –∏ –õ–°"""
    @functools.wraps(func)
    def wrapper(message):
        user_id = message.from_user.id if hasattr(message, 'from_user') and message.from_user else 0
        correlation_id = get_current_context().get('correlation_id')
        
        # –í –õ–° —Ä–∞–±–æ—Ç–∞–µ–º –≤—Å–µ–≥–¥–∞
        if message.chat.type == 'private':
            log_user_action(
                user_id=user_id,
                action="SUCCESS_PRIVATE_CHAT",
                details="Private chat allowed",
                correlation_id=correlation_id
            )
            return func(message)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        current_thread = getattr(message, 'message_thread_id', None)
        log_user_action(
            user_id=user_id,
            action="PROCESS_GROUP_MESSAGE",
            details=f"Chat: {message.chat.id}, Thread: {current_thread}, Expected Group: {GROUP_ID}, Expected Thread: {THREAD_ID}",
            correlation_id=correlation_id
        )
        
        # –í –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º ID –≥—Ä—É–ø–ø—ã
        if message.chat.id != GROUP_ID:
            log_user_action(
                user_id=user_id,
                action="WARNING_WRONG_GROUP",
                details=f"Chat {message.chat.id}, expected {GROUP_ID}",
                correlation_id=correlation_id
            )
            try:
                bot.reply_to(message, "‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
            except:
                pass
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–∏–∫
        if current_thread != THREAD_ID:
            log_user_action(
                user_id=user_id,
                action="WARNING_WRONG_THREAD",
                details=f"Thread {current_thread}, expected {THREAD_ID}",
                correlation_id=correlation_id
            )
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫ –≥–¥–µ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(
                    message.chat.id,
                    f"–Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–æ–ø–∏–∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–º https://t.me/c/{str(abs(GROUP_ID))}/{THREAD_ID}",
                    message_thread_id=current_thread
                )
            except Exception as e:
                log_user_action(
                    user_id=user_id,
                    action="ERROR",
                    details=f"Failed to send wrong thread message: {str(e)}",
                    correlation_id=correlation_id
                )
            return
        
        # –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        log_user_action(
            user_id=user_id,
            action="SUCCESS_CORRECT_THREAD",
            details=f"Correct thread {THREAD_ID}",
            correlation_id=correlation_id
        )
        
        return func(message)
    return wrapper

def request_logging(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ
        user_id = None
        if args and hasattr(args[0], 'from_user'):
            user_id = args[0].from_user.id
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        correlation_id = f"req_{int(time.time() * 1000)}_{threading.current_thread().ident}"
        
        with request_context(correlation_id=correlation_id, user_id=user_id):
            log_user_action(
                user_id=user_id,
                action="COMMAND_REQUEST",
                details=f"Function: {func.__name__}",
                correlation_id=correlation_id
            )
            
            try:
                result = func(*args, **kwargs)
                metrics.increment(f'command.success.{func.__name__}')
                return result
            except Exception as e:
                centralized_error_logger(
                    error=e,
                    context=f"Command handler {func.__name__}",
                    user_id=user_id,
                    correlation_id=correlation_id
                )
                metrics.increment(f'command.error.{func.__name__}')
                raise
    return wrapper

# ================================
# 8. –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# ================================

class DatabaseManager:
    def __init__(self, db_path: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite"""
        self.db_path = db_path
    
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    created_at TEXT DEFAULT (datetime('now')),
                    last_activity TEXT DEFAULT (datetime('now'))
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ü–†–û–°–¨–ë –û –ü–†–ï–°–ï–ô–í–ê–• (–æ–±—ä—è–≤–ª–µ–Ω–∏—è)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS presave_requests (
                    request_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    links TEXT,  -- JSON –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫
                    comment TEXT,
                    message_id INTEGER,  -- ID –ø–æ—Å—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ
                    created_at TEXT DEFAULT (datetime('now')),
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ó–ê–Ø–í–û–ö –ù–ê –ê–ü–ü–†–£–í (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ–π–≤–æ–≤)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS approval_claims (
                    claim_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    screenshots TEXT,  -- JSON –º–∞—Å—Å–∏–≤ file_id
                    comment TEXT,
                    status TEXT DEFAULT 'pending',  -- pending, approved, rejected
                    admin_id INTEGER,  -- –∫—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª
                    created_at TEXT DEFAULT (datetime('now')),
                    processed_at TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å TTL
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS screenshot_files (
                    file_id TEXT PRIMARY KEY,
                    user_id INTEGER,
                    file_content TEXT,  -- base64 encoded
                    file_size INTEGER,
                    file_extension TEXT,
                    created_at TEXT DEFAULT (datetime('now')),
                    expires_at TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_links (
                    link_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    link_url TEXT,
                    message_id INTEGER,
                    created_at TEXT DEFAULT (datetime('now')),
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS settings (
                    key TEXT PRIMARY KEY,
                    value TEXT,
                    updated_at TEXT DEFAULT (datetime('now'))
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_presave_requests_user_id ON presave_requests(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_approval_claims_status ON approval_claims(status)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_approval_claims_user_id ON approval_claims(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_screenshot_files_expires ON screenshot_files(expires_at)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_links_user_id ON user_links(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_links_created ON user_links(created_at)')
    
    def add_user(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
                    VALUES (?, ?, ?, ?)
                ''', (user_id, username, first_name, last_name))
                
                if cursor.rowcount > 0:
                    log_user_action(user_id, "DATABASE", "New user added")
        except Exception as e:
            log_user_action(user_id, "ERROR", f"Failed to add user: {str(e)}")
    
    def update_user_activity(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE users SET last_activity = ? WHERE user_id = ?
                ''', (datetime.now().isoformat(), user_id))
        except Exception as e:
            log_user_action(user_id, "ERROR", f"Failed to update activity: {str(e)}")
    
    # –ú–µ—Ç–æ–¥—ã —Å —á–µ—Ç–∫–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π
    def add_presave_request(self, user_id: int, links: List[str], comment: str, message_id: int) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü–†–û–°–¨–ë–´ –û –ü–†–ï–°–ï–ô–í–ï (–æ–±—ä—è–≤–ª–µ–Ω–∏–µ)"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO presave_requests (user_id, links, comment, message_id)
                    VALUES (?, ?, ?, ?)
                ''', (user_id, json.dumps(links), comment, message_id))
                
                log_user_action(user_id, "REQUEST_PRESAVE", 
                              f"Links: {len(links)}, Comment: {comment[:50]}...")
                return cursor.lastrowid
        except Exception as e:
            log_user_action(user_id, "ERROR", f"Failed to add presave request: {str(e)}")
            return 0
    
    def add_approval_claim(self, user_id: int, screenshots: List[str], comment: str) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ó–ê–Ø–í–ö–ò –ù–ê –ê–ü–ü–†–£–í (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ–π–≤–∞)"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO approval_claims (user_id, screenshots, comment)
                    VALUES (?, ?, ?)
                ''', (user_id, json.dumps(screenshots), comment))
                
                log_user_action(user_id, "CLAIM_PRESAVE", 
                              f"Screenshots: {len(screenshots)}, Comment: {comment[:50]}...")
                return cursor.lastrowid
        except Exception as e:
            log_user_action(user_id, "ERROR", f"Failed to add approval claim: {str(e)}")
            return 0
    
    def approve_claim(self, claim_id: int, admin_id: int, approved: bool):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º"""
        status = "approved" if approved else "rejected"
        action = "ADMIN_APPROVE" if approved else "ADMIN_REJECT"
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE approval_claims 
                    SET status = ?, admin_id = ?, processed_at = ?
                    WHERE claim_id = ?
                ''', (status, admin_id, datetime.now().isoformat(), claim_id))
                
                log_user_action(admin_id, action, f"Claim ID: {claim_id}")
        except Exception as e:
            log_user_action(admin_id, "ERROR", f"Failed to approve claim: {str(e)}")
    
    def get_pending_claims(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT claim_id, user_id, screenshots, comment, created_at
                    FROM approval_claims 
                    WHERE status = 'pending'
                    ORDER BY created_at ASC
                ''')
                
                claims = []
                for row in cursor.fetchall():
                    claims.append({
                        'claim_id': row[0],
                        'user_id': row[1], 
                        'screenshots': json.loads(row[2]),
                        'comment': row[3],
                        'created_at': row[4]
                    })
                return claims
        except Exception as e:
            log_user_action(0, "ERROR", f"Failed to get pending claims: {str(e)}")
            return []
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
    def save_screenshot(self, file_id: str, user_id: int, file_content: bytes, 
                       file_extension: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –ë–î —Å TTL"""
        try:
            encoded_content = encode_screenshot_for_db(file_content)
            expires_at = (datetime.now() + timedelta(days=SCREENSHOT_TTL_DAYS)).isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR REPLACE INTO screenshot_files 
                    (file_id, user_id, file_content, file_size, file_extension, expires_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (file_id, user_id, encoded_content, len(file_content), 
                      file_extension, expires_at))
            
            log_user_action(user_id, "SCREENSHOT_UPLOAD", 
                          f"Size: {len(file_content)} bytes, Ext: {file_extension}")
            return True
        except Exception as e:
            log_user_action(user_id, "ERROR", f"Screenshot save failed: {str(e)}")
            return False
    
    def get_screenshot(self, file_id: str) -> Optional[bytes]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–∑ –ë–î"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT file_content FROM screenshot_files 
                    WHERE file_id = ? AND expires_at > ?
                ''', (file_id, datetime.now().isoformat()))
                
                result = cursor.fetchone()
                if result:
                    return decode_screenshot_from_db(result[0])
                return None
        except Exception as e:
            log_user_action(0, "ERROR", f"Failed to get screenshot: {str(e)}")
            return None
    
    def cleanup_expired_screenshots(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    DELETE FROM screenshot_files WHERE expires_at < ?
                ''', (datetime.now(),))
                deleted_count = cursor.rowcount
                
                if deleted_count > 0:
                    log_user_action(0, "SUCCESS", f"Cleaned up {deleted_count} expired screenshots")
        except Exception as e:
            log_user_action(0, "ERROR", f"Failed to cleanup screenshots: {str(e)}")
    
    def add_user_link(self, user_id: int, link_url: str, message_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO user_links (user_id, link_url, message_id)
                    VALUES (?, ?, ?)
                ''', (user_id, link_url, message_id))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.update_user_activity(user_id)
                
                log_user_action(user_id, "LINK_DETECTED", f"URL: {link_url[:50]}...")
        except Exception as e:
            log_user_action(user_id, "ERROR", f"Failed to add user link: {str(e)}")
    
    def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö
                cursor.execute('SELECT COUNT(*) FROM presave_requests WHERE user_id = ?', (user_id,))
                requests_count = cursor.fetchone()[0]
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                cursor.execute('SELECT COUNT(*) FROM approval_claims WHERE user_id = ? AND status = "approved"', (user_id,))
                approvals_count = cursor.fetchone()[0]
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
                cursor.execute('SELECT COUNT(*) FROM user_links WHERE user_id = ?', (user_id,))
                links_count = cursor.fetchone()[0]
                
                return {
                    'requests_count': requests_count,
                    'approvals_count': approvals_count,
                    'links_count': links_count,
                    'rank': get_user_rank(approvals_count),
                    'is_trusted': is_trusted_user(approvals_count)
                }
        except Exception as e:
            log_user_action(user_id, "ERROR", f"Failed to get user stats: {str(e)}")
            return {'requests_count': 0, 'approvals_count': 0, 'links_count': 0, 
                   'rank': UserRank.NEWBIE, 'is_trusted': False}
    
    def get_user_info(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT username, first_name, last_name, created_at, last_activity
                    FROM users WHERE user_id = ?
                ''', (user_id,))
                
                result = cursor.fetchone()
                if result:
                    return {
                        'username': result[0],
                        'first_name': result[1],
                        'last_name': result[2],
                        'created_at': result[3],
                        'last_activity': result[4]
                    }
        except Exception as e:
            log_user_action(user_id, "ERROR", f"Failed to get user info: {str(e)}")
        
        return {'username': 'Unknown', 'first_name': None, 'last_name': None}
    
    def get_leaderboard(self, limit: int = 10, board_type: str = "approvals") -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                if board_type == "approvals":
                    cursor.execute('''
                        SELECT u.user_id, u.username, COUNT(ac.claim_id) as count
                        FROM users u
                        LEFT JOIN approval_claims ac ON u.user_id = ac.user_id AND ac.status = 'approved'
                        GROUP BY u.user_id, u.username
                        HAVING count > 0
                        ORDER BY count DESC
                        LIMIT ?
                    ''', (limit,))
                elif board_type == "requests":
                    cursor.execute('''
                        SELECT u.user_id, u.username, COUNT(pr.request_id) as count
                        FROM users u
                        LEFT JOIN presave_requests pr ON u.user_id = pr.user_id
                        GROUP BY u.user_id, u.username
                        HAVING count > 0
                        ORDER BY count DESC
                        LIMIT ?
                    ''', (limit,))
                else:  # ratio
                    cursor.execute('''
                        SELECT u.user_id, u.username, 
                               COUNT(DISTINCT pr.request_id) as requests,
                               COUNT(DISTINCT CASE WHEN ac.status = 'approved' THEN ac.claim_id END) as approvals,
                               CASE 
                                 WHEN COUNT(DISTINCT pr.request_id) > 0 
                                 THEN ROUND(CAST(COUNT(DISTINCT CASE WHEN ac.status = 'approved' THEN ac.claim_id END) AS FLOAT) / COUNT(DISTINCT pr.request_id), 2)
                                 ELSE 0.0
                               END as ratio
                        FROM users u
                        LEFT JOIN presave_requests pr ON u.user_id = pr.user_id
                        LEFT JOIN approval_claims ac ON u.user_id = ac.user_id
                        GROUP BY u.user_id, u.username
                        HAVING requests > 0 OR approvals > 0
                        ORDER BY ratio DESC, approvals DESC
                        LIMIT ?
                    ''', (limit,))
                
                results = []
                for row in cursor.fetchall():
                    if board_type == "ratio":
                        results.append({
                            'user_id': row[0],
                            'username': row[1],
                            'requests': row[2],
                            'approvals': row[3],
                            'ratio': row[4]
                        })
                    else:
                        results.append({
                            'user_id': row[0],
                            'username': row[1],
                            'count': row[2]
                        })
                
                return results
        except Exception as e:
            log_user_action(0, "ERROR", f"Failed to get leaderboard: {str(e)}")
            return []
    
    def get_recent_presave_requests(self, limit: int = 10) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT pr.request_id, pr.user_id, pr.message_id, pr.created_at, u.username
                    FROM presave_requests pr
                    JOIN users u ON pr.user_id = u.user_id
                    ORDER BY pr.created_at DESC
                    LIMIT ?
                ''', (limit,))
                
                requests = []
                for row in cursor.fetchall():
                    requests.append({
                        'request_id': row[0],
                        'user_id': row[1],
                        'message_id': row[2],
                        'created_at': row[3],
                        'username': row[4]
                    })
                
                return requests
        except Exception as e:
            log_user_action(0, "ERROR", f"Failed to get recent requests: {str(e)}")
            return []
    
    def get_recent_links(self, limit: int = 10) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT ul.link_url, ul.message_id, ul.created_at, u.username
                    FROM user_links ul
                    JOIN users u ON ul.user_id = u.user_id
                    ORDER BY ul.created_at DESC
                    LIMIT ?
                ''', (limit,))
                
                links = []
                for row in cursor.fetchall():
                    links.append({
                        'link_url': row[0],
                        'message_id': row[1],
                        'created_at': row[2],
                        'username': row[3]
                    })
                
                return links
        except Exception as e:
            log_user_action(0, "ERROR", f"Failed to get recent links: {str(e)}")
            return []
    
    def get_active_screenshots_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM screenshot_files WHERE expires_at > ?', (datetime.now().isoformat(),))
                return cursor.fetchone()[0]
        except Exception:
            return 0
    
    def is_bot_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT value FROM settings WHERE key = ?', ('bot_active',))
                result = cursor.fetchone()
                return result[0] == 'true' if result else True
        except Exception:
            return True
    
    def set_bot_active(self, active: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR REPLACE INTO settings (key, value, updated_at)
                    VALUES (?, ?, ?)
                ''', ('bot_active', 'true' if active else 'false', datetime.now().isoformat()))
        except Exception as e:
            logger.error(f"‚ùå Failed to set bot active: {str(e)}")
            centralized_error_logger(error=e, context="set_bot_active")
    
    def update_setting(self, key: str, value: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR REPLACE INTO settings (key, value, updated_at)
                    VALUES (?, ?, ?)
                ''', (key, value, datetime.now().isoformat()))
        except Exception as e:
            logger.error(f"‚ùå Failed to update setting {key}: {str(e)}")
            centralized_error_logger(error=e, context=f"update_setting({key})")
    
    def get_setting(self, key: str, default: str = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT value FROM settings WHERE key = ?', (key,))
                result = cursor.fetchone()
                return result[0] if result else default
        except Exception:
            return default

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db_manager = DatabaseManager('bot.db')

# ================================
# 9. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï)
# ================================

@bot.message_handler(commands=['start'])
@request_logging  
def start_command(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
    user_id = message.from_user.id
    context = determine_chat_context(message)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    log_user_action(
        user_id=user_id,
        action="COMMAND_START",
        details=f"Context: {context}"
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if context == "wrong_group":
        bot.reply_to(message, "‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return
    elif context == "wrong_thread":
        current_thread = getattr(message, 'message_thread_id', None)
        bot.reply_to(message, 
            f"–Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–æ–ø–∏–∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–º  https://t.me/c/{str(abs(GROUP_ID))}/{THREAD_ID}",
            message_thread_id=current_thread)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db_manager.add_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    welcome_text = """
ü§ñ **Do Presave Reminder Bot by Mister DMS v24.19** - Menu Fixes

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É –≤–∑–∞–∏–º–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤!

üéµ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –ø—Ä–æ—Å—å–±–∞–º–∏ –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞—è–≤–∫–∏ –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ–π–≤–∞—Ö  
‚Ä¢ –í–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä—É—é –∫ –≤–∑–∞–∏–º–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ

üì± **–ù–∞—á–∞—Ç—å:** /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚ùì **–ü–æ–º–æ—â—å:** /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

üèÜ **–°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π:**
ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π (1-5 –∞–ø–ø—Ä—É–≤–æ–≤)
ü•à –ù–∞–¥–µ–∂–Ω—ã–π –ø—Ä–µ—Å–µ–π–≤–µ—Ä (6-15 –∞–ø–ø—Ä—É–≤–æ–≤) - –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
ü•á –ú–µ–≥–∞-—á–µ–ª–æ–≤–µ—á–∏—â–µ (16-30 –∞–ø–ø—Ä—É–≤–æ–≤) - –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π  
üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ (31+ –∞–ø–ø—Ä—É–≤–æ–≤) - –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
"""
    
    bot.reply_to(message, welcome_text, parse_mode='Markdown')
    log_user_action(user_id, "COMMAND", "Start command executed")

# –£–ü–†–û–©–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê /menu (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º V24.18)
@bot.message_handler(commands=['menu'])
@topic_restricted
@request_logging
def menu_command(message):
    """–£–ü–†–û–©–ï–ù–ù–û–ï –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    
    # –ü–†–û–°–¢–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
    clear_user_sessions_simple(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    text, keyboard = create_main_menu_simple(user_id)
    
    bot.send_message(
        message.chat.id, 
        text, 
        reply_markup=keyboard, 
        parse_mode='Markdown',
        message_thread_id=getattr(message, 'message_thread_id', None)
    )
    
    log_user_action(user_id, "COMMAND_MENU", "Menu opened successfully")

@bot.message_handler(commands=['help'])
@request_logging
def help_command(message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    user_id = message.from_user.id
    context = determine_chat_context(message)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if context == "wrong_group":
        bot.reply_to(message, "‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return
    elif context == "wrong_thread":
        current_thread = getattr(message, 'message_thread_id', None)
        bot.reply_to(message, 
            f"–Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–æ–ø–∏–∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–º  https://t.me/c/{str(abs(GROUP_ID))}/{THREAD_ID}",
            message_thread_id=current_thread)
        return
    
    is_admin = validate_admin(user_id)
    
    help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

üéµ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–∞—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å—å–±–µ –ø—Ä–µ—Å–µ–π–≤–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–ø–ø—Ä—É–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ–π–≤–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üì± **–ö–æ–º–∞–Ω–¥—ã:**
/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/mystat - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/presavestats - –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
/recent - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º—É–∑—ã–∫—É ‚Üí –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö
2. –ü–æ–¥–∞–µ—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /menu ‚Üí –î–µ–π—Å—Ç–≤–∏—è ‚Üí –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–µ—Å–µ–π–≤–µ
3. –î–µ–ª–∞–µ—Ç–µ –ø—Ä–µ—Å–µ–π–≤—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 
4. –ó–∞—è–≤–ª—è–µ—Ç–µ –æ–± —ç—Ç–æ–º —á–µ—Ä–µ–∑ /menu ‚Üí –î–µ–π—Å—Ç–≤–∏—è ‚Üí –ó–∞—è–≤–∏—Ç—å –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–º –ø—Ä–µ—Å–µ–π–≤–µ
5. –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç
6. –ü–æ–ª—É—á–∞–µ—Ç–µ –∞–ø–ø—Ä—É–≤ –∏ —Ä–∞—Å—Ç–µ—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!

üèÜ **–ó–≤–∞–Ω–∏—è –¥–∞—é—Ç—Å—è –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ–π–≤—ã –¥—Ä—É–≥–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤**
"""
    
    if is_admin:
        help_text += """

üëë **–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
/menu - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤ –ª–∏–º–∏—Ç–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –±–æ—Ç–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
"""
    
    bot.reply_to(message, help_text, parse_mode='Markdown')
    log_user_action(user_id, "COMMAND", "Help command executed")

# –£–ü–†–û–©–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK'–û–í (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã V24.18)
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–£–ü–†–û–©–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ - –ø–æ–¥—Ö–æ–¥ –∏–∑ V23"""
    user_id = call.from_user.id
    
    try:
        log_user_action(user_id, "CALLBACK_RECEIVED", f"Data: {call.data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–∏–∫ –¥–ª—è callback'–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
        if call.message.chat.type != 'private':
            if call.message.chat.id != GROUP_ID:
                bot.answer_callback_query(call.id, "‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
                return
            
            current_thread = getattr(call.message, 'message_thread_id', None)
            if current_thread != THREAD_ID:
                bot.answer_callback_query(call.id, f"‚ùå –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫")
                return
        
        # –£–ë–ò–†–ê–ï–ú –í–°–ï –°–õ–û–ñ–ù–´–ï –ü–†–û–í–ï–†–ö–ò –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if call.data == "main_menu":
            clear_user_sessions_simple(user_id)
            text, keyboard = create_main_menu_simple(user_id)
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                reply_markup=keyboard, parse_mode='Markdown')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        elif call.data.startswith("back_"):
            clear_user_sessions_simple(user_id)
            text, keyboard = create_main_menu_simple(user_id)
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                reply_markup=keyboard, parse_mode='Markdown')
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ callback'–∏ –∫–∞–∫ –µ—Å—Ç—å...
        elif call.data == "my_stats":
            handle_my_stats_callback(call)
        elif call.data == "leaderboard":
            handle_leaderboard_callback(call)
        elif call.data.startswith("leaderboard_"):
            handle_leaderboard_type_callback(call)
        elif call.data == "user_actions":
            handle_user_actions_callback(call)
        elif call.data == "admin_actions" and validate_admin(user_id):
            handle_admin_actions_callback(call)
        elif call.data == "admin_analytics" and validate_admin(user_id):
            handle_admin_analytics_callback(call)
        elif call.data == "diagnostics" and validate_admin(user_id):
            handle_diagnostics_callback(call)
        elif call.data == "help":
            handle_help_callback(call)
        elif call.data == "user_analytics":
            handle_user_analytics_callback(call)
        elif call.data == "start_presave_request":
            handle_start_presave_request_callback(call)
        elif call.data.startswith("cancel_request_"):
            handle_cancel_request_callback(call)
        elif call.data.startswith("publish_request_"):
            handle_publish_request_callback(call)
        elif call.data == "start_presave_claim":
            handle_start_presave_claim_callback(call)
        elif call.data.startswith("cancel_claim_"):
            handle_cancel_claim_callback(call)
        elif call.data.startswith("submit_claim_"):
            handle_submit_claim_callback(call)
        elif call.data == "add_screenshot":
            handle_add_screenshot_callback(call)
        elif call.data.startswith("approve_claim_") and validate_admin(user_id):
            handle_approve_claim_callback(call)
        elif call.data.startswith("reject_claim_") and validate_admin(user_id):
            handle_reject_claim_callback(call)
        elif call.data.startswith("next_claim_") and validate_admin(user_id):
            handle_next_claim_callback(call)
        elif call.data == "bot_settings" and validate_admin(user_id):
            handle_bot_settings_callback(call)
        elif call.data.startswith("setmode_") and validate_admin(user_id):
            handle_setmode_callback(call)
        elif call.data == "recent":
            handle_recent_callback(call)
        elif call.data == "alllinks":
            handle_alllinks_callback(call)
        elif call.data == "proceed_to_comment":
            handle_proceed_to_comment_callback(call)
        elif call.data.startswith("recent_links_"):
            handle_recent_links_callback(call)
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        elif call.data.startswith("activate_bot") and validate_admin(user_id):
            handle_activate_bot_callback(call)
        elif call.data.startswith("deactivate_bot") and validate_admin(user_id):
            handle_deactivate_bot_callback(call)
        elif call.data.startswith("change_reminder") and validate_admin(user_id):
            handle_change_reminder_callback(call)
        elif call.data.startswith("clear_") and validate_admin(user_id):
            handle_clear_specific_data_callback(call)
        elif call.data == "check_approvals" and validate_admin(user_id):
            handle_check_approvals_callback(call)
        elif call.data == "rate_modes_menu" and validate_admin(user_id):
            handle_rate_modes_menu_callback(call)
        elif call.data == "clear_data_menu" and validate_admin(user_id):
            handle_clear_data_menu_callback(call)
        elif call.data == "cancel_reminder_edit" and validate_admin(user_id):
            handle_cancel_reminder_edit_callback(call)
        elif call.data == "test_keepalive" and validate_admin(user_id):
            handle_test_keepalive_callback(call)
        elif call.data == "test_system" and validate_admin(user_id):
            handle_test_system_callback(call)
        elif call.data == "bot_status_info" and validate_admin(user_id):
            handle_bot_status_info_callback(call)
        elif call.data == "performance_metrics" and validate_admin(user_id):
            handle_performance_metrics_callback(call)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
            log_user_action(user_id, "CALLBACK_UNKNOWN", f"Unknown: {call.data}")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return
        
        bot.answer_callback_query(call.id)
        metrics.increment('callback.success')
        
    except Exception as e:
        centralized_error_logger(error=e, context=f"Callback: {call.data}", user_id=user_id)
        metrics.increment('callback.error')
        
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /menu")
        except Exception as recovery_error:
            log_user_action(user_id, "ERROR", f"Recovery failed: {str(recovery_error)}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...
# (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –¥–ª–∏–Ω–µ)

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

@bot.message_handler(commands=['mystat'])
@request_logging  
def my_stats_command(message):
    """–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏"""
    user_id = message.from_user.id
    context = determine_chat_context(message)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if context == "wrong_group":
        bot.reply_to(message, "‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return
    elif context == "wrong_thread":
        current_thread = getattr(message, 'message_thread_id', None)
        bot.reply_to(message, 
            f"–Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–æ–ø–∏–∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–º  https://t.me/c/{str(abs(GROUP_ID))}/{THREAD_ID}",
            message_thread_id=current_thread)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    db_manager.update_user_activity(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_stats = db_manager.get_user_stats(user_id)
    stats_text = format_user_stats(user_stats)
    
    bot.reply_to(message, stats_text, parse_mode='Markdown')
    log_user_action(user_id, "STATS", "Personal stats requested")

@bot.message_handler(commands=['presavestats', 'linkstats'])
@request_logging
def presave_stats_command(message):
    """–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
    user_id = message.from_user.id
    context = determine_chat_context(message)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if context == "wrong_group":
        bot.reply_to(message, "‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return
    elif context == "wrong_thread":
        current_thread = getattr(message, 'message_thread_id', None)
        bot.reply_to(message, 
            f"–Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–æ–ø–∏–∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–º  https://t.me/c/{str(abs(GROUP_ID))}/{THREAD_ID}",
            message_thread_id=current_thread)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø—ã –ø–æ —Ä–∞–∑–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    top_approvals = db_manager.get_leaderboard(5, "approvals")
    top_requests = db_manager.get_leaderboard(5, "requests") 
    top_ratio = db_manager.get_leaderboard(5, "ratio")
    
    stats_text = "üèÜ **–†–µ–π—Ç–∏–Ω–≥–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞**\n\n"
    
    # –¢–æ–ø –ø–æ –∞–ø–ø—Ä—É–≤–∞–º
    stats_text += "‚úÖ **–¢–æ–ø –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø—Ä–µ—Å–µ–π–≤–∞–º:**\n"
    for i, user in enumerate(top_approvals, 1):
        username = user['username'] or 'Unknown'
        rank = get_user_rank(user['count'])
        stats_text += f"{i}. @{username} - {user['count']} {rank.value}\n"
    
    stats_text += "\nüéµ **–¢–æ–ø –ø–æ –ø—Ä–æ—Å—å–±–∞–º –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö:**\n"
    for i, user in enumerate(top_requests, 1):
        username = user['username'] or 'Unknown'  
        stats_text += f"{i}. @{username} - {user['count']}\n"
        
    stats_text += "\n‚öñÔ∏è **–õ—É—á—à–∏–µ –ø–æ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏ (–∞–ø–ø—Ä—É–≤/–ø—Ä–æ—Å—å–±–∞):**\n"
    for i, user in enumerate(top_ratio, 1):
        username = user['username'] or 'Unknown'
        ratio = user['ratio']
        stats_text += f"{i}. @{username} - {ratio} ({user['approvals']}/{user['requests']})\n"
    
    bot.reply_to(message, stats_text, parse_mode='Markdown')
    log_user_action(user_id, "STATS", "Community stats requested")

@bot.message_handler(commands=['recent'])
@request_logging
def recent_links_command(message):
    """10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ —Å –∞–≤—Ç–æ—Ä–∞–º–∏"""
    user_id = message.from_user.id
    context = determine_chat_context(message)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if context == "wrong_group":
        bot.reply_to(message, "‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return
    elif context == "wrong_thread":
        current_thread = getattr(message, 'message_thread_id', None)
        bot.reply_to(message, 
            f"–Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–æ–ø–∏–∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–º  https://t.me/c/{str(abs(GROUP_ID))}/{THREAD_ID}",
            message_thread_id=current_thread)
        return
    
    recent_links = db_manager.get_recent_links(10)
    
    if not recent_links:
        bot.reply_to(message, "üìé –ü–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")
        return
    
    recent_text = "üìé **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫:**\n\n"
    
    for i, link_data in enumerate(recent_links, 1):
        username = link_data['username'] or 'Unknown'
        message_id = link_data['message_id']
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_link = f"https://t.me/c/{abs(GROUP_ID)}/{message_id}"
        
        recent_text += f"{i}. @{username} - [–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É]({message_link})\n"
    
    bot.reply_to(message, recent_text, parse_mode='Markdown', disable_web_page_preview=True)
    log_user_action(user_id, "STATS", "Recent links requested")

# ================================
# 10. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–ù–û–ü–û–ö (–≤—Å–µ handle_ —Ñ—É–Ω–∫—Ü–∏–∏)
# ================================

def handle_my_stats_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = call.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    db_manager.update_user_activity(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_stats = db_manager.get_user_stats(user_id)
    stats_text = format_user_stats(user_stats)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    bot.edit_message_text(
        stats_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_leaderboard_callback(call):
    """–ú–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å –ø–æ–¥–º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("–ü–æ –ø—Ä–æ—Å—å–±–∞–º –æ –ø—Ä–µ—Å–µ–π–≤–µ", callback_data="leaderboard_requests"))
    keyboard.add(InlineKeyboardButton("–ü–æ –∞–ø–ø—Ä—É–≤–∞–º", callback_data="leaderboard_approvals")) 
    keyboard.add(InlineKeyboardButton("–ü–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –ü—Ä–æ—Å—å–±–∞-–ê–ø–ø—Ä—É–≤", callback_data="leaderboard_ratio"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    bot.edit_message_text(
        "üèÜ **–õ–∏–¥–µ—Ä–±–æ—Ä–¥** - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", 
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_leaderboard_type_callback(call):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
    board_type = call.data.split('_')[1]  # requests, approvals, ratio
    
    leaderboard = db_manager.get_leaderboard(10, board_type)
    
    if not leaderboard:
        text = "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"
    else:
        if board_type == "requests":
            text = "üéµ **–¢–æ–ø –ø–æ –ø—Ä–æ—Å—å–±–∞–º –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö:**\n\n"
            for i, user in enumerate(leaderboard, 1):
                username = user['username'] or 'Unknown'
                text += f"{i}. @{username} - {user['count']}\n"
        elif board_type == "approvals":
            text = "‚úÖ **–¢–æ–ø –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø—Ä–µ—Å–µ–π–≤–∞–º:**\n\n"
            for i, user in enumerate(leaderboard, 1):
                username = user['username'] or 'Unknown'
                rank = get_user_rank(user['count'])
                text += f"{i}. @{username} - {user['count']} {rank.value}\n"
        else:  # ratio
            text = "‚öñÔ∏è **–õ—É—á—à–∏–µ –ø–æ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏:**\n\n"
            for i, user in enumerate(leaderboard, 1):
                username = user['username'] or 'Unknown'
                text += f"{i}. @{username} - {user['ratio']} ({user['approvals']}/{user['requests']})\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–π—Ç–∏–Ω–≥–∞–º", callback_data="leaderboard"))
    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_user_actions_callback(call):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üéµ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–µ—Å–µ–π–≤–µ", callback_data="start_presave_request"))
    keyboard.add(InlineKeyboardButton("üì∏ –ó–∞—è–≤–∏—Ç—å –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–º –ø—Ä–µ—Å–µ–π–≤–µ", callback_data="start_presave_claim"))
    keyboard.add(InlineKeyboardButton("üìé –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Å—ã–ª–æ–∫", callback_data="recent_links_30"))
    keyboard.add(InlineKeyboardButton("üìé –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫", callback_data="recent_links_10"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    bot.edit_message_text(
        "‚öôÔ∏è **–î–µ–π—Å—Ç–≤–∏—è**", 
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_admin_actions_callback(call):
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üéµ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–µ—Å–µ–π–≤–µ", callback_data="start_presave_request"))
    keyboard.add(InlineKeyboardButton("üì∏ –ó–∞—è–≤–∏—Ç—å –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–º –ø—Ä–µ—Å–µ–π–≤–µ", callback_data="start_presave_claim"))
    keyboard.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã", callback_data="check_approvals"))
    keyboard.add(InlineKeyboardButton("üìé –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Å—ã–ª–æ–∫", callback_data="recent_links_30"))
    keyboard.add(InlineKeyboardButton("üìé –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫", callback_data="recent_links_10"))
    keyboard.add(InlineKeyboardButton("üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data="bot_settings"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    bot.edit_message_text(
        "‚öôÔ∏è **–ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è**", 
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_start_presave_request_callback(call):
    """–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ—Å—å–±—ã –æ –ø—Ä–µ—Å–µ–π–≤–µ"""
    user_id = call.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[user_id] = UserSession(
        state=UserState.ASKING_PRESAVE_COMPLETE,
        data={
            'type': 'presave_request',
            'chat_id': call.message.chat.id,
            'message_id': call.message.message_id,
            'is_group': call.message.chat.type != 'private'
        },
        timestamp=datetime.now()
    )
    
    presave_request_sessions[user_id] = PresaveRequestSession(
        links=[],
        comment="",
        user_id=user_id,
        timestamp=datetime.now()
    )
    
    request_text = """
üéµ **–ü–æ–¥–∞—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –æ –ø—Ä–µ—Å–µ–π–≤–µ**

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–ª–∏–∑–∞ –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:

**–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**
–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –∏ –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ

https://open.spotify.com/track/...
https://music.apple.com/album/...
https://bandlink.to/...
"""
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_request_{user_id}"))
    
    bot.edit_message_text(
        request_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    log_user_action(user_id, "REQUEST_PRESAVE", "Started interactive request flow")

def handle_start_presave_claim_callback(call):
    """–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤"""
    user_id = call.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[user_id] = UserSession(
        state=UserState.CLAIMING_PRESAVE_SCREENSHOTS,
        data={'type': 'presave_claim'},
        timestamp=datetime.now()
    )
    
    presave_claim_sessions[user_id] = PresaveClaimSession(
        screenshots=[],
        comment="",
        user_id=user_id,
        timestamp=datetime.now()
    )
    
    claim_text = """
üì∏ **–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–ø–ø—Ä—É–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ–π–≤–∞**

üì∑ **–®–∞–≥ 1:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã

–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å:
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ—Å–µ–π–≤–∞
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 
‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG, WebP
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10MB –Ω–∞ —Ñ–∞–π–ª
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ

–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é"
"""
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_claim_{user_id}"))
    
    bot.edit_message_text(
        claim_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    log_user_action(user_id, "CLAIM_PRESAVE", "Started interactive claim flow")

def handle_cancel_request_callback(call):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å—å–±—ã –æ –ø—Ä–µ—Å–µ–π–≤–µ"""
    try:
        callback_user_id = int(call.data.split('_')[2])
    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if call.from_user.id != callback_user_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞")
        return
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
    clear_user_sessions_simple(callback_user_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    text, keyboard = create_main_menu_simple(callback_user_id)
    
    bot.edit_message_text(
        f"‚ùå **–ü—Ä–æ—Å—å–±–∞ –æ –ø—Ä–µ—Å–µ–π–≤–µ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n{text}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    log_user_action(callback_user_id, "REQUEST_PRESAVE", "Request cancelled, returned to menu")

def handle_publish_request_callback(call):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Å—å–±—ã –æ –ø—Ä–µ—Å–µ–π–≤–µ –≤ —Ç–æ–ø–∏–∫–µ"""
    try:
        callback_user_id = int(call.data.split('_')[2])
    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if call.from_user.id != callback_user_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞")
        return
    
    if callback_user_id not in presave_request_sessions:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return
    
    session = presave_request_sessions[callback_user_id]
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        username = safe_username(call.from_user)
        post_text = f"{safe_string(session.comment, 500)}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        for link in session.links:
            post_text += f"{link}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ü–µ
        post_text += f"\n@{username}"
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ —Ç–æ–ø–∏–∫–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        published_message = send_message_to_thread(
            GROUP_ID,
            post_text,
            THREAD_ID,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        request_id = db_manager.add_presave_request(
            user_id=callback_user_id,
            links=session.links,
            comment=session.comment,
            message_id=published_message.message_id
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
        clear_user_sessions_simple(callback_user_id)
        
        bot.edit_message_text(
            f"‚úÖ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!**\n\n[–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É](https://t.me/c/{abs(GROUP_ID)}/{published_message.message_id})",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        try:
            recent_requests = db_manager.get_recent_presave_requests(10)
            
            reminder_text = REMINDER_TEXT + "\n\n"
            reminder_text += "üéµ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Å—å–±—ã –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö:**\n"
            
            for i, request in enumerate(recent_requests, 1):
                username = request.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message_link = f"https://t.me/c/{abs(GROUP_ID)}/{request['message_id']}"
                reminder_text += f"{i}. @{username} - [–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É]({message_link})\n"
            
            if not recent_requests:
                reminder_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö"
            
            send_message_to_thread(
                GROUP_ID,
                reminder_text,
                THREAD_ID,
                parse_mode='Markdown'
            )
            
        except Exception as reminder_error:
            log_user_action(callback_user_id, "WARNING", f"Failed to send reminder: {str(reminder_error)}")

        log_user_action(callback_user_id, "REQUEST_PRESAVE", f"Published request #{request_id}")
        
    except Exception as e:
        bot.edit_message_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        log_user_action(callback_user_id, "ERROR", f"Failed to publish request: {str(e)}")

def handle_cancel_claim_callback(call):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤"""
    try:
        callback_user_id = int(call.data.split('_')[2])
    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if call.from_user.id != callback_user_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞")
        return
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
    clear_user_sessions_simple(callback_user_id)
    
    bot.edit_message_text(
        "‚ùå **–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–ø–ø—Ä—É–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞**",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown'
    )
    
    log_user_action(callback_user_id, "CLAIM_PRESAVE", "Claim cancelled")

def handle_submit_claim_callback(call):
    """–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤"""
    try:
        callback_user_id = int(call.data.split('_')[2])
    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if call.from_user.id != callback_user_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞")
        return
    
    if callback_user_id not in presave_claim_sessions:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return
    
    session = presave_claim_sessions[callback_user_id]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = db_manager.get_user_stats(callback_user_id)
        is_trusted = user_stats['is_trusted']
        
        if is_trusted:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–ø–ø—Ä—É–≤ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            claim_id = db_manager.add_approval_claim(
                user_id=callback_user_id,
                screenshots=session.screenshots,
                comment=session.comment
            )
            
            # –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
            db_manager.approve_claim(claim_id, 0, True)  # 0 = system auto-approval
            
            success_text = f"""
‚úÖ **–ó–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**

üåü –ö–∞–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–µ—Å–µ–π–≤–µ—Ä ({user_stats['rank'].value}), –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

üìà **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:**
‚Ä¢ –ê–ø–ø—Ä—É–≤–æ–≤: {user_stats['approvals_count'] + 1}
"""
            
            log_user_action(callback_user_id, "CLAIM_PRESAVE", f"Auto-approved claim #{claim_id}")
        else:
            # –û–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
            claim_id = db_manager.add_approval_claim(
                user_id=callback_user_id,
                screenshots=session.screenshots,
                comment=session.comment
            )
            
            success_text = f"""
üì® **–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!**

üì∏ –ó–∞—è–≤–∫–∞ #{claim_id} –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.

‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ—Å–ª–µ 6 –∞–ø–ø—Ä—É–≤–æ–≤ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø—Ä–µ—Å–µ–π–≤–µ—Ä–æ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.
"""
            
            log_user_action(callback_user_id, "CLAIM_PRESAVE", f"Submitted claim #{claim_id}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
        clear_user_sessions_simple(callback_user_id)
        
        bot.edit_message_text(
            success_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        bot.edit_message_text(
            "‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        log_user_action(callback_user_id, "ERROR", f"Failed to submit claim: {str(e)}")

def handle_add_screenshot_callback(call):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    user_id = call.from_user.id
    
    if user_id not in user_sessions or user_sessions[user_id].state != UserState.CLAIMING_PRESAVE_SCREENSHOTS:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        text, keyboard = create_main_menu_simple(user_id)
        bot.edit_message_text(
            f"‚ùå **–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞**\n\n{text}",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        return
    
    if user_id not in presave_claim_sessions:
        bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é", callback_data="proceed_to_comment"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"cancel_claim_{user_id}"))
    
    current_count = len(presave_claim_sessions[user_id].screenshots)
    
    bot.edit_message_text(
        f"üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–∏–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç**\n\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_count}\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_proceed_to_comment_callback(call):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –∞–ø–ø—Ä—É–≤"""
    user_id = call.from_user.id
    
    if user_id not in user_sessions or user_sessions[user_id].state != UserState.CLAIMING_PRESAVE_SCREENSHOTS:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    user_sessions[user_id].state = UserState.CLAIMING_PRESAVE_COMMENT
    
    bot.edit_message_text(
        "üí¨ **–®–∞–≥ 2: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–º –ø—Ä–µ—Å–µ–π–≤–µ:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown'
    )

def handle_approve_claim_callback(call):
    try:
        claim_id = int(call.data.split('_')[2])
    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    admin_id = call.from_user.id
    
    try:
        with database_transaction() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT status FROM approval_claims WHERE claim_id = ?', (claim_id,))
            result = cursor.fetchone()
            
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            if result[0] != 'pending':
                bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return
            
            cursor.execute('''
                UPDATE approval_claims 
                SET status = ?, admin_id = ?, processed_at = ?
                WHERE claim_id = ? AND status = 'pending'
            ''', ('approved', admin_id, datetime.now().isoformat(), claim_id))
            
            if cursor.rowcount == 0:
                bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º")
                return
        
        bot.edit_message_text(
            f"‚úÖ **–ó–∞—è–≤–∫–∞ #{claim_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞**\n\n–ê–ø–ø—Ä—É–≤ –∑–∞—Å—á–∏—Ç–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        
        log_user_action(admin_id, "ADMIN_APPROVE", f"Approved claim #{claim_id}")
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        log_user_action(admin_id, "ERROR", f"Failed to approve claim #{claim_id}: {str(e)}")

def handle_reject_claim_callback(call):
    try:
        claim_id = int(call.data.split('_')[2])
    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    admin_id = call.from_user.id
    
    try:
        with database_transaction() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT status FROM approval_claims WHERE claim_id = ?', (claim_id,))
            result = cursor.fetchone()
            
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            if result[0] != 'pending':
                bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return
            
            cursor.execute('''
                UPDATE approval_claims 
                SET status = ?, admin_id = ?, processed_at = ?
                WHERE claim_id = ? AND status = 'pending'
            ''', ('rejected', admin_id, datetime.now().isoformat(), claim_id))
            
            if cursor.rowcount == 0:
                bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º")
                return
        
        bot.edit_message_text(
            f"‚ùå **–ó–∞—è–≤–∫–∞ #{claim_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n–ê–ø–ø—Ä—É–≤ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        
        log_user_action(admin_id, "ADMIN_REJECT", f"Rejected claim #{claim_id}")
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        log_user_action(admin_id, "ERROR", f"Failed to reject claim #{claim_id}: {str(e)}")

def handle_next_claim_callback(call):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–µ –Ω–∞ –∞–ø–ø—Ä—É–≤"""
    admin_id = call.from_user.id
    
    try:
        next_index = int(call.data.split('_')[2])
    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    pending_claims = db_manager.get_pending_claims()
    
    if next_index < len(pending_claims):
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        
        show_claim_for_approval(call.message.chat.id, pending_claims[next_index], next_index, len(pending_claims))
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –î–µ–π—Å—Ç–≤–∏—è", callback_data="admin_actions"))
        
        bot.edit_message_text(
            "‚úÖ **–í—Å–µ –∑–∞—è–≤–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã**",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

def handle_check_approvals_callback(call):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–ø–ø—Ä—É–≤"""
    admin_id = call.from_user.id
    
    pending_claims = db_manager.get_pending_claims()
    
    if not pending_claims:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –î–µ–π—Å—Ç–≤–∏—è", 
                                        callback_data="admin_actions"))
        bot.edit_message_text(
            "‚úÖ **–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–µ—Ç**",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
    show_claim_for_approval(call.message.chat.id, pending_claims[0], 0, len(pending_claims))
    log_user_action(admin_id, "ADMIN_APPROVE", f"Checking {len(pending_claims)} pending claims")

def show_claim_for_approval(chat_id: int, claim: dict, current_index: int, total_count: int):
    """–ü–æ–∫–∞–∑ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"""
    claim_id = claim['claim_id']
    user_id = claim['user_id']
    screenshots = claim['screenshots']
    comment = claim['comment']
    created_at = claim['created_at']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = db_manager.get_user_info(user_id)
    username = user_info.get('username', 'Unknown')
    user_stats = db_manager.get_user_stats(user_id)
    
    header_text = f"""
üì∏ **–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–ø–ø—Ä—É–≤ #{claim_id}** ({current_index + 1}/{total_count})

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{username} (ID: {user_id})
üèÜ **–ó–≤–∞–Ω–∏–µ:** {user_stats.get('rank', UserRank.NEWBIE).value}
‚úÖ **–ê–ø–ø—Ä—É–≤–æ–≤:** {user_stats.get('approvals_count', 0)}
üìÖ **–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:** {created_at}

üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**
{comment}

üñºÔ∏è **–°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:** {len(screenshots)}
"""
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_claim_{claim_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_claim_{claim_id}")
    )
    
    if current_index < total_count - 1:
        keyboard.add(InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞", callback_data=f"next_claim_{current_index + 1}"))
    
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –î–µ–π—Å—Ç–≤–∏—è", callback_data="admin_actions"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    send_message_to_thread(chat_id, header_text, THREAD_ID, reply_markup=keyboard, parse_mode='Markdown')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    screenshot_errors = 0
    for i, screenshot_id in enumerate(screenshots, 1):
        try:
            if chat_id == GROUP_ID:
                send_photo_to_thread(chat_id, screenshot_id, THREAD_ID, caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç {i}/{len(screenshots)} –∑–∞—è–≤–∫–∏ #{claim_id}")
            else:
                bot.send_photo(chat_id, screenshot_id, caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç {i}/{len(screenshots)} –∑–∞—è–≤–∫–∏ #{claim_id}")
        except Exception as e:
            screenshot_errors += 1
            log_user_action(user_id, "ERROR", f"Failed to send screenshot {i}: {str(e)}")
            
            try:
                send_message_to_thread(
                    chat_id, 
                    f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {i}/{len(screenshots)}**\n\n–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ID: {screenshot_id})", 
                    THREAD_ID,
                    parse_mode='Markdown'
                )
            except:
                pass
    
    if screenshot_errors > 0:
        try:
            send_message_to_thread(
                chat_id,
                f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** {screenshot_errors} –∏–∑ {len(screenshots)} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å",
                THREAD_ID,
                parse_mode='Markdown'
            )
        except:
            pass

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ handle_ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤
def handle_bot_settings_callback(call):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üéõÔ∏è –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤", callback_data="rate_modes_menu"))
    keyboard.add(InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="activate_bot"))
    keyboard.add(InlineKeyboardButton("‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="deactivate_bot"))
    keyboard.add(InlineKeyboardButton("üí¨ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="change_reminder"))
    keyboard.add(InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="clear_data_menu"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_actions"))
    
    bot.edit_message_text(
        "üéõÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_recent_links_callback(call):
    """–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
    if "recent_links_30" in call.data:
        limit = 30
    elif "recent_links_10" in call.data:
        limit = 10
    else:
        limit = 10
    
    recent_links = db_manager.get_recent_links(limit)
    
    if not recent_links:
        text = f"üìé **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å—Å—ã–ª–æ–∫**\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ"
    else:
        text = f"üìé **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å—Å—ã–ª–æ–∫:**\n\n"
        for i, link_data in enumerate(recent_links, 1):
            username = link_data['username'] or 'Unknown'
            message_id = link_data['message_id']
            message_link = f"https://t.me/c/{abs(GROUP_ID)}/{message_id}"
            text += f"{i}. @{username} - [–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É]({message_link})\n"
    
    keyboard = InlineKeyboardMarkup()
    if call.from_user.id in ADMIN_IDS:
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_actions"))
    else:
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_actions"))
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ handle_ —Ñ—É–Ω–∫—Ü–∏–∏
def handle_user_analytics_callback(call):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üìä –°—Å—ã–ª–∫–∏ –ø–æ @username", callback_data="user_links_search"))
    keyboard.add(InlineKeyboardButton("‚úÖ –ê–ø–ø—Ä—É–≤—ã –ø–æ @username", callback_data="user_approvals_search"))
    keyboard.add(InlineKeyboardButton("‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ @username", callback_data="user_comparison_search"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    bot.edit_message_text(
        "üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_admin_analytics_callback(call):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üìä –°—Å—ã–ª–∫–∏ –ø–æ @username", callback_data="admin_user_links"))
    keyboard.add(InlineKeyboardButton("‚úÖ –ê–ø–ø—Ä—É–≤—ã –ø–æ @username", callback_data="admin_user_approvals"))
    keyboard.add(InlineKeyboardButton("‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ @username", callback_data="admin_user_comparison"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    bot.edit_message_text(
        "üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_diagnostics_callback(call):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üíì –¢–µ—Å—Ç Keep Alive", callback_data="test_keepalive"))
    keyboard.add(InlineKeyboardButton("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="test_system"))
    keyboard.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="bot_status_info"))
    keyboard.add(InlineKeyboardButton("üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="performance_metrics"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    bot.edit_message_text(
        "üîß **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_help_callback(call):
    user_id = call.from_user.id
    is_admin = validate_admin(user_id)
    
    help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

üéµ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–∞—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å—å–±–µ –ø—Ä–µ—Å–µ–π–≤–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–ø–ø—Ä—É–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ–π–≤–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üì± **–ö–æ–º–∞–Ω–¥—ã:**
/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/mystat - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/presavestats - –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
/recent - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫

üèÜ **–ó–≤–∞–Ω–∏—è –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ–π–≤—ã:**
ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π (1-5 –∞–ø–ø—Ä—É–≤–æ–≤)
ü•à –ù–∞–¥–µ–∂–Ω—ã–π –ø—Ä–µ—Å–µ–π–≤–µ—Ä (6-15) - –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
ü•á –ú–µ–≥–∞-—á–µ–ª–æ–≤–µ—á–∏—â–µ (16-30) - –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ (31+) - –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
"""
    
    if is_admin:
        help_text += """

üëë **–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤ –ª–∏–º–∏—Ç–æ–≤  
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –±–æ—Ç–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
"""
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    bot.edit_message_text(
        help_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def handle_recent_callback(call):
    recent_links = db_manager.get_recent_links(10)
    
    if not recent_links:
        text = "üìé –ü–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ"
    else:
        text = "üìé **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫:**\n\n"
        for i, link_data in enumerate(recent_links, 1):
            username = link_data['username'] or 'Unknown'
            message_id = link_data['message_id']
            message_link = f"https://t.me/c/{abs(GROUP_ID)}/{message_id}"
            text += f"{i}. @{username} - [–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É]({message_link})\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

# –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤
def handle_activate_bot_callback(call):
    db_manager.set_bot_active(True)
    bot_status["enabled"] = True
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="bot_settings"))
    bot.edit_message_text("‚úÖ **–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_deactivate_bot_callback(call):
    db_manager.set_bot_active(False)
    bot_status["enabled"] = False
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="bot_settings"))
    bot.edit_message_text("‚è∏Ô∏è **–ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_change_reminder_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reminder_edit"))
    bot.edit_message_text("üí¨ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_clear_specific_data_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clear_data_menu"))
    bot.edit_message_text("‚úÖ **–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_rate_modes_menu_callback(call):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bot_settings"))
    bot.edit_message_text("üéõÔ∏è **–†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_clear_data_menu_callback(call):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bot_settings"))
    bot.edit_message_text("üóëÔ∏è **–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_cancel_reminder_edit_callback(call):
    handle_bot_settings_callback(call)

def handle_test_keepalive_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", callback_data="diagnostics"))
    bot.edit_message_text("üíì **Keep Alive Test: ‚úÖ OK**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_test_system_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", callback_data="diagnostics"))
    bot.edit_message_text("üîß **–°–∏—Å—Ç–µ–º–∞: ‚úÖ OK**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_bot_status_info_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", callback_data="diagnostics"))
    bot.edit_message_text("ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_performance_metrics_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", callback_data="diagnostics"))
    bot.edit_message_text("üìà **–ú–µ—Ç—Ä–∏–∫–∏: –í—Å–µ –≤ –Ω–æ—Ä–º–µ**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_setmode_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∂–∏–º–∞–º", callback_data="rate_modes_menu"))
    bot.edit_message_text("‚úÖ **–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_alllinks_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    bot.edit_message_text("üìé **–≠–∫—Å–ø–æ—Ä—Ç —Å—Å—ã–ª–æ–∫**\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

# –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö callback'–æ–≤
def handle_admin_user_links_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_analytics"))
    bot.edit_message_text("üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ username", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_admin_user_approvals_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_analytics"))
    bot.edit_message_text("‚úÖ **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–ø–ø—Ä—É–≤–æ–≤**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ username", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_admin_user_comparison_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_analytics"))
    bot.edit_message_text("‚öñÔ∏è **–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ username", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_user_links_search_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_analytics"))
    bot.edit_message_text("üìä **–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ username", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_user_approvals_search_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_analytics"))
    bot.edit_message_text("‚úÖ **–ü–æ–∏—Å–∫ –∞–ø–ø—Ä—É–≤–æ–≤**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ username", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

def handle_user_comparison_search_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_analytics"))
    bot.edit_message_text("‚öñÔ∏è **–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ username", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

# ================================
# 11. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ================================

@bot.message_handler(content_types=['photo'])
@topic_restricted
@request_logging
def handle_photo_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–ø–ø—Ä—É–≤"""
    user_id = message.from_user.id
    
    # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    if user_id in user_sessions:
        session = user_sessions[user_id]
        if session.is_expired():
            clear_user_sessions_simple(user_id)
            bot.reply_to(message, "‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /menu")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_sessions:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ /menu")
        return
    
    session = user_sessions[user_id]
    if session.state != UserState.CLAIMING_PRESAVE_SCREENSHOTS:
        bot.reply_to(message, "‚ùå –°–µ–π—á–∞—Å –Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ã")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = bot.get_file(message.photo[-1].file_id)  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if not validate_screenshot_size(file_info.file_size):
            bot.reply_to(message, f"‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–ª–∏–º–∏—Ç: {MAX_SCREENSHOT_SIZE//1024//1024}MB)")
            return

        if file_info.file_size < 1024:  # 1KB –º–∏–Ω–∏–º—É–º
            bot.reply_to(message, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            downloaded_file = bot.download_file(file_info.file_path)
        except Exception as download_error:
            log_user_action(user_id, "ERROR", f"File download failed: {str(download_error)}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        file_extension = get_file_extension_from_telegram(file_info.file_path)
        
        if file_extension not in ALLOWED_PHOTO_FORMATS:
            bot.reply_to(message, f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {', '.join(ALLOWED_PHOTO_FORMATS)}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        current_screenshots = len(presave_claim_sessions.get(user_id, PresaveClaimSession([], "", user_id, datetime.now())).screenshots)
        if current_screenshots >= MAX_SCREENSHOTS_PER_CLAIM:
            bot.reply_to(message, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_SCREENSHOTS_PER_CLAIM} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω—É –∑–∞—è–≤–∫—É")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if db_manager.save_screenshot(message.photo[-1].file_id, user_id, 
                                    downloaded_file, file_extension):
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            if user_id not in presave_claim_sessions:
                presave_claim_sessions[user_id] = PresaveClaimSession(
                    screenshots=[], comment="", user_id=user_id, timestamp=datetime.now()
                )
            
            presave_claim_sessions[user_id].screenshots.append(message.photo[-1].file_id)
            
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data="add_screenshot"))
            keyboard.add(InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é", callback_data="proceed_to_comment"))
            keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_claim_{user_id}"))
            
            bot.reply_to(message, 
                        f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω! (–í—Å–µ–≥–æ: {len(presave_claim_sessions[user_id].screenshots)})",
                        reply_markup=keyboard)
            
            log_user_action(user_id, "SCREENSHOT_UPLOAD", 
                          f"Total screenshots: {len(presave_claim_sessions[user_id].screenshots)}")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            
    except Exception as e:
        log_user_action(user_id, "ERROR", f"Screenshot processing error: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")

@bot.message_handler(content_types=['text'])
@request_logging
def handle_text_messages(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ"""
    user_id = message.from_user.id
    context = determine_chat_context(message)
    
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ç–æ–ø–∏–∫–µ
    if context != "correct_thread":
        return  # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è - –µ—Å–ª–∏ –¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if user_id in user_sessions:
        session = user_sessions[user_id]
        if session.state == UserState.ASKING_PRESAVE_COMPLETE:
            return  # –ü—É—Å—Ç—å handle_interactive_group_messages –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db_manager.add_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    text = message.text or ""
    links = extract_links_from_text(text)
    external_links = [link for link in links if is_external_link(link)]
    
    if external_links:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –ë–î –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        for link in external_links:
            db_manager.add_user_link(user_id, link, message.message_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –∫—Ä–æ–º–µ —Å—Å—ã–ª–æ–∫
        text_without_links = text
        for link in external_links:
            text_without_links = text_without_links.replace(link, "").strip()
        
        text_without_links = ' '.join(text_without_links.split())
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–æ–ª–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤) - —ç—Ç–æ –ø—Ä–æ—Å—å–±–∞ –æ –ø—Ä–µ—Å–µ–π–≤–µ
        if len(text_without_links) > 5:
            username = safe_username(message.from_user)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
            bot_post_text = f"{safe_string(text_without_links, 500)}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
            for link in external_links:
                bot_post_text += f"{link}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ü–µ
            bot_post_text += f"\n@{username}"
            
            try:
                # –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ —Ç–æ–º –∂–µ —Ç–æ–ø–∏–∫–µ
                published_message = send_message_to_thread(
                    GROUP_ID,
                    bot_post_text,
                    THREAD_ID,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ –ø—Ä–æ—Å—å–±—É –æ –ø—Ä–µ—Å–µ–π–≤–µ
                db_manager.add_presave_request(
                    user_id=user_id,
                    links=external_links,
                    comment=text_without_links,
                    message_id=published_message.message_id
                )
                
                # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot.delete_message(message.chat.id, message.message_id)
                except Exception as delete_error:
                    log_user_action(user_id, "WARNING", f"Could not delete original message: {str(delete_error)}")
                
                log_user_action(user_id, "REQUEST_PRESAVE", f"Auto-processed from direct message with {len(external_links)} links")
                
            except Exception as publish_error:
                log_user_action(user_id, "ERROR", f"Failed to publish presave request: {str(publish_error)}")
        
        # –í –õ–Æ–ë–û–ú –°–õ–£–ß–ê–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤—ã
        recent_requests = db_manager.get_recent_presave_requests(10)
        
        response_text = REMINDER_TEXT + "\n\n"
        response_text += "üéµ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Å—å–±—ã –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö:**\n"
        
        for i, request in enumerate(recent_requests, 1):
            username = request.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message_link = f"https://t.me/c/{abs(GROUP_ID)}/{request['message_id']}"
            response_text += f"{i}. @{username} - [–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É]({message_link})\n"
        
        if not recent_requests:
            response_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö"
        
        bot.reply_to(message, response_text, parse_mode='Markdown')
        
        log_user_action(user_id, "LINK_DETECTED", f"External links: {len(external_links)}")

@bot.message_handler(content_types=['text'], func=lambda m: m.chat.type == 'private')
@request_logging
def handle_private_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    if user_id in user_sessions:
        session = user_sessions[user_id]
        if session.is_expired():
            clear_user_sessions_simple(user_id)
            bot.reply_to(message, "‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /menu")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_sessions:
        session = user_sessions[user_id]
        
        if session.state == UserState.CLAIMING_PRESAVE_COMMENT:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤
            comment = message.text.strip()
            
            if len(comment) > 500:
                bot.reply_to(message, "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤")
                return
            
            if len(comment) < 3:
                bot.reply_to(message, "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
                return
            
            if user_id not in presave_claim_sessions:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
                return
            
            presave_claim_sessions[user_id].comment = comment
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            try:
                session = presave_claim_sessions[user_id]
                screenshots_count = len(session.screenshots)
                comment_text = safe_string(session.comment, 100)
                
                confirmation_text = f"""üì∏ **–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–ø–ø—Ä—É–≤ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ**

üñºÔ∏è **–°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:** {screenshots_count}
üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {comment_text}

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∞–º –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ?
"""
                
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"submit_claim_{user_id}"))
                keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_claim_{user_id}"))
                
                bot.reply_to(message, confirmation_text, reply_markup=keyboard, parse_mode='Markdown')
                
            except Exception as e:
                bot.reply_to(message, "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏**", parse_mode='Markdown')
                log_user_action(user_id, "ERROR", f"Failed to show claim confirmation: {str(e)}")
                
        else:
            bot.reply_to(message, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu")
    else:
        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        bot.reply_to(message, """
ü§ñ **Do Presave Reminder Bot by Mister DMS v24.19** - Menu Fixes

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
üì± /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚ùì /help - —Å–ø—Ä–∞–≤–∫–∞

–í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é.
""")

# ================================
# 12. –°–ò–°–¢–ï–ú–ê KEEP ALIVE –ò WEBHOOK (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# ================================

def keep_alive_worker():
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        try:
            time.sleep(300)  # 5 –º–∏–Ω—É—Ç
            
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cleanup_expired_sessions()
            cleanup_expired_screenshots()
            db_manager.cleanup_expired_screenshots()
            
            # Keep alive –∑–∞–ø—Ä–æ—Å
            render_url = os.getenv('RENDER_EXTERNAL_URL')
            if render_url:
                url = f"https://{render_url}/keepalive"
                
                success = make_keep_alive_request(url)
                log_user_action(0, "KEEP_ALIVE_PING", f"Success: {success}, URL: {url}")
                
                if success:
                    metrics.increment('keepalive.success')
                else:
                    metrics.increment('keepalive.failure')
            
        except Exception as e:
            centralized_error_logger(error=e, context="Keep alive worker")
            metrics.increment('keepalive.error')

class WebhookHandler(BaseHTTPRequestHandler):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π HTTP handler –¥–ª—è webhook"""
    
    def do_POST(self):
        client_ip = self.client_address[0]
        
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if not security.verify_telegram_request(self.headers, content_length, client_ip):
                self.send_response(401)
                self.end_headers()
                return
            
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            post_data = self.rfile.read(content_length)
            
            # Health check (–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)
            if content_length == 0:
                self.send_response(200)
                self.end_headers()
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON
            try:
                update_data = json.loads(post_data.decode('utf-8'))
                update = telebot.types.Update.de_json(update_data)
                
                if update:
                    bot.process_new_updates([update])
                    metrics.increment('webhook.processed')
                
            except (ValueError, TypeError, json.JSONDecodeError) as parse_error:
                log_user_action(0, "ERROR", f"Webhook JSON parsing error: {str(parse_error)}")
                metrics.increment('webhook.parse_error')
            
            # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            
        except Exception as e:
            centralized_error_logger(error=e, context=f"Webhook processing from {client_ip}")
            self.send_response(500)
            self.end_headers()
    
    def do_GET(self):
        if self.path == '/' or self.path == '/health':
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            health_data = {
                "status": "healthy",
                "service": "do-presave-reminder-bot",
                "version": "v24.19-menu-fixes",
                "timestamp": time.time()
            }
            
            response_json = json.dumps(health_data, indent=2)
            self.wfile.write(response_json.encode('utf-8'))
            
        elif self.path == '/keepalive':
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            keepalive_data = {
                "status": "alive",
                "timestamp": time.time(),
                "uptime_check": "‚úÖ OK"
            }
            
            response_json = json.dumps(keepalive_data, indent=2)
            self.wfile.write(response_json.encode('utf-8'))
            
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        pass

# ================================
# 13. –ó–ê–ü–£–°–ö –ë–û–¢–ê –° GRACEFUL SHUTDOWN
# ================================

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info("üõë Received shutdown signal, cleaning up...")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
    user_sessions.clear()
    presave_request_sessions.clear()
    presave_claim_sessions.clear()
    
    # –û—á–∏—Å—Ç–∫–∞ rate limiters
    method_limits_tracker.clear()
    
    logger.info("‚úÖ Cleanup completed, shutting down...")
    exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –º–µ–Ω—é V24.19"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        missing_vars = [var for var in REQUIRED_VARS if not os.getenv(var)]
        if missing_vars:
            logger.error(f"‚ùå Missing required environment variables: {missing_vars}")
            return
        
        logger.info("üöÄ Starting Do Presave Reminder Bot by Mister DMS v24.19 - Menu Fixes")
        logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è callback handler'–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        logger.info("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–∞")
        logger.info("‚úÖ –£–±—Ä–∞–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ rate limiting –¥–ª—è callback'–æ–≤")
        logger.info(f"üîß Admin IDs: {ADMIN_IDS}")
        logger.info(f"üìä Target Group: {GROUP_ID}, Target Thread: {THREAD_ID}")
        logger.info(f"üéØ Bot will work ONLY in: https://t.me/c/{str(abs(GROUP_ID))}/{THREAD_ID} and private chats")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        db_manager.create_tables()
        logger.info("‚úÖ Database initialized")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
        render_url = os.getenv('RENDER_EXTERNAL_URL')
        port = int(os.getenv('PORT', 5000))

        if not render_url:
            service_name = os.getenv('RENDER_SERVICE_NAME')
            if service_name:
                render_url = f"{service_name}.onrender.com"
                logger.info(f"üîß Auto-detected Render URL: {render_url}")
            else:
                logger.error("‚ùå RENDER_EXTERNAL_URL not set, switching to polling mode...")
                start_polling_mode()
                return

        webhook_url = f"https://{clean_url(render_url)}/{BOT_TOKEN}"
        
        try:
            logger.info(f"üîß Setting up webhook: {webhook_url}")
            
            webhook_set = bot.set_webhook(
                webhook_url, 
                secret_token=WEBHOOK_SECRET if WEBHOOK_SECRET != "your_secret" else None
            )
            
            if webhook_set:
                logger.info(f"‚úÖ Webhook successfully set: {webhook_url}")
            else:
                logger.error("‚ùå Failed to set webhook")
                return
                
        except Exception as webhook_error:
            logger.error(f"‚ùå Webhook setup failed: {webhook_error}")
            return
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        logger.info("üîÑ Starting background processes...")
        
        keep_alive_thread = threading.Thread(target=keep_alive_worker, daemon=True)
        keep_alive_thread.start()
        logger.info("üíì Keep-alive worker started")
        
        # –°—Ç–∞—Ä—Ç–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        try:
            cleanup_expired_sessions()
            cleanup_expired_screenshots()
            db_manager.cleanup_expired_screenshots()
            logger.info("üßπ Initial cleanup completed")
        except Exception as cleanup_error:
            logger.warning(f"‚ö†Ô∏è Initial cleanup warning: {cleanup_error}")
        
        # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        logger.info(f"üåê Starting HTTP server on port {port}")
        logger.info(f"üì± Webhook URL: https://{render_url}/{BOT_TOKEN}")
        logger.info(f"üîß Health check: https://{render_url}/health")
        
        try:
            bot_info = bot.get_me()
            logger.info(f"ü§ñ Bot info: @{bot_info.username} (ID: {bot_info.id})")
        except Exception as bot_info_error:
            logger.warning(f"‚ö†Ô∏è Could not get bot info: {bot_info_error}")
        
        with HTTPServer(('0.0.0.0', port), WebhookHandler) as httpd:
            logger.info("‚úÖ HTTP server is ready and serving requests")
            logger.info("üéµ Bot is monitoring for external links in the target thread")
            logger.info("üì± –ú–µ–Ω—é —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π")
            logger.info("üîÑ –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è '–ù–∞–∑–∞–¥' –∞–∫—Ç–∏–≤–Ω–∞")
            httpd.serve_forever()
            
    except Exception as e:
        logger.error(f"üö® Bot startup failed: {str(e)}")
        centralized_error_logger(error=e, context="Bot startup")
        raise

def start_polling_mode():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    try:
        logger.info("üîÑ Starting bot in polling mode")
        
        # –£–¥–∞–ª—è–µ–º webhook
        try:
            bot.remove_webhook()
            logger.info("‚úÖ Webhook removed, switching to polling")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not remove webhook: {e}")
        
        # –ó–∞–ø—É—Å–∫ keep-alive
        keep_alive_thread = threading.Thread(target=keep_alive_worker, daemon=True)
        keep_alive_thread.start()
        logger.info("üíì Keep-alive worker started")
        
        # –°—Ç–∞—Ä—Ç–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        cleanup_expired_sessions()
        cleanup_expired_screenshots()
        db_manager.cleanup_expired_screenshots()
        logger.info("üßπ Initial cleanup completed")
        
        # –ó–∞–ø—É—Å–∫ polling
        logger.info("ü§ñ Bot is now running in polling mode...")
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
        
    except Exception as e:
        logger.error(f"üö® Polling mode failed: {e}")
        centralized_error_logger(error=e, context="Polling mode startup")
        raise

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
        signal_handler(None, None)
    except Exception as e:
        logger.error(f"üö® Fatal error: {e}")
        centralized_error_logger(error=e, context="Main execution")
        raise
