# Current version: v21-fixed
# Presave Reminder Bot - –í–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤
# –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π v20, –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è + —Ñ–∏–∫—Å webhook security –¥–ª—è production

import logging
import re
import sqlite3
import time
import threading
import os
import json
import urllib.parse
import hmac
import hashlib
from datetime import datetime, timedelta
from typing import Optional
from http.server import HTTPServer, BaseHTTPRequestHandler
import socketserver
from collections import defaultdict
from contextlib import contextmanager
from queue import Queue

import telebot
from telebot import types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))  # -1002811959953
THREAD_ID = int(os.getenv('THREAD_ID'))  # 3
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x]
DEFAULT_REMINDER = os.getenv('REMINDER_TEXT', 'üéß –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤—ã—à–µ! ‚ô•Ô∏è')

# === –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò v21 ===
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', None)
DB_POOL_SIZE = int(os.getenv('DB_POOL_SIZE', '5'))
WEBHOOK_RATE_LIMIT = int(os.getenv('WEBHOOK_RATE_LIMIT', '100'))

# === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ï–ñ–ò–ú–û–í –õ–ò–ú–ò–¢–û–í ===
def load_rate_limit_modes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–∂–∏–º–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return {
        'conservative': {
            'name': 'üü¢ CONSERVATIVE',
            'description': '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º - 5% –æ—Ç –ª–∏–º–∏—Ç–∞ Telegram',
            'max_responses_per_hour': int(os.getenv('CONSERVATIVE_MAX_HOUR', '60')),  # 60/—á–∞—Å = 1/–º–∏–Ω
            'min_cooldown_seconds': int(os.getenv('CONSERVATIVE_COOLDOWN', '60')),   # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
            'emoji': 'üê¢',
            'risk': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π'
        },
        'normal': {
            'name': 'üü° NORMAL', 
            'description': '–†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º - 15% –æ—Ç –ª–∏–º–∏—Ç–∞ Telegram',
            'max_responses_per_hour': int(os.getenv('NORMAL_MAX_HOUR', '180')),     # 180/—á–∞—Å = 3/–º–∏–Ω
            'min_cooldown_seconds': int(os.getenv('NORMAL_COOLDOWN', '20')),        # 20 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
            'emoji': '‚öñÔ∏è',
            'risk': '–ù–∏–∑–∫–∏–π'
        },
        'burst': {
            'name': 'üü† BURST',
            'description': '–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º - 50% –æ—Ç –ª–∏–º–∏—Ç–∞ Telegram',
            'max_responses_per_hour': int(os.getenv('BURST_MAX_HOUR', '600')),      # 600/—á–∞—Å = 10/–º–∏–Ω
            'min_cooldown_seconds': int(os.getenv('BURST_COOLDOWN', '6')),          # 6 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
            'emoji': '‚ö°',
            'risk': '–°—Ä–µ–¥–Ω–∏–π'
        },
        'admin_burst': {
            'name': 'üî¥ ADMIN_BURST',
            'description': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - 100% –ª–∏–º–∏—Ç–∞ –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)',
            'max_responses_per_hour': int(os.getenv('ADMIN_BURST_MAX_HOUR', '1200')), # 1200/—á–∞—Å = 20/–º–∏–Ω (–≥—Ä—É–ø–ø–∞ –ª–∏–º–∏—Ç)
            'min_cooldown_seconds': int(os.getenv('ADMIN_BURST_COOLDOWN', '3')),       # 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
            'emoji': 'üö®',
            'risk': '–í–´–°–û–ö–ò–ô',
            'admin_only': True
        }
    }

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
RATE_LIMIT_MODES = load_rate_limit_modes()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RESPONSE_DELAY = int(os.getenv('RESPONSE_DELAY', '3'))

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', 'misterdms-presave-bot.onrender.com')
WEBHOOK_PORT = int(os.getenv('PORT', 10000))
WEBHOOK_PATH = f"/{BOT_TOKEN}/"
WEBHOOK_URL = f"https://{WEBHOOK_HOST}{WEBHOOK_PATH}"

# Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
URL_PATTERN = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –ù–û–í–´–ï –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò v21 ===

class WebhookRateLimiter:
    """Rate limiting –¥–ª—è webhook endpoint"""
    def __init__(self, max_requests: int = WEBHOOK_RATE_LIMIT, window_seconds: int = 60):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.requests = defaultdict(list)
        self.lock = threading.Lock()
    
    def is_allowed(self, client_ip: str) -> bool:
        with self.lock:
            now = time.time()
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            self.requests[client_ip] = [
                req_time for req_time in self.requests[client_ip] 
                if now - req_time < self.window_seconds
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(self.requests[client_ip]) >= self.max_requests:
                logger.warning(f"üö® RATE_LIMIT: Blocked {client_ip} ({len(self.requests[client_ip])} requests)")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self.requests[client_ip].append(now)
            return True

class DatabasePool:
    """Connection pooling –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î"""
    def __init__(self, db_path: str, pool_size: int = DB_POOL_SIZE):
        self.db_path = db_path
        self.pool = Queue(maxsize=pool_size)
        self.lock = threading.Lock()
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for _ in range(pool_size):
            conn = sqlite3.connect(db_path, check_same_thread=False)
            conn.execute("PRAGMA journal_mode=WAL")  # –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            conn.execute("PRAGMA synchronous=NORMAL")
            conn.execute("PRAGMA cache_size=10000")
            self.pool.put(conn)
        
        logger.info(f"‚úÖ DB_POOL: Created connection pool with {pool_size} connections")
    
    @contextmanager
    def get_connection(self):
        conn = self.pool.get()
        try:
            yield conn
        finally:
            self.pool.put(conn)

class SecurityValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç SQL Injection"""
    
    @staticmethod
    def sanitize_username(username: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è username"""
        if not username:
            return "anonymous"
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
        clean = re.sub(r'[^\w]', '', username.replace('@', ''))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return clean[:50] if clean else "anonymous"
    
    @staticmethod
    def validate_text_input(text: str, max_length: int = 1000) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        if not text or not isinstance(text, str):
            return ""
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        safe_text = re.sub(r'[<>"\']', '', text)
        return safe_text[:max_length]
    
    @staticmethod
    def verify_telegram_request(headers: dict, content_length: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ webhook –æ—Ç Telegram - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è production"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–∫—Ä–∏—Ç–∏—á–Ω–æ)
        if content_length > 1024 * 1024:  # 1MB –ª–∏–º–∏—Ç
            logger.warning(f"üö® SECURITY: Payload too large: {content_length}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ secret token (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω) - –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞
        if WEBHOOK_SECRET:
            received_token = headers.get('X-Telegram-Bot-Api-Secret-Token')
            if received_token != WEBHOOK_SECRET:
                logger.warning(f"üö® SECURITY: Invalid webhook secret")
                return False
        
        # –õ–æ–≥–∏—Ä—É–µ–º User-Agent –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –Ω–æ –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º
        user_agent = headers.get('User-Agent', 'Not provided')
        logger.info(f"üîç WEBHOOK_UA: User-Agent: {user_agent}")
        
        # –í production Telegram –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ User-Agent'—ã –∏–ª–∏ –ø—Ä–æ–∫—Å–∏
        # –ü–æ—ç—Ç–æ–º—É –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ secret token –∏ —Ä–∞–∑–º–µ—Ä payload
        
        return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
rate_limiter = WebhookRateLimiter()
security = SecurityValidator()

# === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–ñ–ò–ú–ê–ú–ò ===

def get_current_limits():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    try:
        current_mode = db.get_current_rate_mode()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∂–∏–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if current_mode not in RATE_LIMIT_MODES:
            logger.warning(f"Unknown rate mode: {current_mode}, falling back to conservative")
            current_mode = 'conservative'
            db.set_current_rate_mode('conservative')
        
        mode_config = RATE_LIMIT_MODES[current_mode]
        
        return {
            'max_responses_per_hour': max(mode_config.get('max_responses_per_hour', 60), 1),
            'min_cooldown_seconds': max(mode_config.get('min_cooldown_seconds', 60), 1),
            'mode_name': mode_config.get('name', 'üü¢ CONSERVATIVE'),
            'mode_emoji': mode_config.get('emoji', 'üê¢')
        }
    except Exception as e:
        logger.error(f"Error getting current limits: {e}")
        # Fallback –∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        return {
            'max_responses_per_hour': 60,
            'min_cooldown_seconds': 60, 
            'mode_name': 'üü¢ CONSERVATIVE (FALLBACK)',
            'mode_emoji': 'üê¢'
        }

def set_rate_limit_mode(new_mode: str, user_id: int) -> tuple[bool, str]:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    if new_mode not in RATE_LIMIT_MODES:
        return False, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {new_mode}"
    
    mode_config = RATE_LIMIT_MODES[new_mode]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è admin_burst
    if mode_config.get('admin_only', False) and not is_admin(user_id):
        return False, f"‚ùå –†–µ–∂–∏–º {mode_config['name']} –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
    
    old_mode = db.get_current_rate_mode()
    old_config = RATE_LIMIT_MODES.get(old_mode, {})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.set_current_rate_mode(new_mode)
    
    # –°–±—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    db.reset_rate_limits()
    
    change_text = f"""
üîÑ –†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ –∏–∑–º–µ–Ω—ë–Ω!

üìâ –ë—ã–ª–æ: {old_config.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤/—á–∞—Å: {old_config.get('max_responses_per_hour', 'N/A')}
‚Ä¢ Cooldown: {old_config.get('min_cooldown_seconds', 'N/A')} —Å–µ–∫

üìà –°—Ç–∞–ª–æ: {mode_config['name']}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤/—á–∞—Å: {mode_config['max_responses_per_hour']}
‚Ä¢ Cooldown: {mode_config['min_cooldown_seconds']} —Å–µ–∫

‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {mode_config['risk']}

‚úÖ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    """
    
    logger.info(f"üîÑ RATE_MODE: Changed from {old_mode} to {new_mode} by user {user_id}")
    logger.info(f"üìä NEW_LIMITS: {mode_config['max_responses_per_hour']}/hour, {mode_config['min_cooldown_seconds']}s cooldown")
    
    return True, change_text

def reload_rate_limit_modes():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∂–∏–º–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    global RATE_LIMIT_MODES
    RATE_LIMIT_MODES = load_rate_limit_modes()
    logger.info("üîÑ RELOAD: Rate limit modes reloaded from environment variables")

class Database:
    def __init__(self, db_path: str = "bot.db"):
        self.db_path = db_path
        self.pool = DatabasePool(db_path, DB_POOL_SIZE)
        logger.info(f"‚úÖ DATABASE: Initialized with connection pooling")
    
    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞"""
        return self.pool.get_connection()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å—Å—ã–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_links (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    total_links INTEGER DEFAULT 0,
                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS link_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    link_url TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    message_id INTEGER
                )
            ''')
            
            # –õ–æ–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_responses (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    response_text TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_activity (
                    id INTEGER PRIMARY KEY,
                    is_active BOOLEAN DEFAULT 1,
                    responses_today INTEGER DEFAULT 0,
                    last_response_time TIMESTAMP,
                    last_reset_date DATE DEFAULT CURRENT_DATE
                )
            ''')
            
            # –õ–∏–º–∏—Ç—ã –∏ cooldown
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS rate_limits (
                    id INTEGER PRIMARY KEY,
                    hourly_responses INTEGER DEFAULT 0,
                    last_hour_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    cooldown_until TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_link_history_timestamp ON link_history(timestamp)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_bot_responses_timestamp ON bot_responses(timestamp)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_links_total ON user_links(total_links)')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            cursor.execute('INSERT OR IGNORE INTO bot_activity (id, is_active) VALUES (1, 1)')
            cursor.execute('INSERT OR IGNORE INTO rate_limits (id) VALUES (1)')
            cursor.execute(
                'INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)',
                ('reminder_text', DEFAULT_REMINDER)
            )
            cursor.execute(
                'INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)',
                ('rate_limit_mode', 'conservative')
            )
            
            conn.commit()
            logger.info("‚úÖ DATABASE: Database initialized successfully with v21 improvements")

    def add_user_links(self, user_id: int, username: str, links: list, message_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        safe_username = security.sanitize_username(username)
        
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                INSERT OR REPLACE INTO user_links (user_id, username, total_links, last_updated)
                VALUES (?, ?, COALESCE((SELECT total_links FROM user_links WHERE user_id = ?), 0) + ?, CURRENT_TIMESTAMP)
            ''', (user_id, safe_username, user_id, len(links)))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            for link in links:
                safe_link = security.validate_text_input(link, 2000)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Å—ã–ª–∫–∏
                cursor.execute('''
                    INSERT INTO link_history (user_id, link_url, message_id)
                    VALUES (?, ?, ?)
                ''', (user_id, safe_link, message_id))
            
            conn.commit()

    def log_bot_response(self, user_id: int, response_text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
        safe_response = security.validate_text_input(response_text, 4000)
        
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO bot_responses (user_id, response_text)
                VALUES (?, ?)
            ''', (user_id, safe_response))
            conn.commit()

    def is_bot_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT is_active FROM bot_activity WHERE id = 1')
            result = cursor.fetchone()
            return bool(result[0]) if result else False

    def set_bot_active(self, active: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE bot_activity SET is_active = ? WHERE id = 1', (active,))
            conn.commit()

    def can_send_response(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT hourly_responses, last_hour_reset, cooldown_until
                FROM rate_limits WHERE id = 1
            ''')
            result = cursor.fetchone()
            
            if not result:
                return False, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"
            
            hourly_responses, last_hour_reset, cooldown_until = result
            now = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ª–∏–º–∏—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            current_limits = get_current_limits()
            max_responses = current_limits['max_responses_per_hour'] 
            cooldown_seconds = current_limits['min_cooldown_seconds']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            if cooldown_until:
                cooldown_time = datetime.fromisoformat(cooldown_until)
                if now < cooldown_time:
                    remaining = int((cooldown_time - now).total_seconds())
                    return False, f"Cooldown –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫ (—Ä–µ–∂–∏–º: {current_limits['mode_name']})"
            
            # –°–±—Ä–æ—Å –ø–æ—á–∞—Å–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
            if last_hour_reset:
                last_reset = datetime.fromisoformat(last_hour_reset)
                if now - last_reset > timedelta(hours=1):
                    cursor.execute('''
                        UPDATE rate_limits 
                        SET hourly_responses = 0, last_hour_reset = ?
                        WHERE id = 1
                    ''', (now.isoformat(),))
                    hourly_responses = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
            if hourly_responses >= max_responses:
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {max_responses} –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å (—Ä–µ–∂–∏–º: {current_limits['mode_name']})"
            
            return True, "OK"

    def update_response_limits(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            now = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ô cooldown –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            current_limits = get_current_limits()
            cooldown_seconds = current_limits['min_cooldown_seconds']
            cooldown_until = now + timedelta(seconds=cooldown_seconds)
            
            cursor.execute('''
                UPDATE rate_limits 
                SET hourly_responses = hourly_responses + 1,
                    cooldown_until = ?
                WHERE id = 1
            ''', (cooldown_until.isoformat(),))
            
            conn.commit()

    def reset_rate_limits(self):
        """–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE rate_limits 
                SET hourly_responses = 0,
                    cooldown_until = NULL,
                    last_hour_reset = ?
                WHERE id = 1
            ''', (datetime.now().isoformat(),))
            conn.commit()
            logger.info("üîÑ RATE_RESET: Rate limits reset due to mode change")

    def get_user_stats(self, username: str = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            if username:
                safe_username = security.sanitize_username(username)
                cursor.execute('''
                    SELECT username, total_links, last_updated
                    FROM user_links 
                    WHERE username = ? AND total_links > 0
                ''', (safe_username,))
                result = cursor.fetchone()
                return result
            else:
                cursor.execute('''
                    SELECT username, total_links, last_updated
                    FROM user_links 
                    WHERE total_links > 0
                    ORDER BY total_links DESC
                    LIMIT 50
                ''')
                result = cursor.fetchall()
                return result

    def get_bot_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        with self.get_connection() as conn:
            try:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                cursor.execute('''
                    SELECT hourly_responses, cooldown_until FROM rate_limits WHERE id = 1
                ''')
                limits = cursor.fetchone()
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                cursor.execute('''
                    SELECT is_active, last_response_time FROM bot_activity WHERE id = 1
                ''')
                activity = cursor.fetchone()
                
                # –°—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                cursor.execute('''
                    SELECT COUNT(*) FROM bot_responses 
                    WHERE DATE(timestamp) = DATE('now')
                ''')
                today_responses = cursor.fetchone()
                
                # –ü–æ–ª—É—á–∞–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ª–∏–º–∏—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Å –∑–∞—â–∏—Ç–æ–π
                current_limits = get_current_limits()
                
                return {
                    'hourly_responses': limits[0] if limits and limits[0] is not None else 0,
                    'hourly_limit': current_limits['max_responses_per_hour'],
                    'cooldown_until': limits[1] if limits else None,
                    'is_active': bool(activity[0]) if activity and activity[0] is not None else False,
                    'last_response': activity[1] if activity else None,
                    'today_responses': today_responses[0] if today_responses and today_responses[0] is not None else 0
                }
                
            except Exception as e:
                logger.error(f"Database error in get_bot_stats: {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                return {
                    'hourly_responses': 0,
                    'hourly_limit': 60,
                    'cooldown_until': None,
                    'is_active': False,
                    'last_response': None,
                    'today_responses': 0
                }

    def clear_link_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫ (—Å—á—ë—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è)"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM link_history')
            conn.commit()

    def get_reminder_text(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT value FROM settings WHERE key = ?', ('reminder_text',))
            result = cursor.fetchone()
            return result[0] if result else DEFAULT_REMINDER

    def set_reminder_text(self, text: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        safe_text = security.validate_text_input(text, 4000)
        
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)
            ''', ('reminder_text', safe_text))
            conn.commit()

    def get_current_rate_mode(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT value FROM settings WHERE key = ?', ('rate_limit_mode',))
            result = cursor.fetchone()
            return result[0] if result else 'conservative'

    def set_current_rate_mode(self, mode: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)
            ''', ('rate_limit_mode', mode))
            conn.commit()
            logger.info(f"üéõÔ∏è RATE_MODE: Saved mode '{mode}' to database")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS

def extract_links(text: str) -> list:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return URL_PATTERN.findall(text)

def safe_send_message(chat_id: int, text: str, message_thread_id: int = None, reply_to_message_id: int = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info(f"üí¨ SEND_MESSAGE: Preparing to send message to chat {chat_id}")
        
        time.sleep(RESPONSE_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        
        if message_thread_id:
            result = bot.send_message(
                chat_id=chat_id, 
                text=text, 
                message_thread_id=message_thread_id,
                reply_to_message_id=reply_to_message_id
            )
        else:
            if reply_to_message_id:
                result = bot.reply_to(reply_to_message_id, text)
            else:
                result = bot.send_message(chat_id, text)
        
        logger.info(f"‚úÖ SENT: Message sent successfully")
        return True
    except Exception as e:
        logger.error(f"‚ùå SEND_ERROR: Failed to send message: {str(e)}")
        return False

# === –£–õ–£–ß–®–ï–ù–ù–´–ô WEBHOOK –°–ï–†–í–ï–† v21 ===

class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        client_ip = self.client_address[0]
        logger.info(f"üì® WEBHOOK_POST: Request from {client_ip} to {self.path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
        if not rate_limiter.is_allowed(client_ip):
            logger.warning(f"üö´ RATE_LIMITED: Blocked {client_ip}")
            self.send_response(429)  # Too Many Requests
            self.end_headers()
            return
        
        if self.path == WEBHOOK_PATH:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                content_length = int(self.headers.get('Content-Length', 0))
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram –∑–∞–ø—Ä–æ—Å–∞
                if not security.verify_telegram_request(self.headers, content_length):
                    logger.warning(f"üö® SECURITY: Invalid request from {client_ip}")
                    self.send_response(403)
                    self.end_headers()
                    return
                
                # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                post_data = self.rfile.read(content_length)
                logger.info(f"üì¶ WEBHOOK_DATA: Received {content_length} bytes")
                
                # –ü–∞—Ä—Å–∏–Ω–≥ JSON
                update_data = json.loads(post_data.decode('utf-8'))
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ update
                update = telebot.types.Update.de_json(update_data)
                
                if update:
                    bot.process_new_updates([update])
                    logger.info(f"‚úÖ WEBHOOK_PROCESSED: Update processed successfully")
                
                self.send_response(200)
                self.end_headers()
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå JSON_ERROR: {e}")
                self.send_response(400)
                self.end_headers()
            except Exception as e:
                logger.error(f"‚ùå WEBHOOK_ERROR: {str(e)}")
                self.send_response(500)
                self.end_headers()
        
        elif self.path == '/' or self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({
                "status": "healthy", 
                "service": "telegram-bot",
                "version": "v21-fixed",
                "security": "enhanced",
                "features": ["webhook_security", "connection_pooling", "keep_alive"]
            })
            self.wfile.write(response.encode())
        
        elif self.path == '/keepalive':
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å–æ–≤
            client_ip = self.client_address[0]
            logger.info(f"üíì KEEPALIVE: Keep-alive ping received from {client_ip}")
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            try:
                bot_active = db.is_bot_active()
                current_limits = get_current_limits()
                
                response = json.dumps({
                    "status": "alive",
                    "timestamp": time.time(),
                    "version": "v21-fixed",
                    "bot_active": bot_active,
                    "current_mode": current_limits['mode_name'],
                    "uptime_check": "‚úÖ OK"
                })
            except Exception as e:
                logger.error(f"‚ùå KEEPALIVE_ERROR: {e}")
                response = json.dumps({
                    "status": "alive_with_errors",
                    "timestamp": time.time(),
                    "error": str(e)
                })
            
            self.wfile.write(response.encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/' or self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({
                "status": "healthy", 
                "service": "telegram-bot",
                "version": "v21-fixed"
            })
            self.wfile.write(response.encode())
        
        elif self.path == '/keepalive':
            # Keep-alive endpoint –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ (UptimeRobot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GET)
            client_ip = self.client_address[0]
            logger.info(f"üíì KEEPALIVE_GET: Keep-alive ping (GET) from {client_ip}")
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            try:
                bot_active = db.is_bot_active()
                current_limits = get_current_limits()
                
                response = json.dumps({
                    "status": "alive",
                    "method": "GET",
                    "timestamp": time.time(),
                    "version": "v21-fixed",
                    "bot_active": bot_active,
                    "current_mode": current_limits['mode_name'],
                    "uptime_check": "‚úÖ OK"
                })
            except Exception as e:
                logger.error(f"‚ùå KEEPALIVE_GET_ERROR: {e}")
                response = json.dumps({
                    "status": "alive_with_errors",
                    "method": "GET", 
                    "timestamp": time.time(),
                    "error": str(e)
                })
            
            self.wfile.write(response.encode())
        elif self.path == WEBHOOK_PATH:
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            info_page = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Presave Reminder Bot v21-fixed - Webhook</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; }}
                    .header {{ text-align: center; color: #2196F3; }}
                    .status {{ background: #E8F5E8; padding: 15px; border-radius: 8px; margin: 20px 0; }}
                    .feature {{ background: #F0F8FF; padding: 10px; border-radius: 5px; margin: 10px 0; }}
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>ü§ñ Presave Reminder Bot v21-fixed</h1>
                    <h2>Enhanced Security Webhook</h2>
                </div>
                
                <div class="status">
                    <h3>‚úÖ Status: Active & Secured</h3>
                    <p>Production-ready version with fixed webhook security</p>
                </div>
                
                <div class="feature">
                    <h4>üîê Security Features</h4>
                    <ul>
                        <li>Flexible webhook validation for production</li>
                        <li>Rate limiting protection</li>
                        <li>SQL injection prevention</li>
                        <li>Connection pooling</li>
                    </ul>
                </div>
                
                <div class="feature">
                    <h4>üêõ Bug Fixes</h4>
                    <ul>
                        <li>Fixed division by zero in currentmode</li>
                        <li>Enhanced error handling</li>
                        <li>Database connection stability</li>
                        <li>Production webhook compatibility</li>
                    </ul>
                </div>
            </body>
            </html>
            """
            self.wfile.write(info_page.encode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        pass

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î v21 ===

@bot.message_handler(commands=['start'])
def cmd_start(message):
    if not is_admin(message.from_user.id):
        return
    
    bot.reply_to(message, """
ü§ñ Presave Reminder Bot v21-fixed –∑–∞–ø—É—â–µ–Ω!

üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è v21-fixed:
‚úÖ –§–∏–∫—Å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –≤ /currentmode
‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å webhook –¥–ª—è production
‚úÖ Connection pooling –¥–ª—è –ë–î
‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç SQL injection

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
    """)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ help —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–µ–∂–∏–º–æ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ v21:

üëë –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help ‚Äî —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/activate ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ
/deactivate ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ  
/stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
/botstat ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏–º–∏—Ç–æ–≤

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
/linkstats ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/topusers ‚Äî —Ç–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö
/userstat @username ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üéõÔ∏è –õ–∏–º–∏—Ç—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û):
/modes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤
/setmode <—Ä–µ–∂–∏–º> ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º
  ‚îî conservative ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π (60/—á–∞—Å)
  ‚îî normal ‚Äî —Ä–∞–±–æ—á–∏–π (180/—á–∞—Å) 
  ‚îî burst ‚Äî –±—ã—Å—Ç—Ä—ã–π (600/—á–∞—Å)
  ‚îî admin_burst ‚Äî –º–∞–∫—Å–∏–º—É–º (1200/—á–∞—Å) üëë
  ‚îî –ü—Ä–∏–º–µ—Ä: /setmode normal
/currentmode ‚Äî —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
/reloadmodes ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ Environment Variables

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
/setmessage —Ç–µ–∫—Å—Ç ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/clearhistory ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/test_regex ‚Äî —Ç–µ—Å—Ç —Å—Å—ã–ª–æ–∫
/alllinks ‚Äî –≤—Å–µ —Å—Å—ã–ª–∫–∏
/recent ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏

üÜï v21-fixed –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∞—à–∏ –∫–æ–º–∞–Ω–¥
‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å webhook –¥–ª—è production
‚úÖ Connection pooling
‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç SQL injection
    """
    
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['modes'])
def cmd_modes(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    if not is_admin(message.from_user.id):
        return
    
    reload_rate_limit_modes()
    
    modes_text = "üéõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ (v21-fixed):\n\n"
    
    for mode_key, mode_config in RATE_LIMIT_MODES.items():
        is_current = "‚úÖ " if mode_key == db.get_current_rate_mode() else "   "
        admin_mark = " üëë" if mode_config.get('admin_only', False) else ""
        
        msgs_per_min = round(mode_config['max_responses_per_hour'] / 60, 2)
        
        modes_text += f"{is_current}{mode_config['emoji']} **{mode_config['name']}**{admin_mark}\n"
        modes_text += f"   üìù {mode_config['description']}\n"
        modes_text += f"   üìä {mode_config['max_responses_per_hour']} –æ—Ç–≤–µ—Ç–æ–≤/—á–∞—Å ({msgs_per_min}/–º–∏–Ω)\n"
        modes_text += f"   ‚è±Ô∏è {mode_config['min_cooldown_seconds']}—Å –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏\n"
        modes_text += f"   ‚ö†Ô∏è –†–∏—Å–∫: {mode_config['risk']}\n\n"
    
    modes_text += "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: `/setmode <–Ω–∞–∑–≤–∞–Ω–∏–µ>`\n"
    modes_text += "üìã –†–µ–∂–∏–º—ã: conservative, normal, burst, admin_burst\n"
    modes_text += "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ Environment Variables"
    
    bot.reply_to(message, modes_text, parse_mode='Markdown')

@bot.message_handler(commands=['setmode'])
def cmd_set_mode(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split()
    if len(args) < 2:
        current_limits = get_current_limits()
        current_text = f"""
üéõÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_limits['mode_name']}

üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å: {current_limits['max_responses_per_hour']}
‚Ä¢ Cooldown: {current_limits['min_cooldown_seconds']} —Å–µ–∫—É–Ω–¥

üîÑ –î–ª—è —Å–º–µ–Ω—ã: `/setmode <—Ä–µ–∂–∏–º>`
üìã –†–µ–∂–∏–º—ã: conservative, normal, burst, admin_burst
üí° –ü—Ä–∏–º–µ—Ä: `/setmode normal`
        """
        bot.reply_to(message, current_text)
        return
    
    new_mode = security.validate_text_input(args[1].lower(), 50)
    logger.info(f"üîÑ SETMODE attempting to set mode: {new_mode} by user {message.from_user.id}")
    
    reload_rate_limit_modes()
    
    success, result_text = set_rate_limit_mode(new_mode, message.from_user.id)
    
    if success:
        logger.info(f"‚úÖ SETMODE successfully changed to {new_mode}")
    else:
        logger.warning(f"‚ùå SETMODE failed: {result_text}")
    
    bot.reply_to(message, result_text)

@bot.message_handler(commands=['currentmode'])
def cmd_current_mode(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        current_limits = get_current_limits()
        current_mode_key = db.get_current_rate_mode()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∂–∏–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if current_mode_key not in RATE_LIMIT_MODES:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setmode conservative")
            return
            
        mode_config = RATE_LIMIT_MODES[current_mode_key]
        bot_stats = db.get_bot_stats()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        max_responses = mode_config.get('max_responses_per_hour', 1)
        if max_responses <= 0:
            max_responses = 1
            
        usage_percent = round((bot_stats['hourly_responses'] / max_responses) * 100, 1)
        msgs_per_min = round(max_responses / 60, 2)
        
        current_text = f"""
üéõÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ v21-fixed:

{mode_config['emoji']} **{mode_config['name']}**
üìù {mode_config['description']}

üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {max_responses} –æ—Ç–≤–µ—Ç–æ–≤/—á–∞—Å ({msgs_per_min}/–º–∏–Ω)
‚Ä¢ Cooldown: {mode_config['min_cooldown_seconds']} —Å–µ–∫—É–Ω–¥
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {mode_config['risk']}

üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Å: {bot_stats['hourly_responses']}/{max_responses} ({usage_percent}%)
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {bot_stats['today_responses']}

üîß –ò—Å—Ç–æ—á–Ω–∏–∫: Environment Variables
üîÑ –°–º–µ–Ω–∏—Ç—å: `/setmode <—Ä–µ–∂–∏–º>` | –í—Å–µ —Ä–µ–∂–∏–º—ã: `/modes`
        """
        
        bot.reply_to(message, current_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in CURRENTMODE command: {str(e)}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {str(e)}")

@bot.message_handler(commands=['reloadmodes'])
def cmd_reload_modes(message):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∂–∏–º–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    old_modes = dict(RATE_LIMIT_MODES)
    reload_rate_limit_modes()
    
    reload_text = """
üîÑ –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Environment Variables!

üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
"""
    
    for mode_key, mode_config in RATE_LIMIT_MODES.items():
        old_config = old_modes.get(mode_key, {})
        emoji = mode_config.get('emoji', '‚öôÔ∏è')
        
        reload_text += f"\n{emoji} {mode_config['name']}\n"
        reload_text += f"  üìä {mode_config['max_responses_per_hour']}/—á–∞—Å, {mode_config['min_cooldown_seconds']}—Å\n"
        
        if old_config:
            if (old_config.get('max_responses_per_hour') != mode_config['max_responses_per_hour'] or 
                old_config.get('min_cooldown_seconds') != mode_config['min_cooldown_seconds']):
                reload_text += f"  üîÑ –ò–ó–ú–ï–ù–ï–ù–û!\n"
    
    reload_text += "\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
    
    bot.reply_to(message, reload_text)
    logger.info(f"üîÑ RELOAD: Modes reloaded by admin {message.from_user.id}")

@bot.message_handler(commands=['stats'])
def cmd_stats(message):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        bot_stats = db.get_bot_stats()
        user_stats = db.get_user_stats()
        
        total_users = len(user_stats) if user_stats else 0
        total_links = sum(user[1] for user in user_stats) if user_stats else 0
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM link_history WHERE DATE(timestamp) = DATE("now")')
            today_links_result = cursor.fetchone()
            today_links = today_links_result[0] if today_links_result else 0
            
            cursor.execute('SELECT COUNT(*) FROM link_history WHERE timestamp >= datetime("now", "-7 days")')
            week_links_result = cursor.fetchone()
            week_links = week_links_result[0] if week_links_result else 0
            
            cursor.execute('SELECT username, total_links FROM user_links WHERE total_links > 0 ORDER BY total_links DESC LIMIT 1')
            top_user = cursor.fetchone()
        
        status_emoji = "üü¢" if bot_stats['is_active'] else "üî¥"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if bot_stats['is_active'] else "–û—Ç–∫–ª—é—á–µ–Ω"
        
        current_limits = get_current_limits()
        current_mode = db.get_current_rate_mode()
        
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ v21-fixed:

ü§ñ –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}

üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –°—Å—ã–ª–æ–∫: {today_links}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: {bot_stats['today_responses']}

üìà –ó–∞ –Ω–µ–¥–µ–ª—é:
‚Ä¢ –°—Å—ã–ª–æ–∫: {week_links}

‚ö° –õ–∏–º–∏—Ç—ã ({current_limits['mode_emoji']} {current_mode.upper()}):
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å: {bot_stats['hourly_responses']}/{bot_stats['hourly_limit']}

üèÜ –õ–∏–¥–µ—Ä: {f"@{top_user[0]} ({top_user[1]} —Å—Å—ã–ª–æ–∫)" if top_user else "–ø–æ–∫–∞ –Ω–µ—Ç"}

üîó Webhook: –∞–∫—Ç–∏–≤–µ–Ω | –í–µ—Ä—Å–∏—è: v21-fixed (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
        """
        
        bot.reply_to(message, stats_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in STATS command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['activate'])
def cmd_activate(message):
    if not is_admin(message.from_user.id):
        return
    
    if message.chat.id != GROUP_ID or message.message_thread_id != THREAD_ID:
        bot.reply_to(message, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤")
        return
    
    db.set_bot_active(True)
    
    current_limits = get_current_limits()
    current_mode = db.get_current_rate_mode()
    
    welcome_text = f"""
ü§ñ Presave Reminder Bot v21 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —Ç–æ–ø–∏–∫–µ "–ü—Ä–µ—Å–µ–π–≤—ã"
üéØ –ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
{current_limits['mode_emoji']} –†–µ–∂–∏–º: {current_mode.upper()} ({current_limits['max_responses_per_hour']}/—á–∞—Å, {current_limits['min_cooldown_seconds']}—Å)
‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /help
üõë –û—Ç–∫–ª—é—á–∏—Ç—å: /deactivate

üÜï v21-fixed: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∞—à–∏ –∫–æ–º–∞–Ω–¥! üéµ
    """
    
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['deactivate'])
def cmd_deactivate(message):
    if not is_admin(message.from_user.id):
        return
    
    db.set_bot_active(False)
    bot.reply_to(message, "üõë –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate")

@bot.message_handler(commands=['botstat'])
def cmd_bot_stat(message):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        stats = db.get_bot_stats()
        current_limits = get_current_limits()
        current_mode = db.get_current_rate_mode()
        
        cooldown_text = "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≤–µ—Ç—É"
        if stats['cooldown_until']:
            try:
                cooldown_time = datetime.fromisoformat(stats['cooldown_until'])
                now = datetime.now()
                if now < cooldown_time:
                    remaining = int((cooldown_time - now).total_seconds())
                    cooldown_text = f"–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑: {remaining} —Å–µ–∫"
            except Exception as e:
                logger.error(f"Error parsing cooldown time: {e}")
                cooldown_text = "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è cooldown"
        
        status_emoji = "üü¢" if stats['is_active'] else "üî¥"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if stats['is_active'] else "–û—Ç–∫–ª—é—á–µ–Ω"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        hourly_limit = max(stats['hourly_limit'], 1)
        usage_percent = round((stats['hourly_responses'] / hourly_limit) * 100, 1)
        
        stat_text = f"""
ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ v21-fixed:

{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}
{current_limits['mode_emoji']} –†–µ–∂–∏–º: {current_mode.upper()}
‚ö° –û—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å: {stats['hourly_responses']}/{hourly_limit} ({usage_percent}%)
üìä –û—Ç–≤–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_responses']}
‚è±Ô∏è {cooldown_text}
üîó Webhook: –∞–∫—Ç–∏–≤–µ–Ω

‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {'üü° –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É' if usage_percent >= 80 else '‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ'}

üÜï v21-fixed: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∞—à–∏ –∏ —É–ª—É—á—à–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        """
        
        bot.reply_to(message, stat_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in BOTSTAT command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# [–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã linkstats, topusers, userstat, setmessage, clearhistory, test_regex, alllinks, recent - –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫]

@bot.message_handler(commands=['linkstats'])
def cmd_link_stats(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        users = db.get_user_stats()
        
        if not users:
            bot.reply_to(message, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Å—ã–ª–∫–∞–º–∏")
            return
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º v21-fixed:\n\n"
        
        for i, (username, total_links, last_updated) in enumerate(users[:10], 1):
            if total_links >= 31:
                rank = "üíé"
            elif total_links >= 16:
                rank = "ü•á"
            elif total_links >= 6:
                rank = "ü•à"
            else:
                rank = "ü•â"
            
            stats_text += f"{rank} {i}. @{username} ‚Äî {total_links} —Å—Å—ã–ª–æ–∫\n"
        
        bot.reply_to(message, stats_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in LINKSTATS command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['topusers'])
def cmd_top_users(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        users = db.get_user_stats()
        
        if not users:
            bot.reply_to(message, "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        top_text = "üèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö:\n\n"
        
        for i, (username, total_links, last_updated) in enumerate(users[:5], 1):
            medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
            medal = medals[i-1] if i <= 5 else "‚ñ´Ô∏è"
            
            top_text += f"{medal} @{username} ‚Äî {total_links} —Å—Å—ã–ª–æ–∫\n"
        
        bot.reply_to(message, top_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in TOPUSERS command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞")

@bot.message_handler(commands=['userstat'])
def cmd_user_stat(message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ username: /userstat @username")
        return
    
    username = args[1].replace('@', '')
    
    try:
        user_data = db.get_user_stats(username)
        
        if not user_data:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        username, total_links, last_updated = user_data
        
        if total_links >= 31:
            rank = "üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä"
        elif total_links >= 16:
            rank = "ü•á –ü—Ä–æ–º–æ—É—Ç–µ—Ä"
        elif total_links >= 6:
            rank = "ü•à –ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            rank = "ü•â –ù–∞—á–∏–Ω–∞—é—â–∏–π"
        
        stat_text = f"""
üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:

üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_updated[:16]}
üèÜ –ó–≤–∞–Ω–∏–µ: {rank}
        """
        
        bot.reply_to(message, stat_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in USERSTAT command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(commands=['setmessage'])
def cmd_set_message(message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current_text = db.get_reminder_text()
        bot.reply_to(message, f"üìù –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{current_text}\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: /setmessage –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
        return
    
    new_text = args[1]
    
    try:
        db.set_reminder_text(new_text)
        bot.reply_to(message, f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω:\n\n{new_text}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in SETMESSAGE command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")

@bot.message_handler(commands=['clearhistory'])
def cmd_clear_history(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        db.clear_link_history()
        bot.reply_to(message, "üßπ –ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫ –æ—á–∏—â–µ–Ω–∞ (–æ–±—â–∏–µ —Å—á—ë—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
        
    except Exception as e:
        logger.error(f"‚ùå Error in CLEARHISTORY command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

@bot.message_handler(commands=['test_regex'])
def cmd_test_regex(message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "üß™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ: /test_regex –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
        return
    
    test_text = args[1]
    links = extract_links(test_text)
    
    result_text = f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è v21-fixed:\n\nüìù –¢–µ–∫—Å—Ç: {test_text}\n\n"
    
    if links:
        result_text += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}\n"
        for i, link in enumerate(links, 1):
            result_text += f"{i}. {link}\n"
        result_text += "\nüëç –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    else:
        result_text += "‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\nüëé –ë–æ—Ç –ù–ï –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    bot.reply_to(message, result_text)

@bot.message_handler(commands=['alllinks'])
def cmd_all_links(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT link_url, username, timestamp 
                FROM link_history 
                LEFT JOIN user_links ON link_history.user_id = user_links.user_id
                ORDER BY timestamp DESC
                LIMIT 50
            ''')
            
            links = cursor.fetchall()
        
        if not links:
            bot.reply_to(message, "üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        links_text = f"üìã –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ v21-fixed (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):\n\n"
        
        for i, (link_url, username, timestamp) in enumerate(links[:20], 1):
            username_display = f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            date_display = timestamp[:16] if timestamp else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            display_url = link_url[:50] + "..." if len(link_url) > 50 else link_url
            
            links_text += f"{i}. {display_url}\n   üë§ {username_display} | üìÖ {date_display}\n\n"
        
        if len(links) > 20:
            links_text += f"... –∏ –µ—â—ë {len(links) - 20} —Å—Å—ã–ª–æ–∫\n"
        
        links_text += f"\nüìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑–µ: {len(links)}"
        
        bot.reply_to(message, links_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in ALLLINKS command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫")

@bot.message_handler(commands=['recent'])
def cmd_recent_links(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT link_url, username, timestamp 
                FROM link_history 
                LEFT JOIN user_links ON link_history.user_id = user_links.user_id
                ORDER BY timestamp DESC
                LIMIT 10
            ''')
            
            recent_links = cursor.fetchall()
        
        if not recent_links:
            bot.reply_to(message, "üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        recent_text = f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_links)} —Å—Å—ã–ª–æ–∫ v21-fixed:\n\n"
        
        for i, (link_url, username, timestamp) in enumerate(recent_links, 1):
            username_display = f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            date_display = timestamp[:16] if timestamp else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            display_url = link_url[:60] + "..." if len(link_url) > 60 else link_url
            
            recent_text += f"{i}. {display_url}\n   üë§ {username_display} | üìÖ {date_display}\n\n"
        
        bot.reply_to(message, recent_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in RECENT command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")

# === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@bot.message_handler(func=lambda message: message.text and '@misterdms_presave_bot' in message.text and message.text.strip().startswith('/'))
def handle_tagged_commands(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å @botname - –ò–°–ü–†–ê–í–õ–ï–ù"""
    try:
        command_text = message.text.strip()
        clean_command = command_text.split('@')[0]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—á–∏—â–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        temp_message = message
        temp_message.text = clean_command
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        command_map = {
            '/stats': cmd_stats,
            '/help': cmd_help,
            '/botstat': cmd_bot_stat,
            '/linkstats': cmd_link_stats,
            '/alllinks': cmd_all_links,
            '/recent': cmd_recent_links,
            '/activate': cmd_activate,
            '/deactivate': cmd_deactivate,
            '/modes': cmd_modes,
            '/setmode': cmd_set_mode,
            '/currentmode': cmd_current_mode,
            '/reloadmodes': cmd_reload_modes,
        }
        
        handler = command_map.get(clean_command)
        if handler:
            logger.info(f"üéØ TAGGED_COMMAND: Processing {clean_command} from {message.from_user.id}")
            handler(temp_message)
        else:
            logger.info(f"‚ùì UNKNOWN_TAGGED: Command {clean_command} not found")
            
    except Exception as e:
        logger.error(f"‚ùå Error in TAGGED_COMMANDS: {str(e)}")

@bot.message_handler(func=lambda message: message.text and message.text.startswith('/'))
def global_command_logger(message):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    command_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "No_username"
    chat_id = message.chat.id
    thread_id = getattr(message, 'message_thread_id', None)
    
    logger.info(f"üåê GLOBAL: Command '{command_text}' from user {user_id} (@{username}) in chat {chat_id}, thread {thread_id}")
    
    if '@' in command_text:
        if '@misterdms_presave_bot' in command_text:
            logger.info(f"‚úÖ TARGETED: Command for our bot")
        else:
            logger.info(f"‚û°Ô∏è OTHER_BOT: Command for different bot")
    
    is_admin_user = is_admin(user_id)
    logger.info(f"üëë ADMIN_CHECK: User {user_id} admin status: {is_admin_user}")
    
    in_correct_chat = (chat_id == GROUP_ID)
    in_correct_thread = (thread_id == THREAD_ID)
    logger.info(f"üìç LOCATION: Correct chat: {in_correct_chat}, Correct thread: {in_correct_thread}")

# === –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ===

@bot.message_handler(func=lambda message: message.chat.id == GROUP_ID and message.message_thread_id == THREAD_ID)
def handle_topic_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤"""
    
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    message_text = message.text or message.caption or ""
    
    logger.info(f"üì® TOPIC_MESSAGE: Message from user {user_id} (@{username})")
    
    if message.text and message.text.startswith('/'):
        return
    
    if message.from_user.is_bot:
        return
    
    if not db.is_bot_active():
        return
    
    links = extract_links(message_text)
    logger.info(f"üîç LINKS_FOUND: {len(links)} links")
    
    if not links:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å –ê–ö–¢–£–ê–õ–¨–ù–´–ú–ò –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    can_respond, reason = db.can_send_response()
    logger.info(f"üö¶ RATE_LIMIT: Can respond: {can_respond}, reason: '{reason}'")
    
    if not can_respond:
        logger.warning(f"üö´ BLOCKED: Response blocked: {reason}")
        return
    
    try:
        db.add_user_links(user_id, username, links, message.message_id)
        reminder_text = db.get_reminder_text()
        
        success = safe_send_message(
            chat_id=GROUP_ID,
            text=reminder_text,
            message_thread_id=THREAD_ID,
            reply_to_message_id=message.message_id
        )
        
        if success:
            db.update_response_limits()
            db.log_bot_response(user_id, reminder_text)
            logger.info(f"üéâ SUCCESS: Response sent for user {username} ({len(links)} links)")
        
    except Exception as e:
        logger.error(f"üí• ERROR: Exception in message processing: {str(e)}")

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    try:
        bot.remove_webhook()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å secret token –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        webhook_kwargs = {"url": WEBHOOK_URL}
        if WEBHOOK_SECRET:
            webhook_kwargs["secret_token"] = WEBHOOK_SECRET
            logger.info("üîê WEBHOOK: Using secret token for enhanced security")
        
        webhook_result = bot.set_webhook(**webhook_kwargs)
        logger.info(f"‚úÖ WEBHOOK_SET: Webhook configured successfully with security")
        return True
    except Exception as e:
        logger.error(f"‚ùå WEBHOOK_ERROR: Failed to setup webhook: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ v21"""
    try:
        logger.info("üöÄ STARTUP: Starting Presave Reminder Bot v21-fixed")
        logger.info(f"üîß CONFIG: GROUP_ID={GROUP_ID}, THREAD_ID={THREAD_ID}")
        logger.info(f"üîê SECURITY: Enhanced webhook protection enabled")
        logger.info(f"‚ö° DATABASE: Connection pooling with {DB_POOL_SIZE} connections")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.init_db()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∂–∏–º—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        reload_rate_limit_modes()
        current_mode = db.get_current_rate_mode()
        current_limits = get_current_limits()
        
        logger.info("ü§ñ Presave Reminder Bot v21-fixed –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"üë• –ì—Ä—É–ø–ø–∞: {GROUP_ID}")
        logger.info(f"üìã –¢–æ–ø–∏–∫: {THREAD_ID}")
        logger.info(f"üëë –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        logger.info(f"üéõÔ∏è –†–ï–ñ–ò–ú: {current_limits['mode_name']} ({current_limits['max_responses_per_hour']}/—á–∞—Å, {current_limits['min_cooldown_seconds']}—Å)")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        if setup_webhook():
            logger.info("üîó Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook")
            return
        
        # –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
        with socketserver.TCPServer(("", WEBHOOK_PORT), WebhookHandler) as httpd:
            logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEBHOOK_PORT}")
            logger.info(f"üîó URL: {WEBHOOK_URL}")
            logger.info("‚úÖ READY: Bot v21-fixed is fully operational with enhanced stability")
            httpd.serve_forever()
        
    except Exception as e:
        logger.error(f"üí• CRITICAL: Critical error in main: {str(e)}")
    finally:
        try:
            bot.remove_webhook()
            logger.info("üßπ Webhook –æ—á–∏—â–µ–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
        except:
            pass

if __name__ == "__main__":
    main()
