import logging
import re
import sqlite3
import time
import threading
from datetime import datetime, timedelta
from typing import Optional
from http.server import HTTPServer, BaseHTTPRequestHandler
import socketserver
import json
import ssl
import os

import telebot
from telebot import types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))  # -1001992546193
THREAD_ID = int(os.getenv('THREAD_ID'))  # 10
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x]
DEFAULT_REMINDER = os.getenv('REMINDER_TEXT', 'üéß –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤—ã—à–µ! ‚ô•Ô∏è')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
MAX_RESPONSES_PER_HOUR = 10
MIN_COOLDOWN_SECONDS = 30
BATCH_RESPONSE_WINDOW = 300  # 5 –º–∏–Ω—É—Ç
RESPONSE_DELAY = 3

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_HOST = "misterdms-presave-bot.onrender.com"  # –í–∞—à Render URL
WEBHOOK_PORT = int(os.getenv('PORT', 10000))
WEBHOOK_PATH = f"/{BOT_TOKEN}/"
WEBHOOK_URL = f"https://{WEBHOOK_HOST}{WEBHOOK_PATH}"

# Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
URL_PATTERN = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Database:
    def __init__(self, db_path: str = "bot.db"):
        self.db_path = db_path
        self.lock = threading.Lock()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å—Å—ã–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_links (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    total_links INTEGER DEFAULT 0,
                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS link_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    link_url TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    message_id INTEGER
                )
            ''')
            
            # –õ–æ–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_responses (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    response_text TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_activity (
                    id INTEGER PRIMARY KEY,
                    is_active BOOLEAN DEFAULT 1,
                    responses_today INTEGER DEFAULT 0,
                    last_response_time TIMESTAMP,
                    last_reset_date DATE DEFAULT CURRENT_DATE
                )
            ''')
            
            # –õ–∏–º–∏—Ç—ã –∏ cooldown
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS rate_limits (
                    id INTEGER PRIMARY KEY,
                    hourly_responses INTEGER DEFAULT 0,
                    last_hour_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    cooldown_until TIMESTAMP
                )
            ''')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            cursor.execute('INSERT OR IGNORE INTO bot_activity (id, is_active) VALUES (1, 1)')
            cursor.execute('INSERT OR IGNORE INTO rate_limits (id) VALUES (1)')
            cursor.execute(
                'INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)',
                ('reminder_text', DEFAULT_REMINDER)
            )
            
            conn.commit()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def add_user_links(self, user_id: int, username: str, links: list, message_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                INSERT OR REPLACE INTO user_links (user_id, username, total_links, last_updated)
                VALUES (?, ?, COALESCE((SELECT total_links FROM user_links WHERE user_id = ?), 0) + ?, CURRENT_TIMESTAMP)
            ''', (user_id, username, user_id, len(links)))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            for link in links:
                cursor.execute('''
                    INSERT INTO link_history (user_id, link_url, message_id)
                    VALUES (?, ?, ?)
                ''', (user_id, link, message_id))
            
            conn.commit()
            conn.close()

    def log_bot_response(self, user_id: int, response_text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO bot_responses (user_id, response_text)
                VALUES (?, ?)
            ''', (user_id, response_text))
            conn.commit()
            conn.close()

    def is_bot_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT is_active FROM bot_activity WHERE id = 1')
            result = cursor.fetchone()
            conn.close()
            return bool(result[0]) if result else False

    def set_bot_active(self, active: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('UPDATE bot_activity SET is_active = ? WHERE id = 1', (active,))
            conn.commit()
            conn.close()

    def can_send_response(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT hourly_responses, last_hour_reset, cooldown_until
                FROM rate_limits WHERE id = 1
            ''')
            result = cursor.fetchone()
            
            if not result:
                conn.close()
                return False, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"
            
            hourly_responses, last_hour_reset, cooldown_until = result
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            if cooldown_until:
                cooldown_time = datetime.fromisoformat(cooldown_until)
                if now < cooldown_time:
                    remaining = int((cooldown_time - now).total_seconds())
                    conn.close()
                    return False, f"Cooldown –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫"
            
            # –°–±—Ä–æ—Å –ø–æ—á–∞—Å–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
            if last_hour_reset:
                last_reset = datetime.fromisoformat(last_hour_reset)
                if now - last_reset > timedelta(hours=1):
                    cursor.execute('''
                        UPDATE rate_limits 
                        SET hourly_responses = 0, last_hour_reset = ?
                        WHERE id = 1
                    ''', (now.isoformat(),))
                    hourly_responses = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
            if hourly_responses >= MAX_RESPONSES_PER_HOUR:
                conn.close()
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {MAX_RESPONSES_PER_HOUR} –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å"
            
            conn.close()
            return True, "OK"

    def update_response_limits(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            now = datetime.now()
            cooldown_until = now + timedelta(seconds=MIN_COOLDOWN_SECONDS)
            
            cursor.execute('''
                UPDATE rate_limits 
                SET hourly_responses = hourly_responses + 1,
                    cooldown_until = ?
                WHERE id = 1
            ''', (cooldown_until.isoformat(),))
            
            conn.commit()
            conn.close()

    def get_user_stats(self, username: str = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if username:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    SELECT username, total_links, last_updated
                    FROM user_links 
                    WHERE username = ? AND total_links > 0
                ''', (username.replace('@', ''),))
                result = cursor.fetchone()
                conn.close()
                return result
            else:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cursor.execute('''
                    SELECT username, total_links, last_updated
                    FROM user_links 
                    WHERE total_links > 0
                    ORDER BY total_links DESC
                ''')
                result = cursor.fetchall()
                conn.close()
                return result

    def get_bot_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
            cursor.execute('''
                SELECT hourly_responses, cooldown_until FROM rate_limits WHERE id = 1
            ''')
            limits = cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            cursor.execute('''
                SELECT is_active, last_response_time FROM bot_activity WHERE id = 1
            ''')
            activity = cursor.fetchone()
            
            # –°—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute('''
                SELECT COUNT(*) FROM bot_responses 
                WHERE DATE(timestamp) = DATE('now')
            ''')
            today_responses = cursor.fetchone()
            
            conn.close()
            
            return {
                'hourly_responses': limits[0] if limits else 0,
                'hourly_limit': MAX_RESPONSES_PER_HOUR,
                'cooldown_until': limits[1] if limits else None,
                'is_active': bool(activity[0]) if activity else False,
                'last_response': activity[1] if activity else None,
                'today_responses': today_responses[0] if today_responses else 0
            }

    def clear_link_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫ (—Å—á—ë—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è)"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('DELETE FROM link_history')
            conn.commit()
            conn.close()

    def get_reminder_text(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT value FROM settings WHERE key = ?', ('reminder_text',))
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else DEFAULT_REMINDER

    def set_reminder_text(self, text: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        with self.lock:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)
            ''', ('reminder_text', text))
            conn.commit()
            conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS

def extract_links(text: str) -> list:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return URL_PATTERN.findall(text)

def safe_send_message(chat_id: int, text: str, message_thread_id: int = None, reply_to_message_id: int = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info(f"üí¨ SEND_MESSAGE: Preparing to send message to chat {chat_id}, thread {message_thread_id}")
        logger.info(f"‚è±Ô∏è DELAY: Applying {RESPONSE_DELAY}s safety delay")
        
        time.sleep(RESPONSE_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        
        if message_thread_id:
            logger.info(f"üì® SEND_THREAD: Sending to thread {message_thread_id}")
            # –ï—Å–ª–∏ –µ—Å—Ç—å thread_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫
            result = bot.send_message(
                chat_id=chat_id, 
                text=text, 
                message_thread_id=message_thread_id,
                reply_to_message_id=reply_to_message_id
            )
            logger.info(f"‚úÖ SENT_THREAD: Message sent to thread successfully, message_id: {result.message_id}")
        else:
            logger.info(f"üì® SEND_DIRECT: Sending direct message")
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if reply_to_message_id:
                result = bot.reply_to(reply_to_message_id, text)
                logger.info(f"‚úÖ SENT_REPLY: Reply sent successfully, message_id: {result.message_id}")
            else:
                result = bot.send_message(chat_id, text)
                logger.info(f"‚úÖ SENT_DIRECT: Direct message sent successfully, message_id: {result.message_id}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå SEND_ERROR: Failed to send message: {str(e)}")
        logger.error(f"‚ùå SEND_ERROR_TYPE: {type(e).__name__}: {e}")
        logger.error(f"‚ùå SEND_CONTEXT: chat_id={chat_id}, thread_id={message_thread_id}, reply_to={reply_to_message_id}")
        return False

# Webhook —Å–µ—Ä–≤–µ—Ä
class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
        logger.info(f"üì® WEBHOOK_POST: Received POST request to {self.path}")
        
        if self.path == WEBHOOK_PATH:
            try:
                logger.info(f"‚úÖ WEBHOOK_MATCH: Path matches webhook path {WEBHOOK_PATH}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                logger.info(f"üì¶ WEBHOOK_DATA: Received {content_length} bytes of data")
                
                # –ü–∞—Ä—Å–∏–º JSON
                update_data = json.loads(post_data.decode('utf-8'))
                logger.info(f"üìã WEBHOOK_JSON: Successfully parsed JSON data")
                logger.info(f"üîç WEBHOOK_UPDATE: Update keys: {list(update_data.keys())}")
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
                update = telebot.types.Update.de_json(update_data)
                logger.info(f"üìù WEBHOOK_OBJECT: Created Update object, update_id: {getattr(update, 'update_id', 'unknown')}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
                if update:
                    logger.info(f"üîÑ WEBHOOK_PROCESS: Processing update through bot handlers")
                    bot.process_new_updates([update])
                    logger.info(f"‚úÖ WEBHOOK_PROCESSED: Update processed successfully")
                else:
                    logger.warning(f"‚ö†Ô∏è WEBHOOK_EMPTY: Update object is None")
                
                # –û—Ç–≤–µ—á–∞–µ–º Telegram
                self.send_response(200)
                self.end_headers()
                logger.info(f"‚úÖ WEBHOOK_RESPONSE: Sent 200 OK response to Telegram")
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå WEBHOOK_JSON_ERROR: Failed to parse JSON: {e}")
                self.send_response(400)
                self.end_headers()
            except Exception as e:
                logger.error(f"‚ùå WEBHOOK_ERROR: Error processing webhook: {str(e)}")
                logger.error(f"‚ùå WEBHOOK_ERROR_TYPE: {type(e).__name__}: {e}")
                self.send_response(500)
                self.end_headers()
        
        elif self.path == '/' or self.path == '/health':
            logger.info(f"üíö HEALTH_CHECK: Health check request via POST")
            # Health check
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({
                "status": "healthy", 
                "service": "telegram-bot",
                "webhook_url": WEBHOOK_URL,
                "bot": "@misterdms_presave_bot"
            })
            self.wfile.write(response.encode())
        else:
            logger.warning(f"‚ùì WEBHOOK_UNKNOWN: Unknown POST path: {self.path}")
            self.send_response(404)
            self.end_headers()
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.info(f"üåê HTTP_GET: Received GET request to {self.path}")
        
        if self.path == '/' or self.path == '/health':
            logger.info(f"üíö HEALTH_CHECK: Health check request via GET")
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({
                "status": "healthy", 
                "service": "telegram-bot",
                "webhook_url": WEBHOOK_URL,
                "bot": "@misterdms_presave_bot"
            })
            self.wfile.write(response.encode())
            logger.info(f"‚úÖ HEALTH_RESPONSE: Sent health check response")
        else:
            logger.warning(f"‚ùì HTTP_UNKNOWN: Unknown GET path: {self.path}")
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º HTTP –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã - –º—ã –≤–µ–¥–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
        pass

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

@bot.message_handler(commands=['start'])
def cmd_start(message):
    logger.info(f"üîç START command received from user {message.from_user.id} (@{message.from_user.username})")
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå START command denied - user {message.from_user.id} not in admin list")
        return
    
    logger.info(f"‚úÖ START command processed for admin {message.from_user.id}")
    bot.reply_to(message, """
ü§ñ Presave Reminder Bot –∑–∞–ø—É—â–µ–Ω!

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ –≥—Ä—É–ø–ø—ã.
    """)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    logger.info(f"üîç HELP command received from user {message.from_user.id} (@{message.from_user.username})")
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå HELP command denied - user {message.from_user.id} not in admin list")
        return
    
    help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

üëë –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/help ‚Äî —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/activate ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ
/deactivate ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ  
/stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/linkstats ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–∞–º
/topusers ‚Äî —Ç–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö
/userstat @username ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/setmessage —Ç–µ–∫—Å—Ç ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/clearhistory ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Å—ã–ª–æ–∫ (—Å—á—ë—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
/botstat ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç–æ–≤ –±–æ—Ç–∞
/test_regex ‚Äî —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫
/alllinks ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ
/recent ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫

‚ÑπÔ∏è –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤
üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –º–∞–∫—Å–∏–º—É–º 10 –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å, –ø–∞—É–∑–∞ 30 —Å–µ–∫ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
    """
    
    logger.info(f"‚úÖ HELP command processed for admin {message.from_user.id}")
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['stats'])
def cmd_stats(message):
    logger.info(f"üîç STATS command received from user {message.from_user.id} (@{message.from_user.username}) in chat {message.chat.id}")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå STATS command denied - user {message.from_user.id} not in admin list {ADMIN_IDS}")
        return
    
    logger.info(f"‚úÖ STATS command authorized for admin {message.from_user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_stats = db.get_bot_stats()
        user_stats = db.get_user_stats()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_users = len(user_stats) if user_stats else 0
        total_links = sum(user[1] for user in user_stats) if user_stats else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        # –°—Å—ã–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute('''
            SELECT COUNT(*) FROM link_history 
            WHERE DATE(timestamp) = DATE('now')
        ''')
        today_links = cursor.fetchone()[0]
        
        # –°—Å—ã–ª–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        cursor.execute('''
            SELECT COUNT(*) FROM link_history 
            WHERE timestamp >= datetime('now', '-7 days')
        ''')
        week_links = cursor.fetchone()[0]
        
        # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('''
            SELECT username, total_links FROM user_links 
            WHERE total_links > 0
            ORDER BY total_links DESC LIMIT 1
        ''')
        top_user = cursor.fetchone()
        
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        status_emoji = "üü¢" if bot_stats['is_active'] else "üî¥"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if bot_stats['is_active'] else "–û—Ç–∫–ª—é—á–µ–Ω"
        
        stats_text = f"""
üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

ü§ñ –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}

üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –°—Å—ã–ª–æ–∫: {today_links}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: {bot_stats['today_responses']}

üìà –ó–∞ –Ω–µ–¥–µ–ª—é:
‚Ä¢ –°—Å—ã–ª–æ–∫: {week_links}

‚ö° –õ–∏–º–∏—Ç—ã:
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å: {bot_stats['hourly_responses']}/{bot_stats['hourly_limit']}

üèÜ –õ–∏–¥–µ—Ä: {f"@{top_user[0]} ({top_user[1]} —Å—Å—ã–ª–æ–∫)" if top_user else "–ø–æ–∫–∞ –Ω–µ—Ç"}

üîó Webhook: –∞–∫—Ç–∏–≤–µ–Ω
        """
        
        logger.info(f"‚úÖ STATS command response prepared for user {message.from_user.id}")
        logger.info(f"üìä Stats data: users={total_users}, links={total_links}, today_links={today_links}")
        
        bot.reply_to(message, stats_text)
        logger.info(f"‚úÖ STATS command response sent successfully to user {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in STATS command for user {message.from_user.id}: {str(e)}")
        logger.error(f"‚ùå Exception details: {type(e).__name__}: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['alllinks'])
def cmd_all_links(message):
    logger.info(f"üîç ALLLINKS command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå ALLLINKS command denied - user {message.from_user.id} not in admin list")
        return
    
    logger.info(f"‚úÖ ALLLINKS command authorized for admin {message.from_user.id}")
    
    try:
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
        cursor.execute('''
            SELECT link_url, username, timestamp 
            FROM link_history 
            LEFT JOIN user_links ON link_history.user_id = user_links.user_id
            ORDER BY timestamp DESC
            LIMIT 50
        ''')
        
        links = cursor.fetchall()
        conn.close()
        
        if not links:
            logger.info(f"üìù No links found in database for ALLLINKS command")
            bot.reply_to(message, "üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        links_text = f"üìã –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):\n\n"
        
        for i, (link_url, username, timestamp) in enumerate(links[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
            username_display = f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            date_display = timestamp[:16] if timestamp else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            display_url = link_url[:50] + "..." if len(link_url) > 50 else link_url
            
            links_text += f"{i}. {display_url}\n   üë§ {username_display} | üìÖ {date_display}\n\n"
        
        if len(links) > 20:
            links_text += f"... –∏ –µ—â—ë {len(links) - 20} —Å—Å—ã–ª–æ–∫\n"
        
        links_text += f"\nüìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑–µ: {len(links)}"
        
        logger.info(f"‚úÖ ALLLINKS response prepared: {len(links)} total links, showing first 20")
        bot.reply_to(message, links_text)
        logger.info(f"‚úÖ ALLLINKS command response sent successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error in ALLLINKS command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫")

@bot.message_handler(commands=['recent'])
def cmd_recent_links(message):
    logger.info(f"üîç RECENT command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå RECENT command denied - user {message.from_user.id} not in admin list")
        return
    
    logger.info(f"‚úÖ RECENT command authorized for admin {message.from_user.id}")
    
    try:
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫
        cursor.execute('''
            SELECT link_url, username, timestamp 
            FROM link_history 
            LEFT JOIN user_links ON link_history.user_id = user_links.user_id
            ORDER BY timestamp DESC
            LIMIT 10
        ''')
        
        recent_links = cursor.fetchall()
        conn.close()
        
        if not recent_links:
            logger.info(f"üìù No recent links found in database")
            bot.reply_to(message, "üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        recent_text = f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_links)} —Å—Å—ã–ª–æ–∫:\n\n"
        
        for i, (link_url, username, timestamp) in enumerate(recent_links, 1):
            username_display = f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            date_display = timestamp[:16] if timestamp else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            display_url = link_url[:60] + "..." if len(link_url) > 60 else link_url
            
            recent_text += f"{i}. {display_url}\n   üë§ {username_display} | üìÖ {date_display}\n\n"
        
        logger.info(f"‚úÖ RECENT response prepared: {len(recent_links)} recent links")
        bot.reply_to(message, recent_text)
        logger.info(f"‚úÖ RECENT command response sent successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error in RECENT command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")

@bot.message_handler(commands=['activate'])
def cmd_activate(message):
    logger.info(f"üîç ACTIVATE command received from user {message.from_user.id} (@{message.from_user.username}) in chat {message.chat.id}, thread {message.message_thread_id}")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå ACTIVATE command denied - user {message.from_user.id} not in admin list")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –Ω—É–∂–Ω–æ–º —Ç–æ–ø–∏–∫–µ
    if message.chat.id != GROUP_ID or message.message_thread_id != THREAD_ID:
        logger.warning(f"‚ùå ACTIVATE command in wrong place: chat={message.chat.id} (need {GROUP_ID}), thread={message.message_thread_id} (need {THREAD_ID})")
        bot.reply_to(message, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤")
        return
    
    logger.info(f"‚úÖ ACTIVATE command in correct topic, processing...")
    db.set_bot_active(True)
    
    welcome_text = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö!

‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ç–æ–ø–∏–∫–µ "–ü—Ä–µ—Å–µ–π–≤—ã"
üéØ –ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /help
üõë –û—Ç–∫–ª—é—á–∏—Ç—å: /deactivate

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üéµ
    """
    
    bot.reply_to(message, welcome_text)
    logger.info(f"‚úÖ Bot activated by user {message.from_user.id}")

@bot.message_handler(commands=['deactivate'])
def cmd_deactivate(message):
    logger.info(f"üîç DEACTIVATE command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå DEACTIVATE command denied - user {message.from_user.id} not in admin list")
        return
    
    db.set_bot_active(False)
    bot.reply_to(message, "üõë –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate")
    logger.info(f"‚úÖ Bot deactivated by user {message.from_user.id}")

@bot.message_handler(commands=['botstat'])
def cmd_bot_stat(message):
    logger.info(f"üîç BOTSTAT command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå BOTSTAT command denied - user {message.from_user.id} not in admin list")
        return
    
    try:
        stats = db.get_bot_stats()
        
        # –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        cooldown_text = "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≤–µ—Ç—É"
        if stats['cooldown_until']:
            cooldown_time = datetime.fromisoformat(stats['cooldown_until'])
            now = datetime.now()
            if now < cooldown_time:
                remaining = int((cooldown_time - now).total_seconds())
                cooldown_text = f"–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑: {remaining} —Å–µ–∫"
        
        status_emoji = "üü¢" if stats['is_active'] else "üî¥"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if stats['is_active'] else "–û—Ç–∫–ª—é—á–µ–Ω"
        
        stat_text = f"""
ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:

{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}
‚ö° –û—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å: {stats['hourly_responses']}/{stats['hourly_limit']}
üìä –û—Ç–≤–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_responses']}
‚è±Ô∏è {cooldown_text}
üîó Webhook: –∞–∫—Ç–∏–≤–µ–Ω

‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {'üü° –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É' if stats['hourly_responses'] >= 8 else '‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ'}
        """
        
        logger.info(f"‚úÖ BOTSTAT command processed for user {message.from_user.id}")
        bot.reply_to(message, stat_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in BOTSTAT command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['linkstats'])
def cmd_link_stats(message):
    logger.info(f"üîç LINKSTATS command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå LINKSTATS command denied - user {message.from_user.id} not in admin list")
        return
    
    try:
        users = db.get_user_stats()
        
        if not users:
            logger.info(f"üìù No users with links found for LINKSTATS")
            bot.reply_to(message, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Å—ã–ª–∫–∞–º–∏")
            return
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º:\n\n"
        
        for i, (username, total_links, last_updated) in enumerate(users[:10], 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ
            if total_links >= 31:
                rank = "üíé"
            elif total_links >= 16:
                rank = "ü•á"
            elif total_links >= 6:
                rank = "ü•à"
            else:
                rank = "ü•â"
            
            stats_text += f"{rank} {i}. @{username} ‚Äî {total_links} —Å—Å—ã–ª–æ–∫\n"
        
        logger.info(f"‚úÖ LINKSTATS response prepared: {len(users)} users, showing top 10")
        bot.reply_to(message, stats_text)
        logger.info(f"‚úÖ LINKSTATS command response sent successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error in LINKSTATS command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['topusers'])
def cmd_top_users(message):
    logger.info(f"üîç TOPUSERS command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå TOPUSERS command denied - user {message.from_user.id} not in admin list")
        return
    
    try:
        users = db.get_user_stats()
        
        if not users:
            logger.info(f"üìù No active users found for TOPUSERS")
            bot.reply_to(message, "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        top_text = "üèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö:\n\n"
        
        for i, (username, total_links, last_updated) in enumerate(users[:5], 1):
            medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
            medal = medals[i-1] if i <= 5 else "‚ñ´Ô∏è"
            
            top_text += f"{medal} @{username} ‚Äî {total_links} —Å—Å—ã–ª–æ–∫\n"
        
        logger.info(f"‚úÖ TOPUSERS response prepared: showing top {min(5, len(users))} users")
        bot.reply_to(message, top_text)
        logger.info(f"‚úÖ TOPUSERS command response sent successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error in TOPUSERS command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞")

@bot.message_handler(commands=['userstat'])
def cmd_user_stat(message):
    logger.info(f"üîç USERSTAT command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå USERSTAT command denied - user {message.from_user.id} not in admin list")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        logger.info(f"‚ö†Ô∏è USERSTAT command missing username argument")
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ username: /userstat @username")
        return
    
    username = args[1].replace('@', '')
    logger.info(f"üîç USERSTAT searching for user: '{username}'")
    
    try:
        user_data = db.get_user_stats(username)
        
        if not user_data:
            logger.info(f"‚ùå User '{username}' not found or has no links")
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        username, total_links, last_updated = user_data
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ
        if total_links >= 31:
            rank = "üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä"
        elif total_links >= 16:
            rank = "ü•á –ü—Ä–æ–º–æ—É—Ç–µ—Ä"
        elif total_links >= 6:
            rank = "ü•à –ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            rank = "ü•â –ù–∞—á–∏–Ω–∞—é—â–∏–π"
        
        stat_text = f"""
üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:

üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_updated[:16]}
üèÜ –ó–≤–∞–Ω–∏–µ: {rank}
        """
        
        logger.info(f"‚úÖ USERSTAT response prepared for user '{username}': {total_links} links")
        bot.reply_to(message, stat_text)
        logger.info(f"‚úÖ USERSTAT command response sent successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error in USERSTAT command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(commands=['setmessage'])
def cmd_set_message(message):
    logger.info(f"üîç SETMESSAGE command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå SETMESSAGE command denied - user {message.from_user.id} not in admin list")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current_text = db.get_reminder_text()
        logger.info(f"üìù SETMESSAGE showing current text (length: {len(current_text)})")
        bot.reply_to(message, f"üìù –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{current_text}\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: /setmessage –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
        return
    
    new_text = args[1]
    logger.info(f"üìù SETMESSAGE setting new text (length: {len(new_text)})")
    
    try:
        db.set_reminder_text(new_text)
        logger.info(f"‚úÖ SETMESSAGE reminder text updated successfully")
        bot.reply_to(message, f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω:\n\n{new_text}")
        logger.info(f"‚úÖ SETMESSAGE command response sent successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error in SETMESSAGE command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")

@bot.message_handler(commands=['clearhistory'])
def cmd_clear_history(message):
    logger.info(f"üîç CLEARHISTORY command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå CLEARHISTORY command denied - user {message.from_user.id} not in admin list")
        return
    
    try:
        db.clear_link_history()
        logger.info(f"‚úÖ CLEARHISTORY link history cleared successfully")
        bot.reply_to(message, "üßπ –ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫ –æ—á–∏—â–µ–Ω–∞ (–æ–±—â–∏–µ —Å—á—ë—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
        logger.info(f"‚úÖ CLEARHISTORY command response sent successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error in CLEARHISTORY command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

@bot.message_handler(commands=['test_regex'])
def cmd_test_regex(message):
    logger.info(f"üîç TEST_REGEX command received from user {message.from_user.id} (@{message.from_user.username})")
    
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå TEST_REGEX command denied - user {message.from_user.id} not in admin list")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        logger.info(f"‚ö†Ô∏è TEST_REGEX command missing text argument")
        bot.reply_to(message, "üß™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ: /test_regex –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
        return
    
    test_text = args[1]
    logger.info(f"üß™ TEST_REGEX testing text: '{test_text[:100]}...' (length: {len(test_text)})")
    
    links = extract_links(test_text)
    logger.info(f"üîç TEST_REGEX found {len(links)} links: {links}")
    
    result_text = f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\nüìù –¢–µ–∫—Å—Ç: {test_text}\n\n"
    
    if links:
        result_text += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}\n"
        for i, link in enumerate(links, 1):
            result_text += f"{i}. {link}\n"
        result_text += "\nüëç –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        logger.info(f"‚úÖ TEST_REGEX positive result: {len(links)} links found")
    else:
        result_text += "‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\nüëé –ë–æ—Ç –ù–ï –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        logger.info(f"‚ùå TEST_REGEX negative result: no links found")
    
    bot.reply_to(message, result_text)
    logger.info(f"‚úÖ TEST_REGEX command response sent successfully")

# === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–û–ú–ê–ù–î –° @BOTNAME ===

@bot.message_handler(func=lambda message: message.text and '@misterdms_presave_bot' in message.text and message.text.strip().startswith('/'))
def handle_tagged_commands(message):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞ /command@botname"""
    command_text = message.text.strip()
    logger.info(f"üéØ TAGGED_HANDLER: Processing tagged command: '{command_text}'")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ @botname
    clean_command = command_text.split('@')[0]
    logger.info(f"üßπ CLEANED: Extracted command: '{clean_command}'")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ @botname –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    message.text = clean_command
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if clean_command == '/stats':
        logger.info(f"üîÑ REDIRECT: Redirecting to cmd_stats")
        cmd_stats(message)
    elif clean_command == '/help':
        logger.info(f"üîÑ REDIRECT: Redirecting to cmd_help")
        cmd_help(message)
    elif clean_command == '/botstat':
        logger.info(f"üîÑ REDIRECT: Redirecting to cmd_bot_stat")
        cmd_bot_stat(message)
    elif clean_command == '/linkstats':
        logger.info(f"üîÑ REDIRECT: Redirecting to cmd_link_stats")
        cmd_link_stats(message)
    elif clean_command == '/alllinks':
        logger.info(f"üîÑ REDIRECT: Redirecting to cmd_all_links")
        cmd_all_links(message)
    elif clean_command == '/recent':
        logger.info(f"üîÑ REDIRECT: Redirecting to cmd_recent_links")
        cmd_recent_links(message)
    elif clean_command == '/activate':
        logger.info(f"üîÑ REDIRECT: Redirecting to cmd_activate")
        cmd_activate(message)
    elif clean_command == '/deactivate':
        logger.info(f"üîÑ REDIRECT: Redirecting to cmd_deactivate")
        cmd_deactivate(message)
    else:
        logger.warning(f"‚ùì UNKNOWN: Unknown tagged command: '{clean_command}'")

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î (–î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò) ===

@bot.message_handler(func=lambda message: message.text and message.text.startswith('/'))
def global_command_logger(message):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    command_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "No_username"
    chat_id = message.chat.id
    thread_id = getattr(message, 'message_thread_id', None)
    
    logger.info(f"üåê GLOBAL: Command received: '{command_text}' from user {user_id} (@{username}) in chat {chat_id}, thread {thread_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å @botname
    if '@' in command_text:
        logger.info(f"üéØ TAGGED: Command contains @mention: '{command_text}'")
        if '@misterdms_presave_bot' in command_text:
            logger.info(f"‚úÖ TARGETED: Command targeted at our bot: '{command_text}'")
        else:
            logger.info(f"‚û°Ô∏è OTHER_BOT: Command targeted at different bot: '{command_text}'")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    is_admin_user = is_admin(user_id)
    logger.info(f"üëë ADMIN_CHECK: User {user_id} admin status: {is_admin_user} (admin_list: {ADMIN_IDS})")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Ç/—Ç–æ–ø–∏–∫
    in_correct_chat = (chat_id == GROUP_ID)
    in_correct_thread = (thread_id == THREAD_ID)
    logger.info(f"üìç LOCATION: Correct chat: {in_correct_chat} ({chat_id}=={GROUP_ID}), Correct thread: {in_correct_thread} ({thread_id}=={THREAD_ID})")

# === –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ===

@bot.message_handler(func=lambda message: message.chat.id == GROUP_ID and message.message_thread_id == THREAD_ID)
def handle_topic_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤"""
    
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    message_text = message.text or message.caption or ""
    
    logger.info(f"üì® TOPIC_MESSAGE: Received message from user {user_id} (@{username}) in correct topic")
    logger.info(f"üìù MESSAGE_TEXT: '{message_text[:200]}...' (length: {len(message_text)})")
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.text and message.text.startswith('/'):
        logger.info(f"‚è≠Ô∏è SKIP: Message is a command, skipping link processing")
        return
    
    if message.from_user.is_bot:
        logger.info(f"ü§ñ SKIP: Message from bot, skipping")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    bot_active = db.is_bot_active()
    logger.info(f"üîÑ BOT_STATUS: Bot active status: {bot_active}")
    if not bot_active:
        logger.info(f"üò¥ INACTIVE: Bot inactive, skipping message processing")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    links = extract_links(message_text)
    logger.info(f"üîç LINKS_FOUND: Found {len(links)} links: {links}")
    
    if not links:
        logger.info(f"‚è≠Ô∏è NO_LINKS: No links found, skipping response")
        return  # –ù–µ—Ç —Å—Å—ã–ª–æ–∫ - –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    can_respond, reason = db.can_send_response()
    logger.info(f"üö¶ RATE_LIMIT: Can respond: {can_respond}, reason: '{reason}'")
    
    if not can_respond:
        logger.warning(f"üö´ BLOCKED: Response blocked by rate limiting: {reason}")
        return
    
    try:
        logger.info(f"üíæ SAVING: Saving {len(links)} links to database for user {username}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É
        db.add_user_links(
            user_id=user_id,
            username=username,
            links=links,
            message_id=message.message_id
        )
        
        logger.info(f"‚úÖ SAVED: Links saved to database successfully")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_text = db.get_reminder_text()
        logger.info(f"üìù REMINDER: Using reminder text (length: {len(reminder_text)})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        logger.info(f"üì§ SENDING: Sending response with {RESPONSE_DELAY}s delay")
        success = safe_send_message(
            chat_id=GROUP_ID,
            text=reminder_text,
            message_thread_id=THREAD_ID,
            reply_to_message_id=message.message_id
        )
        
        if success:
            logger.info(f"‚úÖ SENT: Response sent successfully")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
            db.update_response_limits()
            logger.info(f"üìä LIMITS: Rate limits updated")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            db.log_bot_response(user_id, reminder_text)
            logger.info(f"üìã LOGGED: Response logged to database")
            
            logger.info(f"üéâ SUCCESS: Complete response cycle for user {username} ({len(links)} links)")
        else:
            logger.error(f"‚ùå FAILED: Failed to send response")
        
    except Exception as e:
        logger.error(f"üí• ERROR: Exception in message processing: {str(e)}")
        logger.error(f"üí• ERROR_TYPE: {type(e).__name__}: {e}")

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        logger.info("üîß WEBHOOK_SETUP: Starting webhook configuration")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        bot.remove_webhook()
        logger.info("‚úÖ WEBHOOK_CLEAN: Old webhook removed successfully")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        webhook_result = bot.set_webhook(url=WEBHOOK_URL)
        logger.info(f"‚úÖ WEBHOOK_SET: New webhook set to {WEBHOOK_URL}, result: {webhook_result}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå WEBHOOK_ERROR: Failed to setup webhook: {str(e)}")
        logger.error(f"‚ùå WEBHOOK_ERROR_TYPE: {type(e).__name__}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ STARTUP: Starting Presave Reminder Bot")
        logger.info(f"üîß CONFIG: GROUP_ID={GROUP_ID}, THREAD_ID={THREAD_ID}, ADMIN_IDS={ADMIN_IDS}")
        logger.info(f"üåê WEBHOOK: WEBHOOK_HOST={WEBHOOK_HOST}, WEBHOOK_PORT={WEBHOOK_PORT}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üíæ DATABASE: Initializing database")
        db.init_db()
        logger.info("‚úÖ DATABASE: Database initialized successfully")
        
        logger.info("ü§ñ Presave Reminder Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"üë• –ì—Ä—É–ø–ø–∞: {GROUP_ID}")
        logger.info(f"üìã –¢–æ–ø–∏–∫: {THREAD_ID}")
        logger.info(f"üëë –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        logger.info("üîß WEBHOOK: Setting up webhook")
        if setup_webhook():
            logger.info("üîó Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook")
            return
        
        # –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
        logger.info(f"üåê SERVER: Starting webhook server on port {WEBHOOK_PORT}")
        with socketserver.TCPServer(("", WEBHOOK_PORT), WebhookHandler) as httpd:
            logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEBHOOK_PORT}")
            logger.info(f"üîó URL: {WEBHOOK_URL}")
            logger.info("‚úÖ READY: Bot is fully operational and ready to receive webhooks")
            httpd.serve_forever()
        
    except Exception as e:
        logger.error(f"üí• CRITICAL: Critical error in main: {str(e)}")
        logger.error(f"üí• CRITICAL_TYPE: {type(e).__name__}: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º webhook –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        try:
            logger.info("üßπ SHUTDOWN: Cleaning up webhook on shutdown")
            bot.remove_webhook()
            logger.info("üßπ Webhook –æ—á–∏—â–µ–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è CLEANUP_ERROR: Error during webhook cleanup: {e}")
        logger.info("üõë SHUTDOWN: Bot stopped")

if __name__ == "__main__":
    main()
