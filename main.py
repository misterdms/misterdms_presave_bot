# PRESAVE REMINDER BOT v23.4 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ—Å–µ–π–≤–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–µ–Ω—é –∏ –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
# –ò–°–ü–†–ê–í–õ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò

import logging
import re
import sqlite3
import time
import threading
import os
import json
import urllib.parse
import urllib.request
import urllib.error
from datetime import datetime, timedelta
from typing import Optional
from http.server import HTTPServer, BaseHTTPRequestHandler
import socketserver
from collections import defaultdict
from contextlib import contextmanager
from queue import Queue
import functools
import html

import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))  # -1002811959953
THREAD_ID = int(os.getenv('THREAD_ID'))  # 3
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x]
DEFAULT_REMINDER = os.getenv('REMINDER_TEXT', 'üéß –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤—ã—à–µ! ‚ô•Ô∏è')

# === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º keepalive_url ===
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', 'misterdms-presave-bot.onrender.com')
WEBHOOK_PORT = int(os.getenv('PORT', 10000))
WEBHOOK_PATH = f"/{BOT_TOKEN}/"
WEBHOOK_URL = f"https://{WEBHOOK_HOST}{WEBHOOK_PATH}"
KEEPALIVE_URL = f"https://{WEBHOOK_HOST}/keepalive"

# === –ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', None)
DB_POOL_SIZE = int(os.getenv('DB_POOL_SIZE', '5'))
WEBHOOK_RATE_LIMIT = int(os.getenv('WEBHOOK_RATE_LIMIT', '100'))

# === –°–ò–°–¢–ï–ú–ê –ü–†–ê–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô v23.4 ===
USER_PERMISSIONS = {
    'admin': 'all',  # –í—Å–µ –∫–æ–º–∞–Ω–¥—ã
    'user': ['help', 'linkstats', 'topusers', 'userstat', 'mystat', 'alllinks', 'recent', 'presave_claim']
}

# === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø v23.4 ===
USER_STATES = {
    'waiting_username': '–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ username',
    'waiting_new_message': '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
    'waiting_presave_links': '–û–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–µ—Å–µ–π–≤–∞',
    'waiting_presave_comment': '–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø—Ä–µ—Å–µ–π–≤—É',
    'waiting_username_for_links': '–û–∂–∏–¥–∞–Ω–∏–µ username –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫',
    'waiting_username_for_approvals': '–û–∂–∏–¥–∞–Ω–∏–µ username –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π',
    'waiting_username_for_comparison': '–û–∂–∏–¥–∞–Ω–∏–µ username –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
}

# === PRESAVE SYSTEM PATTERNS v23.4 ===
PRESAVE_CLAIM_PATTERNS = {
    'basic': [
        r'—Å–¥–µ–ª–∞–ª\s+–ø—Ä–µ—Å–µ–π–≤',
        r'–≥–æ—Ç–æ–≤–æ',
        r'—Å–¥–µ–ª–∞–ª(?:\s+–≥–¥–µ\s+—Å–º–æ–≥)?',
        r'—Å–æ—Ö—Ä–∞–Ω–∏–ª',
        r'–¥–æ–±–∞–≤–∏–ª\s+–≤\s+(?:–±–∏–±–ª–∏–æ—Ç–µ–∫—É|–ø–ª–µ–π–ª–∏—Å—Ç)',
        r'–ø—Ä–µ—Å–µ–π–≤\s+–≥–æ—Ç–æ–≤'
    ],
    'platforms': {
        'spotify': r'(?:—Å–ø–æ—Ç–∏—Ñ|spotify|—Å–ø–æ—Ç)',
        'apple': r'(?:—è–±–ª–æ–∫|apple|itunes|—ç–ø–ª)',
        'yandex': r'(?:—è–Ω–¥–µ–∫—Å|yandex|—è\.–º—É–∑—ã–∫–∞)',
        'vk': r'(?:–≤–∫|vkmusic|–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ)',
        'deezer': r'(?:deezer|–¥–∏–∑–µ—Ä)',
        'youtube': r'(?:youtube|—é—Ç—É–±|yt music)'
    }
}

ADMIN_VERIFICATION_PATTERNS = [
    r'–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é',
    r'–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', 
    r'–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ'
]

def is_presave_claim(text):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–µ—Å–µ–π–≤–µ"""
    if not text:
        return False
    
    text_lower = text.lower()
    
    for pattern in PRESAVE_CLAIM_PATTERNS['basic']:
        if re.search(pattern, text_lower, re.IGNORECASE):
            return True
    
    return False

def is_admin_verification(message):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    if not message.text or not message.reply_to_message:
        return False
    
    text_lower = message.text.lower()
    
    for pattern in ADMIN_VERIFICATION_PATTERNS:
        if re.search(pattern, text_lower, re.IGNORECASE):
            return True
    
    return False

def extract_platforms(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return []
    
    found_platforms = []
    text_lower = text.lower()
    
    for platform, pattern in PRESAVE_CLAIM_PATTERNS['platforms'].items():
        if re.search(pattern, text_lower, re.IGNORECASE):
            found_platforms.append(platform)
    
    return found_platforms

def extract_links(text: str) -> list:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    if not text:
        return []
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Å—ã–ª–æ–∫, –≤–∫–ª—é—á–∞—è bandlink –∏ –¥—Ä—É–≥–∏–µ taplink –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
    URL_PATTERN = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
    found_links = URL_PATTERN.findall(text)
    
    logger.info(f"üîç EXTRACT_LINKS: Found {len(found_links)} links in text")
    return found_links

# === –°–ò–°–¢–ï–ú–ê –†–ï–ñ–ò–ú–û–í –õ–ò–ú–ò–¢–û–í ===
def load_rate_limit_modes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–∂–∏–º–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return {
        'conservative': {
            'name': 'üü¢ CONSERVATIVE',
            'description': '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º - 5% –æ—Ç –ª–∏–º–∏—Ç–∞ Telegram',
            'max_responses_per_hour': int(os.getenv('CONSERVATIVE_MAX_HOUR', '60')),
            'min_cooldown_seconds': int(os.getenv('CONSERVATIVE_COOLDOWN', '60')),
            'emoji': 'üê¢',
            'risk': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π'
        },
        'normal': {
            'name': 'üü° NORMAL', 
            'description': '–†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º - 15% –æ—Ç –ª–∏–º–∏—Ç–∞ Telegram',
            'max_responses_per_hour': int(os.getenv('NORMAL_MAX_HOUR', '180')),
            'min_cooldown_seconds': int(os.getenv('NORMAL_COOLDOWN', '20')),
            'emoji': '‚öñÔ∏è',
            'risk': '–ù–∏–∑–∫–∏–π'
        },
        'burst': {
            'name': 'üü† BURST',
            'description': '–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º - 50% –æ—Ç –ª–∏–º–∏—Ç–∞ Telegram',
            'max_responses_per_hour': int(os.getenv('BURST_MAX_HOUR', '600')),
            'min_cooldown_seconds': int(os.getenv('BURST_COOLDOWN', '6')),
            'emoji': '‚ö°',
            'risk': '–°—Ä–µ–¥–Ω–∏–π'
        },
        'admin_burst': {
            'name': 'üî¥ ADMIN_BURST',
            'description': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - 100% –ª–∏–º–∏—Ç–∞ –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)',
            'max_responses_per_hour': int(os.getenv('ADMIN_BURST_MAX_HOUR', '1200')),
            'min_cooldown_seconds': int(os.getenv('ADMIN_BURST_COOLDOWN', '3')),
            'emoji': 'üö®',
            'risk': '–í–´–°–û–ö–ò–ô',
            'admin_only': True
        }
    }

RATE_LIMIT_MODES = load_rate_limit_modes()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RESPONSE_DELAY = int(os.getenv('RESPONSE_DELAY', '3'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===

class WebhookRateLimiter:
    """Rate limiting –¥–ª—è webhook endpoint"""
    def __init__(self, max_requests: int = WEBHOOK_RATE_LIMIT, window_seconds: int = 60):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.requests = defaultdict(list)
        self.lock = threading.Lock()
    
    def is_allowed(self, client_ip: str) -> bool:
        with self.lock:
            now = time.time()
            self.requests[client_ip] = [
                req_time for req_time in self.requests[client_ip] 
                if now - req_time < self.window_seconds
            ]
            
            if len(self.requests[client_ip]) >= self.max_requests:
                logger.warning(f"üö® RATE_LIMIT: Blocked {client_ip} ({len(self.requests[client_ip])} requests)")
                return False
            
            self.requests[client_ip].append(now)
            return True

class DatabasePool:
    """Connection pooling –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î"""
    def __init__(self, db_path: str, pool_size: int = DB_POOL_SIZE):
        self.db_path = db_path
        self.pool = Queue(maxsize=pool_size)
        self.lock = threading.Lock()
        
        for _ in range(pool_size):
            conn = sqlite3.connect(db_path, check_same_thread=False)
            conn.execute("PRAGMA journal_mode=WAL")
            conn.execute("PRAGMA synchronous=NORMAL")
            conn.execute("PRAGMA cache_size=10000")
            self.pool.put(conn)
        
        logger.info(f"‚úÖ DB_POOL: Created connection pool with {pool_size} connections")
    
    @contextmanager
    def get_connection(self):
        conn = self.pool.get()
        try:
            yield conn
        finally:
            self.pool.put(conn)

class InputValidator:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö v23.5"""
    
    @staticmethod
    def sanitize_username(username: str) -> str:
        if not username:
            return "anonymous"
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –∏ —É–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean = html.escape(str(username))
        clean = re.sub(r'[^\w\-_]', '', clean.replace('@', ''))
        return clean[:50] if clean else "anonymous"
    
    @staticmethod
    def validate_text_input(text: str, max_length: int = 1000) -> str:
        if not text or not isinstance(text, str):
            return ""
        # HTML escape –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS
        safe_text = html.escape(text)
        # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        safe_text = re.sub(r'[<>"\'\\\n\r\t]', '', safe_text)
        return safe_text[:max_length]
    
    @staticmethod
    def validate_url(url: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è URL"""
        if not url or not isinstance(url, str):
            return False
        
        url = url.strip()
        if len(url) > 2048:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ URL
            return False
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
        url_pattern = re.compile(
            r'^https?://'  # http:// –∏–ª–∏ https://
            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
            r'localhost|'  # localhost
            r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # IP
            r'(?::\d+)?'  # –ø–æ—Ä—Ç
            r'(?:/?|[/?]\S+)$', re.IGNORECASE
        )
        
        return bool(url_pattern.match(url))
    
    @staticmethod
    def validate_message_length(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        if not text:
            return False
        return len(text) <= 4096  # –õ–∏–º–∏—Ç Telegram

class SecurityValidator(InputValidator):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    @staticmethod
    def verify_telegram_request(headers: dict, content_length: int) -> bool:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ payload
        if content_length > 1024 * 1024:  # 1MB –ª–∏–º–∏—Ç
            logger.warning(f"üö® SECURITY: Payload too large: {content_length}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook secret
        if WEBHOOK_SECRET:
            received_token = headers.get('X-Telegram-Bot-Api-Secret-Token')
            if received_token != WEBHOOK_SECRET:
                logger.warning(f"üö® SECURITY: Invalid webhook secret")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ User-Agent
        user_agent = headers.get('User-Agent', '').lower()
        if 'telegram' not in user_agent and content_length > 0:
            logger.warning(f"üö® SECURITY: Suspicious User-Agent: {user_agent}")
            return False
        
        return True
    
    @staticmethod
    def validate_json_payload(payload: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è JSON payload"""
        try:
            if len(payload) > 512 * 1024:  # 512KB –ª–∏–º–∏—Ç
                return False
            
            data = json.loads(payload)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Telegram Update
            if not isinstance(data, dict):
                return False
            
            # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å update_id
            if 'update_id' not in data:
                return False
            
            return True
            
        except (json.JSONDecodeError, ValueError):
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
rate_limiter = WebhookRateLimiter()
security = SecurityValidator()

# === –°–ò–°–¢–ï–ú–ê –†–û–õ–ï–ô –ò –ü–†–ê–í v23.4 ===

def get_user_role(user_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return 'admin' if user_id in ADMIN_IDS else 'user'

def can_execute_command(user_id: int, command: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    role = get_user_role(user_id)
    if role == 'admin':
        return True
    return command in USER_PERMISSIONS.get('user', [])

def check_permissions(allowed_roles: list):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    def decorator(func):
        def wrapper(message):
            user_role = get_user_role(message.from_user.id)
            if user_role in allowed_roles or 'admin' in allowed_roles:
                return func(message)
            else:
                bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                logger.warning(f"üö´ ACCESS_DENIED: User {message.from_user.id} tried to execute {func.__name__}")
                return None
        return wrapper
    return decorator

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS

# === –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –î–õ–Ø –ë–£–î–£–©–ï–ô AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò v23.4 ===

class AIMessageAnalyzer:
    """AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–≠–¢–ê–ü 2)"""
    
    def __init__(self):
        # TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏
        self.model = None
        self.confidence_threshold = 0.7
        self.message_cache = {}
    
    def analyze_message_intent(self, text, context=None):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –≠–¢–ê–ü–ê 2)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑
        # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
        return self._basic_intent_analysis(text)
    
    def get_confidence_score(self, text, intent):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –≠–¢–ê–ü–ê 2)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å AI scoring
        return 0.8  # Placeholder
    
    def should_process_message(self, message):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –≠–¢–ê–ü–ê 2)"""
        # TODO: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        intent = self.analyze_message_intent(message.text)
        return intent in ['link_share', 'presave_claim']
    
    def _basic_intent_analysis(self, text):
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI (–¥–ª—è –≠–¢–ê–ü–ê 1)"""
        if not text:
            return 'ignore'
            
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if '—Ç–µ—Å—Ç' in text_lower or 'test' in text_lower:
            return 'ignore'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É
        if '—Ç—ã ' in text_lower or '–≤—ã ' in text_lower:
            return 'ignore'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–µ—Å–µ–π–≤–µ
        if is_presave_claim(text):
            return 'presave_claim'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Å—ã–ª–∫–∏
        if extract_links(text):
            return 'link_share'
        
        return 'ignore'

# –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –¥–ª—è –≠–¢–ê–ü–ê 2
ai_analyzer = AIMessageAnalyzer()

# === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–ñ–ò–ú–ê–ú–ò ===

def get_current_limits():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤"""
    try:
        current_mode = db.get_current_rate_mode()
        
        if current_mode not in RATE_LIMIT_MODES:
            logger.warning(f"Unknown rate mode: {current_mode}, falling back to conservative")
            current_mode = 'conservative'
            db.set_current_rate_mode('conservative')
        
        mode_config = RATE_LIMIT_MODES[current_mode]
        
        return {
            'max_responses_per_hour': max(mode_config.get('max_responses_per_hour', 60), 1),
            'min_cooldown_seconds': max(mode_config.get('min_cooldown_seconds', 60), 1),
            'mode_name': mode_config.get('name', 'üü¢ CONSERVATIVE'),
            'mode_emoji': mode_config.get('emoji', 'üê¢')
        }
    except Exception as e:
        logger.error(f"Error getting current limits: {e}")
        return {
            'max_responses_per_hour': 60,
            'min_cooldown_seconds': 60, 
            'mode_name': 'üü¢ CONSERVATIVE (FALLBACK)',
            'mode_emoji': 'üê¢'
        }

def set_rate_limit_mode(new_mode: str, user_id: int) -> tuple[bool, str]:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    if new_mode not in RATE_LIMIT_MODES:
        return False, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {new_mode}"
    
    mode_config = RATE_LIMIT_MODES[new_mode]
    
    if mode_config.get('admin_only', False) and not is_admin(user_id):
        return False, f"‚ùå –†–µ–∂–∏–º {mode_config['name']} –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
    
    old_mode = db.get_current_rate_mode()
    old_config = RATE_LIMIT_MODES.get(old_mode, {})
    
    db.set_current_rate_mode(new_mode)
    db.reset_rate_limits()
    
    change_text = f"""
üîÑ –†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ –∏–∑–º–µ–Ω—ë–Ω!

üìâ –ë—ã–ª–æ: {old_config.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìà –°—Ç–∞–ª–æ: {mode_config['name']}

‚ö° –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã:
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤/—á–∞—Å: {mode_config['max_responses_per_hour']}
‚Ä¢ Cooldown: {mode_config['min_cooldown_seconds']} —Å–µ–∫
‚Ä¢ –†–∏—Å–∫: {mode_config['risk']}

‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    """
    
    logger.info(f"üîÑ RATE_MODE: Changed from {old_mode} to {new_mode} by user {user_id}")
    
    return True, change_text

def reload_rate_limit_modes():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∂–∏–º–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    global RATE_LIMIT_MODES
    RATE_LIMIT_MODES = load_rate_limit_modes()
    logger.info("üîÑ RELOAD: Rate limit modes reloaded from environment variables")

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• –° –†–ê–°–®–ò–†–ï–ù–ò–Ø–ú–ò v23.4 ===

class Database:
    def __init__(self, db_path: str = "bot.db"):
        self.db_path = db_path
        self.pool = DatabasePool(db_path, DB_POOL_SIZE)
        logger.info(f"‚úÖ DATABASE: Initialized with connection pooling")
    
    def get_connection(self):
        return self.pool.get_connection()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ v23.4"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_links (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    total_links INTEGER DEFAULT 0,
                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS link_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    link_url TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    message_id INTEGER
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_responses (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    response_text TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_activity (
                    id INTEGER PRIMARY KEY,
                    is_active BOOLEAN DEFAULT 1,
                    responses_today INTEGER DEFAULT 0,
                    last_response_time TIMESTAMP,
                    last_reset_date DATE DEFAULT CURRENT_DATE
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS rate_limits (
                    id INTEGER PRIMARY KEY,
                    hourly_responses INTEGER DEFAULT 0,
                    last_hour_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    cooldown_until TIMESTAMP
                )
            ''')
            
            # === –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –ü–†–ï–°–ï–ô–í–û–í v23.4 ===
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS presave_claims (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    message_id INTEGER NOT NULL,
                    claim_text TEXT NOT NULL,
                    extracted_platforms TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    expires_at TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS presave_verifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    claim_id INTEGER REFERENCES presave_claims(id),
                    admin_id INTEGER NOT NULL,
                    admin_username TEXT,
                    verification_type TEXT NOT NULL,
                    admin_message_id INTEGER,
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_sessions (
                    user_id INTEGER PRIMARY KEY,
                    current_state TEXT,
                    data TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ user_links –¥–ª—è –ø—Ä–µ—Å–µ–π–≤–æ–≤
            cursor.execute("PRAGMA table_info(user_links)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'total_claimed_presaves' not in columns:
                cursor.execute('ALTER TABLE user_links ADD COLUMN total_claimed_presaves INTEGER DEFAULT 0')
                logger.info("‚úÖ DATABASE: Added total_claimed_presaves column")
            
            if 'total_verified_presaves' not in columns:
                cursor.execute('ALTER TABLE user_links ADD COLUMN total_verified_presaves INTEGER DEFAULT 0')
                logger.info("‚úÖ DATABASE: Added total_verified_presaves column")
            
            if 'last_presave_claim' not in columns:
                cursor.execute('ALTER TABLE user_links ADD COLUMN last_presave_claim TIMESTAMP')
                logger.info("‚úÖ DATABASE: Added last_presave_claim column")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_link_history_timestamp ON link_history(timestamp)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_bot_responses_timestamp ON bot_responses(timestamp)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_links_total ON user_links(total_links)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_sessions_state ON user_sessions(current_state)')
            
            # –ù–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–µ—Å–µ–π–≤–æ–≤
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_presave_claims_user_status ON presave_claims(user_id, status)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_presave_claims_created ON presave_claims(created_at)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_verifications_claim ON presave_verifications(claim_id)')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            cursor.execute('INSERT OR IGNORE INTO bot_activity (id, is_active) VALUES (1, 1)')
            cursor.execute('INSERT OR IGNORE INTO rate_limits (id) VALUES (1)')
            cursor.execute(
                'INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)',
                ('reminder_text', DEFAULT_REMINDER)
            )
            cursor.execute(
                'INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)',
                ('rate_limit_mode', 'normal')
            )
            cursor.execute(
                'INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)',
                ('inline_mode', 'hybrid')
            )
            
            conn.commit()
            logger.info("‚úÖ DATABASE: Database initialized successfully with v23.4 presave features")

    # === –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
    
    def set_user_state(self, user_id: int, state: str, data: str = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO user_sessions (user_id, current_state, data)
                VALUES (?, ?, ?)
            ''', (user_id, state, data))
            conn.commit()
    
    def get_user_state(self, user_id: int) -> tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT current_state, data FROM user_sessions WHERE user_id = ?
            ''', (user_id,))
            result = cursor.fetchone()
            return result if result else (None, None)
    
    def clear_user_state(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM user_sessions WHERE user_id = ?', (user_id,))
            conn.commit()

    def add_user_links(self, user_id: int, username: str, links: list, message_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        safe_username = security.sanitize_username(username)
        
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO user_links (user_id, username, total_links, last_updated)
                VALUES (?, ?, COALESCE((SELECT total_links FROM user_links WHERE user_id = ?), 0) + ?, CURRENT_TIMESTAMP)
            ''', (user_id, safe_username, user_id, len(links)))
            
            for link in links:
                cursor.execute('''
                    INSERT INTO link_history (user_id, link_url, message_id)
                    VALUES (?, ?, ?)
                ''', (user_id, link, message_id))
            
            conn.commit()
            logger.info(f"üíæ DB_SAVE: Saved {len(links)} links for user {safe_username}")

    def log_bot_response(self, user_id: int, response_text: str):
        safe_response = security.validate_text_input(response_text, 4000)
        
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO bot_responses (user_id, response_text)
                VALUES (?, ?)
            ''', (user_id, safe_response))
            conn.commit()

    def is_bot_active(self) -> bool:
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT is_active FROM bot_activity WHERE id = 1')
            result = cursor.fetchone()
            return bool(result[0]) if result else False

    def set_bot_active(self, active: bool):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE bot_activity SET is_active = ? WHERE id = 1', (active,))
            conn.commit()

    def can_send_response(self) -> tuple[bool, str]:
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT hourly_responses, last_hour_reset, cooldown_until
                FROM rate_limits WHERE id = 1
            ''')
            result = cursor.fetchone()
            
            if not result:
                return False, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"
            
            hourly_responses, last_hour_reset, cooldown_until = result
            now = datetime.now()
            
            current_limits = get_current_limits()
            max_responses = current_limits['max_responses_per_hour'] 
            cooldown_seconds = current_limits['min_cooldown_seconds']
            
            if cooldown_until:
                cooldown_time = datetime.fromisoformat(cooldown_until)
                if now < cooldown_time:
                    remaining = int((cooldown_time - now).total_seconds())
                    return False, f"Cooldown –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫"
            
            if last_hour_reset:
                last_reset = datetime.fromisoformat(last_hour_reset)
                if now - last_reset > timedelta(hours=1):
                    cursor.execute('''
                        UPDATE rate_limits 
                        SET hourly_responses = 0, last_hour_reset = ?
                        WHERE id = 1
                    ''', (now.isoformat(),))
                    hourly_responses = 0
            
            if hourly_responses >= max_responses:
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {max_responses} –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å"
            
            return True, "OK"

    def update_response_limits(self):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            now = datetime.now()
            
            current_limits = get_current_limits()
            cooldown_seconds = current_limits['min_cooldown_seconds']
            cooldown_until = now + timedelta(seconds=cooldown_seconds)
            
            cursor.execute('''
                UPDATE rate_limits 
                SET hourly_responses = hourly_responses + 1,
                    cooldown_until = ?
                WHERE id = 1
            ''', (cooldown_until.isoformat(),))
            
            conn.commit()

    def reset_rate_limits(self):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE rate_limits 
                SET hourly_responses = 0,
                    cooldown_until = NULL,
                    last_hour_reset = ?
                WHERE id = 1
            ''', (datetime.now().isoformat(),))
            conn.commit()

    def get_user_stats(self, username: str = None):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            if username:
                safe_username = security.sanitize_username(username)
                cursor.execute('''
                    SELECT username, total_links, last_updated
                    FROM user_links 
                    WHERE username = ? AND total_links > 0
                ''', (safe_username,))
                result = cursor.fetchone()
                return result
            else:
                cursor.execute('''
                    SELECT username, total_links, last_updated
                    FROM user_links 
                    WHERE total_links > 0
                    ORDER BY total_links DESC
                    LIMIT 50
                ''')
                result = cursor.fetchall()
                return result

    def get_bot_stats(self):
        with self.get_connection() as conn:
            try:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT hourly_responses, cooldown_until FROM rate_limits WHERE id = 1
                ''')
                limits = cursor.fetchone()
                
                cursor.execute('''
                    SELECT is_active, last_response_time FROM bot_activity WHERE id = 1
                ''')
                activity = cursor.fetchone()
                
                cursor.execute('''
                    SELECT COUNT(*) FROM bot_responses 
                    WHERE DATE(timestamp) = DATE('now')
                ''')
                today_responses = cursor.fetchone()
                
                current_limits = get_current_limits()
                
                return {
                    'hourly_responses': limits[0] if limits and limits[0] is not None else 0,
                    'hourly_limit': current_limits['max_responses_per_hour'],
                    'cooldown_until': limits[1] if limits else None,
                    'is_active': bool(activity[0]) if activity and activity[0] is not None else False,
                    'last_response': activity[1] if activity else None,
                    'today_responses': today_responses[0] if today_responses and today_responses[0] is not None else 0
                }
                
            except Exception as e:
                logger.error(f"Database error in get_bot_stats: {e}")
                return {
                    'hourly_responses': 0,
                    'hourly_limit': 60,
                    'cooldown_until': None,
                    'is_active': False,
                    'last_response': None,
                    'today_responses': 0
                }

    def clear_link_history(self):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM link_history')
            conn.commit()

    def get_reminder_text(self) -> str:
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT value FROM settings WHERE key = ?', ('reminder_text',))
            result = cursor.fetchone()
            return result[0] if result else DEFAULT_REMINDER

    def set_reminder_text(self, text: str):
        safe_text = security.validate_text_input(text, 4000)
        
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)
            ''', ('reminder_text', safe_text))
            conn.commit()

    def get_current_rate_mode(self) -> str:
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT value FROM settings WHERE key = ?', ('rate_limit_mode',))
            result = cursor.fetchone()
            return result[0] if result else 'normal'

    def set_current_rate_mode(self, mode: str):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)
            ''', ('rate_limit_mode', mode))
            conn.commit()

    def get_setting(self, key: str, default: str = None) -> str:
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT value FROM settings WHERE key = ?', (key,))
            result = cursor.fetchone()
            return result[0] if result else default

    def set_setting(self, key: str, value: str):
        safe_key = security.validate_text_input(key, 100)
        safe_value = security.validate_text_input(value, 1000)
        
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)
            ''', (safe_key, safe_value))
            conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# === –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–Ø–í–õ–ï–ù–ò–Ø –ü–†–ï–°–ï–ô–í–ê v23.4 ===

class InteractivePresaveSystem:
    """–ü–æ—à–∞–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–∞ - Thread-Safe v23.5"""
    
    def __init__(self, db_connection, bot_instance):
        self.db = db_connection
        self.bot = bot_instance
        self.user_sessions = {}
        self.session_timeout = 300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏
        self._lock = threading.RLock()  # Recursive lock –¥–ª—è thread safety
        self.max_sessions = int(os.getenv('MAX_CONCURRENT_SESSIONS', '100'))
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        self._cleanup_timer = None
        self._start_cleanup_timer()
    
    def _start_cleanup_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        if self._cleanup_timer:
            self._cleanup_timer.cancel()
        
        self._cleanup_timer = threading.Timer(60.0, self._auto_cleanup)
        self._cleanup_timer.daemon = True
        self._cleanup_timer.start()
    
    def _auto_cleanup(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        try:
            self._cleanup_expired_sessions()
        except Exception as e:
            logger.error(f"‚ùå Error in auto cleanup: {e}")
        finally:
            self._start_cleanup_timer()
    
    def _cleanup_expired_sessions(self):
        """Thread-safe –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        with self._lock:
            current_time = time.time()
            expired_users = []
            
            for user_id, session in self.user_sessions.items():
                if current_time - session.get('created_at', 0) > self.session_timeout:
                    expired_users.append(user_id)
            
            for user_id in expired_users:
                del self.user_sessions[user_id]
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
                try:
                    self.db.clear_user_state(user_id)
                except Exception as e:
                    logger.error(f"‚ùå Error clearing user state {user_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π
            if len(self.user_sessions) > self.max_sessions:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
                sorted_sessions = sorted(
                    self.user_sessions.items(),
                    key=lambda x: x[1].get('created_at', 0)
                )
                
                to_remove = len(sorted_sessions) - self.max_sessions
                for i in range(to_remove):
                    user_id = sorted_sessions[i][0]
                    del self.user_sessions[user_id]
                    self.db.clear_user_state(user_id)
                
                logger.warning(f"üßπ MEMORY: Removed {to_remove} oldest sessions (limit: {self.max_sessions})")
            
            if expired_users:
                logger.info(f"üßπ CLEANUP: Removed {len(expired_users)} expired presave sessions")
    
    def _is_session_valid(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        if user_id not in self.user_sessions:
            return False
        
        session = self.user_sessions[user_id]
        current_time = time.time()
        
        if current_time - session.get('created_at', 0) > self.session_timeout:
            del self.user_sessions[user_id]
            self.db.clear_user_state(user_id)
            return False
        
        return True
    
    def process_links_step(self, user_id, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ê"""
        
        if not self._is_session_valid(user_id):
            return "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /menu ‚Üí –ó–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤", None
        
        session = self.user_sessions[user_id]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        links = extract_links(message.text)
        
        if not links:
            return """
‚ùå **–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!**

üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
‚Ä¢ https://open.spotify.com/...
‚Ä¢ https://music.apple.com/...
‚Ä¢ https://music.yandex.ru/...
‚Ä¢ https://band.link/... (–∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã)

üì§ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
            """, None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        session['links'] = links
        session['step'] = 'waiting_comment'
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        response = f"""
‚úÖ **–°—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã!**

üîó **–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫:** {len(links)}
üìã **–°–ø–∏—Å–æ–∫:**
{chr(10).join([f"‚Ä¢ {link}" for link in links])}

üìù **–®–∞–≥ 2 –∏–∑ 2:** –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

üí¨ **–ß—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∏
‚Ä¢ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ —Ç—Ä–µ–∫–µ/–∞–ª—å–±–æ–º–µ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ "–°–¥–µ–ª–∞–ª –ø—Ä–µ—Å–µ–π–≤!"

‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
        """
        
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"skip_comment_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_presave_{user_id}")
        )
        
        return response, markup
    
    def process_comment_step(self, user_id, message_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"""
        
        if not self._is_session_valid(user_id):
            return "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /menu ‚Üí –ó–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤", None
        
        session = self.user_sessions[user_id]
        session['comment'] = message_text or "–°–¥–µ–ª–∞–ª –ø—Ä–µ—Å–µ–π–≤!"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        return self.generate_final_confirmation(user_id)
    
    def generate_final_confirmation(self, user_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        
        session = self.user_sessions[user_id]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ —Å—Å—ã–ª–æ–∫
        platforms = []
        for link in session['links']:
            if 'spotify' in link:
                platforms.append('üéµ Spotify')
            elif 'apple' in link:
                platforms.append('üçé Apple Music')
            elif 'yandex' in link:
                platforms.append('üîä Yandex Music')
            elif 'youtube' in link:
                platforms.append('‚ñ∂Ô∏è YouTube Music')
            elif 'band.link' in link or 'bandlink' in link:
                platforms.append('üîó Bandlink')
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        platforms = list(set(platforms))
        
        final_message = f"""
üéµ **–ì–æ—Ç–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–µ—Å–µ–π–≤–µ:**

üì± **–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:** {', '.join(platforms) if platforms else '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'}
üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {session['comment']}

üîó **–°—Å—ã–ª–∫–∏:**
{chr(10).join([f"‚Ä¢ {link}" for link in session['links']])}

üì§ **–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Ç–æ–ø–∏–∫–µ.**
        """
        
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_presave_{user_id}"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_presave_{user_id}")
        )
        
        return final_message, markup
    
    def publish_presave(self, user_id):
        """–ü—É–±–ª–∏–∫—É–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ"""
        
        if not self._is_session_valid(user_id):
            return "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞."
        
        session = self.user_sessions[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–ø–∏–∫–∞
        username = self.get_username(user_id)
        
        public_message = f"""
üéµ **–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–µ—Å–µ–π–≤–µ –æ—Ç @{username}**

üí¨ {session['comment']}

üîó **–°—Å—ã–ª–∫–∏:**
{chr(10).join(session['links'])}

‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞...
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫
        result = safe_send_message(
            chat_id=GROUP_ID,
            text=public_message,
            message_thread_id=THREAD_ID
        )
        
        if result and hasattr(result, 'message_id'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ–±—ä–µ–∫—Ç Message
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∑–∞—è–≤–∫—É
            self.save_presave_claim(user_id, session, result.message_id)
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del self.user_sessions[user_id]
            
            return "‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞."
        else:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def delete_presave(self, user_id):
        """–£–¥–∞–ª—è–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
        
        return "‚ùå –ó–∞—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    
    def get_username(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT username FROM user_links WHERE user_id = ?', (user_id,))
                result = cursor.fetchone()
                return result[0] if result else f"user_{user_id}"
        except:
            return f"user_{user_id}"
    
    def save_presave_claim(self, user_id, session, message_id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ë–î"""
        try:
            platforms = extract_platforms(session['comment'])
            
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO presave_claims 
                    (user_id, username, message_id, claim_text, extracted_platforms, status)
                    VALUES (?, ?, ?, ?, ?, 'pending')
                ''', (
                    user_id, 
                    self.get_username(user_id),
                    message_id,
                    session['comment'],
                    json.dumps(platforms) if platforms else "[]"
                ))
                conn.commit()
                
        except Exception as e:
            logger.error(f"‚ùå Error saving presave claim: {e}")

# === –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù–°–ö–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê v23.4 ===

class AdminAnalytics:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
    
    def __init__(self, db):
        self.db = db
    
    def get_user_links_history(self, username):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT lh.link_url, lh.timestamp, lh.message_id
                FROM link_history lh
                JOIN user_links ul ON lh.user_id = ul.user_id
                WHERE ul.username = ?
                ORDER BY lh.timestamp DESC
            ''', (username,))
            
            results = cursor.fetchall()
            
            if not results:
                return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å—Å—ã–ª–∫–∏"
            
            response = f"üîó **–í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:**\n\n"
            
            for i, (link, timestamp, msg_id) in enumerate(results, 1):
                date_str = timestamp[:16] if timestamp else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                display_link = link[:50] + "..." if len(link) > 50 else link
                
                response += f"{i}. {display_link}\n"
                response += f"   üìÖ {date_str} | üí¨ ID: {msg_id}\n\n"
            
            response += f"üìä **–ò—Ç–æ–≥–æ:** {len(results)} —Å—Å—ã–ª–æ–∫"
            
            return response
    
    def get_user_approvals_history(self, username):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT pc.claim_text, pc.status, pc.created_at, pv.admin_username, pv.verification_type
                FROM presave_claims pc
                LEFT JOIN presave_verifications pv ON pc.id = pv.claim_id
                JOIN user_links ul ON pc.user_id = ul.user_id
                WHERE ul.username = ?
                ORDER BY pc.created_at DESC
            ''', (username,))
            
            results = cursor.fetchall()
            
            if not results:
                return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–µ—Å–µ–π–≤—ã"
            
            response = f"‚úÖ **–í—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:**\n\n"
            
            verified_count = 0
            rejected_count = 0
            pending_count = 0
            
            for i, (claim_text, status, created_at, admin_username, verification_type) in enumerate(results, 1):
                date_str = created_at[:16] if created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                if status == 'verified':
                    status_emoji = "‚úÖ"
                    verified_count += 1
                elif status == 'rejected':
                    status_emoji = "‚ùå"
                    rejected_count += 1
                else:
                    status_emoji = "‚è≥"
                    pending_count += 1
                
                response += f"{i}. {status_emoji} {claim_text[:50]}...\n"
                response += f"   üìÖ {date_str}"
                
                if admin_username:
                    response += f" | üëÆ {admin_username}"
                
                response += "\n\n"
            
            response += f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π:**
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {verified_count}
‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}
‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {pending_count}
üìä –í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {len(results)}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {(verified_count/len(results)*100):.1f}%
            """
            
            return response
    
    def get_user_links_vs_approvals(self, username):
        """–°—Ä–∞–≤–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Å—ã–ª–æ–∫
            cursor.execute('''
                SELECT COUNT(*) as total_links
                FROM link_history lh
                JOIN user_links ul ON lh.user_id = ul.user_id
                WHERE ul.username = ?
            ''', (username,))
            
            links_result = cursor.fetchone()
            total_links = links_result[0] if links_result else 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ—Å–µ–π–≤–æ–≤
            cursor.execute('''
                SELECT 
                    COUNT(*) as total_claims,
                    COUNT(CASE WHEN status = 'verified' THEN 1 END) as verified_claims,
                    COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected_claims,
                    COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_claims
                FROM presave_claims pc
                JOIN user_links ul ON pc.user_id = ul.user_id
                WHERE ul.username = ?
            ''', (username,))
            
            presave_result = cursor.fetchone()
            if presave_result:
                total_claims, verified_claims, rejected_claims, pending_claims = presave_result
            else:
                total_claims = verified_claims = rejected_claims = pending_claims = 0
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            if total_claims > 0:
                success_rate = (verified_claims/total_claims*100)
                reliability = '–í—ã—Å–æ–∫–∞—è' if success_rate > 80 else '–°—Ä–µ–¥–Ω—è—è' if success_rate > 50 else '–ù–∏–∑–∫–∞—è'
            else:
                success_rate = 0
                reliability = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            
            response = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏ vs. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è @{username}:**

üîó **–°–°–´–õ–ö–ò:**
üì§ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_links}

üéµ **–ü–†–ï–°–ï–ô–í–´:**
üìù –í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {total_claims}
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {verified_claims}
‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_claims}
‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {pending_claims}

üìà **–ê–ù–ê–õ–ò–ó:**
üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {success_rate:.1f}%
üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏/–ø—Ä–µ—Å–µ–π–≤—ã: {total_links}:{total_claims}
‚≠ê –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {reliability}

‚ö†Ô∏è **–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:** –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π –∏–∑-–∑–∞:
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
‚Ä¢ –°–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ —Å—Å—ã–ª–æ–∫
‚Ä¢ –°—Å—ã–ª–æ–∫ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ—Å–µ–π–≤–∞–º–∏
            """
            
            return response

# === –ë–ê–ó–û–í–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê–ú v23.4 ===

class BasicAdminNotifications:
    """–ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    
    def __init__(self, db, bot):
        self.db = db
        self.bot = bot
    
    def notify_new_presave_claim(self, claim_id, user_id, username):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞—è–≤–ª–µ–Ω–∏–∏"""
        
        notification = f"""
üîî **–ù–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–µ—Å–µ–π–≤–µ!**

üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}
üÜî ID –∑–∞—è–≤–ª–µ–Ω–∏—è: {claim_id}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply —Å —Ç–µ–∫—Å—Ç–æ–º "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" –∏–ª–∏ "–æ—Ç–∫–ª–æ–Ω—è—é"
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                self.bot.send_message(admin_id, notification)
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")
    
    def notify_user_first_presave(self, user_id, username):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º –ø—Ä–µ—Å–µ–π–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        notification = f"""
üéâ **–ü–µ—Ä–≤—ã–π –ø—Ä–µ—Å–µ–π–≤!**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–µ—Å–µ–π–≤!
üéØ –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                self.bot.send_message(admin_id, notification)
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")
    
    def notify_links_posted(self, user_id, username, links_count):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        
        notification = f"""
üîó **–ù–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–æ–ø–∏–∫–µ**

üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: {links_count}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å–ø–∞–º–∞)
        # for admin_id in ADMIN_IDS:
        #     try:
        #         self.bot.send_message(admin_id, notification)
        #     except Exception as e:
        #         logger.error(f"Failed to notify admin {admin_id}: {e}")

# === –†–ê–°–®–ò–†–ï–ù–ù–´–ô –û–¢–í–ï–¢ –ë–û–¢–ê v23.4 ===

def generate_enhanced_bot_response(user_id, links):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_text = db.get_reminder_text()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫ —Å –∞–≤—Ç–æ—Ä–∞–º–∏
    recent_links = get_recent_links_with_authors(10)
    
    if recent_links:
        links_section = "\n\nüîó **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n"
        
        for i, (link, author) in enumerate(recent_links, 1):
            # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            display_link = link[:60] + "..." if len(link) > 60 else link
            
            # –£–±–∏—Ä–∞–µ–º @ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            clean_author = author.replace('@', '') if author else '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'
            
            links_section += f"{i}. {display_link}\n   üë§ –ö—Ç–æ –ø—Ä–∏—Å–ª–∞–ª: {clean_author}\n"
    else:
        links_section = "\n\nüîó **–ü–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**"
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º
    full_response = reminder_text + links_section
    
    return full_response

def get_recent_links_with_authors(limit=10):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Å –∞–≤—Ç–æ—Ä–∞–º–∏"""
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT lh.link_url, ul.username, lh.timestamp
            FROM link_history lh
            JOIN user_links ul ON lh.user_id = ul.user_id
            ORDER BY lh.timestamp DESC
            LIMIT ?
        ''', (limit,))
        
        results = cursor.fetchall()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –∏ –∞–≤—Ç–æ—Ä–∞
        return [(link, username or '–ê–Ω–æ–Ω–∏–º–Ω—ã–π') for link, username, _ in results]

# === –£–õ–£–ß–®–ï–ù–ù–´–ï INLINE –ú–ï–ù–Æ v23.4 ===

class InlineMenus:
    """–°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö inline –º–µ–Ω—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É v23.4"""
    
    @staticmethod
    def create_user_menu() -> InlineKeyboardMarkup:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É v23.4"""
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –°–µ–∫—Ü–∏—è "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        markup.add(
            InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats_menu")
        )
        
        # –°–µ–∫—Ü–∏—è "–õ–∏–¥–µ—Ä–±–æ—Ä–¥"
        markup.add(
            InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard_menu")
        )
        
        # –°–µ–∫—Ü–∏—è "–î–µ–π—Å—Ç–≤–∏—è"
        markup.add(
            InlineKeyboardButton("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è", callback_data="user_actions_menu")
        )
        
        return markup
    
    @staticmethod
    def create_admin_menu() -> InlineKeyboardMarkup:
        """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É v23.4"""
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –°–µ–∫—Ü–∏—è "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" (–∫–∞–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        markup.add(
            InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats_menu")
        )
        
        # –°–µ–∫—Ü–∏—è "–õ–∏–¥–µ—Ä–±–æ—Ä–¥"
        markup.add(
            InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard_menu")
        )
        
        # –°–µ–∫—Ü–∏—è "–î–µ–π—Å—Ç–≤–∏—è" (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        markup.add(
            InlineKeyboardButton("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è", callback_data="admin_actions_menu")
        )
        
        return markup
    
    @staticmethod
    def create_my_stats_menu(user_id: int) -> InlineKeyboardMarkup:
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö
        username = get_username_by_id(user_id)
        user_data = db.get_user_stats(username)
        
        if user_data:
            _, total_links, _ = user_data
            rank_emoji, rank_name = get_user_rank(total_links)
            
            # –ö–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            markup.add(
                InlineKeyboardButton(f"üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏: {total_links} ({rank_emoji} {rank_name})", callback_data="view_my_links")
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            all_users = db.get_user_stats()
            position = get_user_position_in_ranking(username, all_users)
            
            markup.add(
                InlineKeyboardButton(f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {position} –∏–∑ {len(all_users)}", callback_data="view_full_ranking")
            )
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–∞–Ω–∏—è
            progress_needed, next_rank = get_progress_to_next_rank(total_links)
            if progress_needed > 0:
                markup.add(
                    InlineKeyboardButton(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ {next_rank}: {progress_needed} —Å—Å—ã–ª–æ–∫", callback_data="view_ranks_info")
                )
            else:
                markup.add(
                    InlineKeyboardButton("üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!", callback_data="view_ranks_info")
                )
        else:
            markup.add(
                InlineKeyboardButton("üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏: 0 (ü•â –ù–∞—á–∏–Ω–∞—é—â–∏–π)", callback_data="help_getting_started")
            )
        
        # –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
        markup.add(
            InlineKeyboardButton("üîó –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Å—Å—ã–ª–æ–∫", callback_data="list_my_links")
        )
        
        # –ü—Ä–µ—Å–µ–π–≤—ã (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è v23.4)
        markup.add(
            InlineKeyboardButton("üéµ –ú–æ–∏ –ø—Ä–µ—Å–µ–π–≤—ã: —Å–∫–æ—Ä–æ", callback_data="view_my_presaves")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        
        return markup
    
    @staticmethod
    def create_leaderboard_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å —Ç–∞–±–∞–º–∏"""
        markup = InlineKeyboardMarkup(row_width=3)
        
        # –¢–∞–±—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        markup.add(
            InlineKeyboardButton("üìä –ü–æ —Å—Å—ã–ª–∫–∞–º", callback_data="leaderboard_links"),
            InlineKeyboardButton("üéµ –ü–æ –ø—Ä–µ—Å–µ–π–≤–∞–º", callback_data="leaderboard_presaves"),
            InlineKeyboardButton("‚≠ê –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard_overall")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        
        return markup
    
    @staticmethod
    def create_user_actions_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –ó–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤ (–≥–ª–∞–≤–Ω–∞—è –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        markup.add(
            InlineKeyboardButton("üéµ –ó–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤", callback_data="start_presave_claim")
        )
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
        markup.add(
            InlineKeyboardButton("üîó –í—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="alllinks"),
            InlineKeyboardButton("üîó –ö—Ä–∞–π–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫", callback_data="recent")
        )
        
        # –ü–æ–º–æ—â—å
        markup.add(
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        
        return markup
    
    @staticmethod
    def create_admin_actions_menu() -> InlineKeyboardMarkup:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤
        markup.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤", callback_data="verify_presave_menu")
        )
        
        # –ê–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        markup.add(
            InlineKeyboardButton("üìä –ê–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics_menu")
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        markup.add(
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data="bot_settings_menu")
        )
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        markup.add(
            InlineKeyboardButton("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="diagnostics_menu")
        )
        
        # –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        markup.add(
            InlineKeyboardButton("üéµ –ó–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤", callback_data="start_presave_claim")
        )
        
        markup.add(
            InlineKeyboardButton("üîó –í—Å–µ —Å—Å—ã–ª–∫–∏", callback_data="alllinks"),
            InlineKeyboardButton("üîó –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏", callback_data="recent")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        
        return markup
    
    @staticmethod
    def create_admin_analytics_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –∞–¥–º–∏–Ω—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        markup = InlineKeyboardMarkup(row_width=1)
        
        markup.add(
            InlineKeyboardButton("üîó –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ @username", callback_data="admin_user_links")
        )
        
        markup.add(
            InlineKeyboardButton("üîó –°–ø–∏—Å–æ–∫ –∞–ø–ø—Ä—É–≤–æ–≤ @username", callback_data="admin_user_approvals")
        )
        
        markup.add(
            InlineKeyboardButton("üîó –°—Ç–∞—Ç–∞ —Å—Å—ã–ª–∫–∏ vs. –∞–ø–ø—Ä—É–≤—ã @username", callback_data="admin_user_comparison")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_actions_menu")
        )
        
        return markup
    
    @staticmethod
    def create_bot_settings_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤
        markup.add(
            InlineKeyboardButton("üéõÔ∏è –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤", callback_data="rate_modes_menu")
        )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
        markup.add(
            InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="activate_bot"),
            InlineKeyboardButton("üõë –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="deactivate_bot")
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞
        markup.add(
            InlineKeyboardButton("üí¨ –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="change_message"),
            InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_actions_menu")
        )
        
        return markup
    
    @staticmethod
    def create_rate_modes_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ –ª–∏–º–∏—Ç–æ–≤"""
        markup = InlineKeyboardMarkup(row_width=1)
        
        current_mode = db.get_current_rate_mode()
        
        for mode_key, mode_config in RATE_LIMIT_MODES.items():
            emoji = mode_config['emoji']
            name = mode_config['name']
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
            if mode_key == current_mode:
                button_text = f"‚úÖ {emoji} {name}"
            else:
                button_text = f"{emoji} {name}"
            
            markup.add(
                InlineKeyboardButton(button_text, callback_data=f"setmode_{mode_key}")
            )
        
        markup.add(
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∂–∏–º—ã", callback_data="reload_modes")
        )
        
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="bot_settings_menu")
        )
        
        return markup
    
    @staticmethod
    def create_diagnostics_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        markup.add(
            InlineKeyboardButton("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Å–µ–π–≤–æ–≤", callback_data="test_presave_system"),
            InlineKeyboardButton("üíì –¢–µ—Å—Ç keepalive", callback_data="test_keepalive")
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        markup.add(
            InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_health"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="bot_statistics")
        )
        
        # –†–µ–∂–∏–º—ã –∏ —Å—Ç–∞—Ç—É—Å
        markup.add(
            InlineKeyboardButton("üéõÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º", callback_data="current_mode"),
            InlineKeyboardButton("ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="bot_status")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_actions_menu")
        )
        
        return markup
    
    @staticmethod
    def create_verify_presave_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤"""
        markup = InlineKeyboardMarkup(row_width=1)
        
        markup.add(
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="pending_presaves")
        )
        
        markup.add(
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π", callback_data="verification_stats")
        )
        
        markup.add(
            InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é", callback_data="verification_help")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_actions_menu")
        )
        
        return markup
    
    @staticmethod
    def create_back_button(callback_data: str = "main_menu") -> InlineKeyboardMarkup:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=callback_data))
        return markup

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ï–ù–Æ ===

def get_username_by_id(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ username –ø–æ user_id"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT username FROM user_links WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else f"user_{user_id}"
    except:
        return f"user_{user_id}"

def get_user_position_in_ranking(username: str, all_users: list) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
    for i, (db_username, _, _) in enumerate(all_users, 1):
        if db_username == username:
            return i
    return len(all_users) + 1

def get_user_rank(total_links: int) -> tuple[str, str]:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if total_links >= 31:
        return "üíé", "–ê–º–±–∞—Å—Å–∞–¥–æ—Ä"
    elif total_links >= 16:
        return "ü•á", "–ü—Ä–æ–º–æ—É—Ç–µ—Ä"
    elif total_links >= 6:
        return "ü•à", "–ê–∫—Ç–∏–≤–Ω—ã–π"
    else:
        return "ü•â", "–ù–∞—á–∏–Ω–∞—é—â–∏–π"

def get_progress_to_next_rank(total_links: int) -> tuple[int, str]:
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–∞–Ω–∏—è"""
    if total_links >= 31:
        return 0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!"
    elif total_links >= 16:
        return 31 - total_links, "üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä"
    elif total_links >= 6:
        return 16 - total_links, "ü•á –ü—Ä–æ–º–æ—É—Ç–µ—Ä"
    else:
        return 6 - total_links, "ü•à –ê–∫—Ç–∏–≤–Ω—ã–π"

def telegram_api_retry(max_retries=3, backoff_factor=1.5):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry Telegram API –≤—ã–∑–æ–≤–æ–≤ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff"""
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_retries + 1):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    error_str = str(e).lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ rate limiting (429) –∏–ª–∏ network errors
                    if any(keyword in error_str for keyword in ['429', 'rate limit', 'too many requests', 'timeout', 'connection']):
                        if attempt < max_retries:
                            delay = backoff_factor ** attempt
                            logger.warning(f"üîÑ RETRY: Attempt {attempt + 1}/{max_retries + 1} failed: {e}. Retrying in {delay:.1f}s")
                            time.sleep(delay)
                            continue
                    
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    raise e
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
            logger.error(f"‚ùå RETRY_FAILED: All {max_retries + 1} attempts failed. Last error: {last_exception}")
            raise last_exception
        
        return wrapper
    return decorator

@telegram_api_retry()
def safe_send_message(chat_id: int, text: str, message_thread_id: int = None, reply_to_message_id: int = None, reply_markup=None):
    """Thread-safe –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    try:
        logger.info(f"üí¨ SEND_MESSAGE: Preparing to send to chat {chat_id}")
        
        time.sleep(RESPONSE_DELAY)
        
        if message_thread_id:
            result = bot.send_message(
                chat_id=chat_id, 
                text=text,
                message_thread_id=message_thread_id,
                reply_to_message_id=reply_to_message_id,
                reply_markup=reply_markup
            )
        else:
            if reply_to_message_id:
                result = bot.reply_to(reply_to_message_id, text, reply_markup=reply_markup)
            else:
                result = bot.send_message(chat_id, text, reply_markup=reply_markup)
        
        logger.info(f"‚úÖ SENT: Message sent successfully (ID: {result.message_id})")
        return result
    except Exception as e:
        logger.error(f"‚ùå SEND_ERROR: Failed to send message: {str(e)}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
menus = InlineMenus()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ—Å–µ–π–≤–æ–≤
interactive_presave_system = InteractivePresaveSystem(db, bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
admin_analytics = AdminAnalytics(db)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
admin_notifications = BasicAdminNotifications(db, bot)

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
all_users = []  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===

@bot.message_handler(func=lambda message: db.get_user_state(message.from_user.id)[0] is not None)
def handle_user_states(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ê"""
    user_id = message.from_user.id
    state, data = db.get_user_state(user_id)
    
    try:
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Å–µ–π–≤–æ–≤
        if state == 'waiting_presave_links':
            response, markup = interactive_presave_system.process_links_step(user_id, message)
            
            if markup:  # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —Å—Å—ã–ª–∫–∏
                bot.reply_to(message, response, reply_markup=markup, parse_mode='Markdown')
            else:  # –û—à–∏–±–∫–∞, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                bot.reply_to(message, response, parse_mode='Markdown')
        
        elif state == 'waiting_presave_comment':
            response, markup = interactive_presave_system.process_comment_step(user_id, message.text)
            bot.reply_to(message, response, reply_markup=markup, parse_mode='Markdown')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        elif state == 'waiting_new_message':
            if not is_admin(user_id):
                bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
            
            new_text = message.text.strip()
            
            if not new_text:
                bot.reply_to(message, "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            db.set_reminder_text(new_text)
            
            response = f"""
‚úÖ **–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!**

**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**
{new_text}

–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞.
            """
            
            bot.reply_to(message, response, parse_mode='Markdown')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        elif state == 'waiting_username_for_links':
            if not is_admin(user_id):
                bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
            
            username = message.text.strip().replace('@', '')
            response = admin_analytics.get_user_links_history(username)
            
            bot.reply_to(message, response, parse_mode='Markdown')
        
        elif state == 'waiting_username_for_approvals':
            if not is_admin(user_id):
                bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
            
            username = message.text.strip().replace('@', '')
            response = admin_analytics.get_user_approvals_history(username)
            
            bot.reply_to(message, response, parse_mode='Markdown')
        
        elif state == 'waiting_username_for_comparison':
            if not is_admin(user_id):
                bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
            
            username = message.text.strip().replace('@', '')
            response = admin_analytics.get_user_links_vs_approvals(username)
            
            bot.reply_to(message, response, parse_mode='Markdown')
        
        # –ü—Ä–æ—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        elif state == 'waiting_username':
            username = message.text.strip().replace('@', '')
            user_data = db.get_user_stats(username)
            
            if not user_data:
                bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Å—Å—ã–ª–æ–∫")
                return
            
            username_db, total_links, last_updated = user_data
            rank_emoji, rank_name = get_user_rank(total_links)
            
            stat_text = f"""
üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username_db}:

üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_updated[:16]}
üèÜ –ó–≤–∞–Ω–∏–µ: {rank_emoji} {rank_name}

‚ú® v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ—Å–µ–π–≤–æ–≤ –≥–æ—Ç–æ–≤–∞!
            """
            
            bot.reply_to(message, stat_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in state handler: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    finally:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if state not in ['waiting_presave_links', 'waiting_presave_comment']:
            db.clear_user_state(user_id)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–ï–°–ï–ô–í–û–í v23.4 ===

@bot.message_handler(func=lambda m: (
    m.chat.id == GROUP_ID and 
    m.message_thread_id == THREAD_ID and 
    m.text and 
    not m.text.startswith('/') and
    not m.from_user.is_bot and
    is_presave_claim(m.text)
))
def handle_presave_claim_v23_4(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö v23.4"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        
        logger.info(f"üéµ PRESAVE_CLAIM_V23_4: User {user_id} (@{username}) claimed presave")
        logger.info(f"üéµ CLAIM_TEXT: '{message.text}'")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platforms = extract_platforms(message.text)
        logger.info(f"üéµ EXTRACTED_PLATFORMS: {platforms}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO presave_claims 
                (user_id, username, message_id, claim_text, extracted_platforms, status)
                VALUES (?, ?, ?, ?, ?, 'pending')
            ''', (
                user_id, 
                security.sanitize_username(username),
                message.message_id,
                security.validate_text_input(message.text, 1000),
                json.dumps(platforms) if platforms else "[]"
            ))
            
            claim_id = cursor.lastrowid
            conn.commit()
            
            logger.info(f"üéµ CLAIM_SAVED: ID={claim_id}, Platforms={platforms}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞—è–≤–ª–µ–Ω–∏–∏
        admin_notifications.notify_new_presave_claim(claim_id, user_id, username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫
        response_text = f"""
üéµ **–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–µ—Å–µ–π–≤–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!**

üë§ –û—Ç: @{username}
üìä ID: {claim_id}
üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(platforms) if platforms else '–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'}

‚úÖ **v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:** –ó–∞—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu ‚Üí "–ó–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤" –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞!
        """
        
        safe_send_message(
            chat_id=GROUP_ID,
            text=response_text,
            message_thread_id=THREAD_ID,
            reply_to_message_id=message.message_id
        )
        
    except Exception as e:
        logger.error(f"‚ùå PRESAVE_CLAIM_ERROR: {str(e)}")

@bot.message_handler(func=lambda m: (
    m.chat.id == GROUP_ID and 
    m.message_thread_id == THREAD_ID and 
    is_admin(m.from_user.id) and 
    is_admin_verification(m)
))
def handle_admin_verification_v23_4(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤ v23.4"""
    try:
        admin_id = message.from_user.id
        admin_username = message.from_user.username or f"admin_{admin_id}"
        
        logger.info(f"üéµ ADMIN_VERIFICATION_V23_4: Admin {admin_id} (@{admin_username})")
        
        if message.reply_to_message:
            logger.info(f"üéµ REPLIED_TO: Message {message.reply_to_message.message_id}")
            logger.info(f"üéµ VERIFICATION_TEXT: '{message.text}'")
            
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ò—â–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ message_id
                cursor.execute('''
                    SELECT id, user_id, username, claim_text FROM presave_claims 
                    WHERE message_id = ? AND status = 'pending'
                ''', (message.reply_to_message.message_id,))
                
                claim = cursor.fetchone()
                
                if claim:
                    claim_id, claim_user_id, claim_username, claim_text = claim
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    cursor.execute('''
                        INSERT INTO presave_verifications
                        (claim_id, admin_id, admin_username, verification_type, admin_message_id)
                        VALUES (?, ?, ?, 'verified', ?)
                    ''', (claim_id, admin_id, admin_username, message.message_id))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–ª–µ–Ω–∏—è
                    cursor.execute('''
                        UPDATE presave_claims SET status = 'verified' WHERE id = ?
                    ''', (claim_id,))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor.execute('''
                        UPDATE user_links 
                        SET total_verified_presaves = COALESCE(total_verified_presaves, 0) + 1,
                            last_presave_claim = CURRENT_TIMESTAMP
                        WHERE user_id = ?
                    ''', (claim_user_id,))
                    
                    conn.commit()
                    
                    logger.info(f"üéµ VERIFICATION_SAVED: Claim {claim_id} verified by admin {admin_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫
                    response_text = f"""
‚úÖ **–ü—Ä–µ—Å–µ–π–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!**

üëÆ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: @{admin_username}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{claim_username}
üÜî ID –∑–∞—è–≤–ª–µ–Ω–∏—è: {claim_id}
üìÖ –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}

üéâ –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –∑–∞—Å—á–∏—Ç–∞–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!

üí° **v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    """
                    
                    safe_send_message(
                        chat_id=GROUP_ID,
                        text=response_text,
                        message_thread_id=THREAD_ID,
                        reply_to_message_id=message.reply_to_message.message_id
                    )
                    
                else:
                    logger.warning(f"üéµ VERIFICATION_NOT_FOUND: No pending claim for message {message.reply_to_message.message_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                    safe_send_message(
                        chat_id=GROUP_ID,
                        text="‚ùå –ó–∞—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                        message_thread_id=THREAD_ID,
                        reply_to_message_id=message.message_id
                    )
        
    except Exception as e:
        logger.error(f"‚ùå ADMIN_VERIFICATION_ERROR: {str(e)}")

# === –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô v23.4 ===

@bot.message_handler(func=lambda message: message.chat.id == GROUP_ID and message.message_thread_id == THREAD_ID)
def handle_topic_message_v23_4(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤ v23.4"""
    
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    message_text = message.text or message.caption or ""
    
    logger.info(f"üì® TOPIC_MESSAGE_V23_4: Message from user {user_id} (@{username})")
    logger.info(f"üìù MESSAGE_CONTENT: '{message_text[:100]}{'...' if len(message_text) > 100 else ''}'")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        logger.info("üö´ SKIPPED: Command message")
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
    if message.from_user.is_bot:
        logger.info("üö´ SKIPPED: Bot message")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    if not db.is_bot_active():
        logger.info("üö´ SKIPPED: Bot inactive")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏
    links = extract_links(message_text)
    logger.info(f"üîç LINKS_FOUND: {len(links)} links")
    
    if links:
        for i, link in enumerate(links, 1):
            logger.info(f"üîó FOUND_LINK_{i}: {link}")
    
    if not links:
        logger.info("üö´ SKIPPED: No links found")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    can_respond, reason = db.can_send_response()
    logger.info(f"üö¶ RATE_LIMIT: Can respond: {can_respond}, reason: '{reason}'")
    
    if not can_respond:
        logger.warning(f"üö´ BLOCKED: Response blocked: {reason}")
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫–∏
        db.add_user_links(user_id, username, links, message.message_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        enhanced_response = generate_enhanced_bot_response(user_id, links)
        logger.info(f"üí¨ ENHANCED_RESPONSE: Generated response with community links")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        success = safe_send_message(
            chat_id=GROUP_ID,
            text=enhanced_response,
            message_thread_id=THREAD_ID,
            reply_to_message_id=message.message_id
        )
        
        if success:
            db.update_response_limits()
            db.log_bot_response(user_id, enhanced_response)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # admin_notifications.notify_links_posted(user_id, username, len(links))
            
            logger.info(f"üéâ SUCCESS: Enhanced response sent for user {username} ({len(links)} links)")
        else:
            logger.error(f"‚ùå FAILED: Could not send enhanced response for user {username}")
        
    except Exception as e:
        logger.error(f"üí• ERROR: Exception in message processing v23.4: {str(e)}")
        logger.error(f"üí• ERROR_DETAILS: User: {username}, Links: {len(links)}, Text: '{message_text[:100]}'")

# === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô CALLBACK HANDLER ===

class CallbackRouter:
    """–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤ v23.5"""
    
    def __init__(self, db, menus, interactive_presave_system, admin_analytics):
        self.db = db
        self.menus = menus
        self.interactive_presave_system = interactive_presave_system
        self.admin_analytics = admin_analytics
        self.handlers = self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤"""
        return {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é
            'main_menu': self._handle_main_menu,
            'my_stats_menu': self._handle_my_stats_menu,
            'leaderboard_menu': self._handle_leaderboard_menu,
            'user_actions_menu': self._handle_user_actions_menu,
            'admin_actions_menu': self._handle_admin_actions_menu,
            
            # –ü—Ä–µ—Å–µ–π–≤—ã
            'start_presave_claim': self._handle_start_presave_claim,
            'cancel_presave_': self._handle_cancel_presave,
            'skip_comment_': self._handle_skip_comment,
            'publish_presave_': self._handle_publish_presave,
            'delete_presave_': self._handle_delete_presave,
            
            # –ê–¥–º–∏–Ω–∫–∞
            'admin_analytics_menu': self._handle_admin_analytics_menu,
            'bot_settings_menu': self._handle_bot_settings_menu,
            'setmode_': self._handle_setmode,
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            'test_presave_system': self._handle_test_presave_system,
            'test_keepalive': self._handle_test_keepalive,
            'system_health': self._handle_system_health,
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            'alllinks': self._handle_alllinks,
            'recent': self._handle_recent,
            'help': self._handle_help
        }
    
    def route_callback(self, call):
        """–†–æ—É—Ç–∏–Ω–≥ callback'–∞ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É"""
        try:
            user_role = get_user_role(call.from_user.id)
            
            # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            handler = None
            handler_key = None
            
            for key, func in self.handlers.items():
                if call.data == key or call.data.startswith(key):
                    handler = func
                    handler_key = key
                    break
            
            if handler:
                logger.info(f"üîÑ CALLBACK_ROUTE: {call.data} ‚Üí {handler_key} (user: {call.from_user.id})")
                return handler(call, user_role)
            else:
                logger.warning(f"‚ö†Ô∏è UNKNOWN_CALLBACK: {call.data}")
                bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå CALLBACK_ROUTE_ERROR: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
    
    def _handle_main_menu(self, call, user_role):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if user_role == 'admin':
            markup = self.menus.create_admin_menu()
            text = "üëë –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é v23.5:"
        else:
            markup = self.menus.create_user_menu()
            text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é v23.5:"
        
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        return True
    
    def _handle_start_presave_claim(self, call, user_role):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–∞"""
        response, markup = self.interactive_presave_system.start_presave_claim(
            call.from_user.id, 
            call.message.message_id
        )
        
        self.db.set_user_state(call.from_user.id, 'waiting_presave_links')
        
        bot.edit_message_text(
            response,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return True
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...
    def _handle_alllinks(self, call, user_role):
        return execute_alllinks_callback(call)
    
    def _handle_recent(self, call, user_role):
        return execute_recent_callback(call)
    
    def _handle_help(self, call, user_role):
        return execute_help_callback(call)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
callback_router = None

@bot.callback_query_handler(func=lambda call: True)
def handle_all_callbacks(call):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    global callback_router
    
    if callback_router is None:
        callback_router = CallbackRouter(db, menus, interactive_presave_system, admin_analytics)
    
    try:
        success = callback_router.route_callback(call)
        if success:
            bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"‚ùå Callback error: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# === CALLBACK –§–£–ù–ö–¶–ò–ò ===

def execute_test_presave_system_callback(call):
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Å–µ–π–≤–æ–≤ —á–µ—Ä–µ–∑ callback"""
    try:
        test_results = []
        
        # –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü –ë–î
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM presave_claims")
            claims_count = cursor.fetchone()[0]
            test_results.append(f"‚úÖ presave_claims: {claims_count} –∑–∞–ø–∏—Å–µ–π")
            
            cursor.execute("SELECT COUNT(*) FROM presave_verifications")
            verifications_count = cursor.fetchone()[0]
            test_results.append(f"‚úÖ presave_verifications: {verifications_count} –∑–∞–ø–∏—Å–µ–π")
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        try:
            response, markup = interactive_presave_system.start_presave_claim(999999999, 0)
            if response and markup:
                test_results.append("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: OK")
            else:
                test_results.append("‚ùå –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ERROR")
        except Exception as e:
            test_results.append(f"‚ùå –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        try:
            test_analytics = admin_analytics.get_user_links_history("test_user")
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in test_analytics:
                test_results.append("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: OK")
            else:
                test_results.append("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: OK")
        except Exception as e:
            test_results.append(f"‚ùå –ê–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {str(e)}")
        
        all_passed = all("‚úÖ" in result for result in test_results)
        
        result_text = f"""
üß™ **–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Å–µ–π–≤–æ–≤ v23.4:**

üìä **–†–ï–ó–£–õ–¨–¢–ê–¢–´:**
{chr(10).join(test_results)}

üéØ **–°–¢–ê–¢–£–°:** {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_passed else '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}

üÜï **–≠–¢–ê–ü 1:** {'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã' if all_passed else '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}
        """
        
        markup = menus.create_back_button("diagnostics_menu")
        bot.edit_message_text(
            result_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in test callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def execute_test_keepalive_callback(call):
    """–¢–µ—Å—Ç keepalive —á–µ—Ä–µ–∑ callback"""
    try:
        try:
            request = urllib.request.Request(KEEPALIVE_URL)
            request.add_header('User-Agent', 'TelegramBot/v23.4-test')
            
            with urllib.request.urlopen(request, timeout=10) as response:
                status_code = response.getcode()
                response_data = response.read().decode('utf-8')
            
            try:
                response_json = json.loads(response_data)
                service_status = response_json.get('service_status', 'unknown')
                db_check = response_json.get('details', {}).get('database_check', 'unknown')
                telegram_check = response_json.get('details', {}).get('telegram_api_check', 'unknown')
            except:
                service_status = 'parse_error'
                db_check = 'unknown'
                telegram_check = 'unknown'
            
            result_text = f"""
üíì **–¢–µ—Å—Ç keepalive —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:**

üîó **URL:** {KEEPALIVE_URL}
üìä **HTTP Status:** {status_code}
‚úÖ **Response:** {"–û–ö" if status_code == 200 else "–û—à–∏–±–∫–∞"}

üîç **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:**
‚Ä¢ Service Status: {service_status}
‚Ä¢ Database Check: {db_check}
‚Ä¢ Telegram API: {telegram_check}

üéØ **–†–ï–ó–£–õ–¨–¢–ê–¢:** {f"‚úÖ Keepalive —Ä–∞–±–æ—Ç–∞–µ—Ç!" if status_code == 200 else "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å keepalive!"}
            """
            
        except Exception as e:
            result_text = f"""
üíì **–¢–µ—Å—Ç keepalive —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:**

üîó **URL:** {KEEPALIVE_URL}
‚ùå **–û—à–∏–±–∫–∞:** {str(e)}

üîß **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**
‚Ä¢ –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL
            """
        
        markup = menus.create_back_button("diagnostics_menu")
        bot.edit_message_text(
            result_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in keepalive test: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def execute_system_health_callback(call):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ callback"""
    try:
        health_report = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM user_links')
                users_count = cursor.fetchone()[0]
            health_report.append(f"‚úÖ Database: OK ({users_count} users)")
        except Exception as e:
            health_report.append(f"‚ùå Database: ERROR - {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
        try:
            bot_info = bot.get_me()
            health_report.append(f"‚úÖ Telegram API: OK (@{bot_info.username})")
        except Exception as e:
            health_report.append(f"‚ùå Telegram API: ERROR - {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        bot_active = db.is_bot_active()
        current_mode = db.get_current_rate_mode()
        
        health_report.append(f"ü§ñ Bot Status: {'Active' if bot_active else 'Inactive'}")
        health_report.append(f"‚ö° Rate Mode: {current_mode}")
        
        health_text = f"""
üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã v23.4:**

üìä **–ö–û–ú–ü–û–ù–ï–ù–¢–´:**
{chr(10).join(health_report)}

üéØ **–≠–ù–î–ü–û–ò–ù–¢–´:**
‚Ä¢ Webhook: {WEBHOOK_PATH}
‚Ä¢ Health: /health
‚Ä¢ Keepalive: /keepalive

‚ú® **–°—Ç–∞—Ç—É—Å:** –°–∏—Å—Ç–µ–º–∞ v23.4 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
        """
        
        markup = menus.create_back_button("diagnostics_menu")
        bot.edit_message_text(
            health_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in system health: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

def execute_bot_statistics_callback(call):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ callback"""
    try:
        stats = db.get_bot_stats()
        current_limits = get_current_limits()
        current_mode = db.get_current_rate_mode()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        global all_users
        all_users = db.get_user_stats()
        total_users = len(all_users) if all_users else 0
        total_links = sum(user[1] for user in all_users) if all_users else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–≤
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM presave_claims")
            total_claims = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM presave_claims WHERE status = 'verified'")
            verified_claims = cursor.fetchone()[0]
        
        usage_percent = round((stats['hourly_responses'] / max(stats['hourly_limit'], 1)) * 100, 1)
        
        stat_text = f"""
üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ v23.4:**

ü§ñ **–°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if stats['is_active'] else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}
‚Ä¢ –†–µ–∂–∏–º: {current_limits['mode_emoji']} {current_mode.upper()}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å: {stats['hourly_responses']}/{stats['hourly_limit']} ({usage_percent}%)
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['today_responses']}

üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}

üéµ **–ü–†–ï–°–ï–ô–í–´ (–ò–°–ü–†–ê–í–õ–ï–ù–´):**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {total_claims}
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {verified_claims}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {(verified_claims/max(total_claims,1)*100):.1f}%

‚ö° **–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü° –ù–∞–≥—Ä—É–∑–∫–∞' if usage_percent >= 80 else '‚úÖ –ù–æ—Ä–º–∞'}
‚Ä¢ –í–µ—Ä—Å–∏—è: v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
        """
        
        markup = menus.create_back_button("diagnostics_menu")
        bot.edit_message_text(
            stat_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in bot statistics: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def execute_current_mode_callback(call):
    """–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ callback"""
    try:
        current_limits = get_current_limits()
        current_mode_key = db.get_current_rate_mode()
        
        if current_mode_key not in RATE_LIMIT_MODES:
            text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º"
            markup = menus.create_back_button("diagnostics_menu")
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)
            return
        
        mode_config = RATE_LIMIT_MODES[current_mode_key]
        bot_stats = db.get_bot_stats()
        
        max_responses = mode_config.get('max_responses_per_hour', 1)
        usage_percent = round((bot_stats['hourly_responses'] / max(max_responses, 1)) * 100, 1)
        
        current_text = f"""
üéõÔ∏è **–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ v23.4:**

{mode_config['emoji']} **{mode_config['name']}**
üìù {mode_config['description']}

üìä **–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {max_responses} –æ—Ç–≤–µ—Ç–æ–≤/—á–∞—Å
‚Ä¢ Cooldown: {mode_config['min_cooldown_seconds']} —Å–µ–∫—É–Ω–¥
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {mode_config['risk']}

üìà **–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bot_stats['hourly_responses']}/{max_responses} ({usage_percent}%)
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {bot_stats['today_responses']} –æ—Ç–≤–µ—Ç–æ–≤

üîß –ò—Å—Ç–æ—á–Ω–∏–∫: Environment Variables
        """
        
        markup = menus.create_back_button("diagnostics_menu")
        bot.edit_message_text(
            current_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in current mode: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞")

def execute_bot_status_callback(call):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ callback"""
    try:
        bot_active = db.is_bot_active()
        current_limits = get_current_limits()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        stats = db.get_bot_stats()
        cooldown_text = "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≤–µ—Ç—É"
        if stats['cooldown_until']:
            try:
                cooldown_time = datetime.fromisoformat(stats['cooldown_until'])
                now = datetime.now()
                if now < cooldown_time:
                    remaining = int((cooldown_time - now).total_seconds())
                    cooldown_text = f"Cooldown: {remaining} —Å–µ–∫"
            except:
                cooldown_text = "–û—à–∏–±–∫–∞ cooldown"
        
        status_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ v23.4:**

{'üü¢ –ê–ö–¢–ò–í–ï–ù' if bot_active else 'üî¥ –û–¢–ö–õ–Æ–ß–ï–ù'}

‚ö° **–†–ï–ñ–ò–ú:** {current_limits['mode_emoji']} {current_limits['mode_name']}
‚è±Ô∏è **–°–û–°–¢–û–Ø–ù–ò–ï:** {cooldown_text}
üìä **–õ–ò–ú–ò–¢–´:** {stats['hourly_responses']}/{current_limits['max_responses_per_hour']} –≤ —á–∞—Å

üéµ **–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:**
‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã
‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ–π–≤—ã —Ä–∞–±–æ—Ç–∞—é—Ç
‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ

{'üéØ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!' if bot_active else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è'}
        """
        
        markup = menus.create_back_button("diagnostics_menu")
        bot.edit_message_text(
            status_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in bot status: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

def execute_pending_presaves_callback(call):
    """–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, username, claim_text, created_at
                FROM presave_claims 
                WHERE status = 'pending'
                ORDER BY created_at DESC
                LIMIT 10
            ''')
            
            pending = cursor.fetchall()
        
        if not pending:
            text = """
üìã **–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:**

‚úÖ –ù–µ—Ç –∑–∞—è–≤–ª–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

–í—Å–µ –ø—Ä–µ—Å–µ–π–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!
            """
        else:
            text = f"üìã **–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ({len(pending)}):**\n\n"
            
            for i, (claim_id, username, claim_text, created_at) in enumerate(pending, 1):
                date_str = created_at[:16] if created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                short_text = claim_text[:50] + "..." if len(claim_text) > 50 else claim_text
                
                text += f"{i}. **ID {claim_id}** - @{username}\n"
                text += f"   üìù {short_text}\n"
                text += f"   üìÖ {date_str}\n\n"
            
            text += "üí° –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ —Å–ª–æ–≤–æ–º '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'"
        
        markup = menus.create_back_button("verify_presave_menu")
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in pending presaves: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞")

def execute_verification_stats_callback(call):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ callback"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('''
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN status = 'verified' THEN 1 END) as verified,
                    COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected,
                    COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending
                FROM presave_claims
            ''')
            
            stats = cursor.fetchone()
            total, verified, rejected, pending = stats if stats else (0, 0, 0, 0)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∞–º
            cursor.execute('''
                SELECT admin_username, COUNT(*) as count
                FROM presave_verifications
                GROUP BY admin_username
                ORDER BY count DESC
                LIMIT 5
            ''')
            
            admin_stats = cursor.fetchall()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute('''
                SELECT COUNT(*) FROM presave_claims
                WHERE DATE(created_at) = DATE('now')
            ''')
            today_claims = cursor.fetchone()[0]
        
        success_rate = (verified / max(total, 1)) * 100
        
        text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π v23.4:**

üìà **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {total}
‚Ä¢ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {verified}
‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected}
‚Ä¢ ‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {pending}
‚Ä¢ üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {success_rate:.1f}%

üìÖ **–ó–ê –°–ï–ì–û–î–ù–Ø:**
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π: {today_claims}

üëÆ **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ê–î–ú–ò–ù–û–í:**
        """
        
        if admin_stats:
            for admin, count in admin_stats:
                text += f"‚Ä¢ @{admin}: {count} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π\n"
        else:
            text += "‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        
        text += f"\nüéØ **–≠–¢–ê–ü 1:** –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞"
        
        markup = menus.create_back_button("verify_presave_menu")
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in verification stats: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def execute_alllinks_callback(call):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ alllinks —á–µ—Ä–µ–∑ callback"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT link_url, username, timestamp 
                FROM link_history 
                LEFT JOIN user_links ON link_history.user_id = user_links.user_id
                ORDER BY timestamp DESC
                LIMIT 50
            ''')
            
            links = cursor.fetchall()
        
        if not links:
            text = "üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫"
        else:
            text = f"üìã **–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ v23.4** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):\n\n"
            
            for i, (link_url, username, timestamp) in enumerate(links[:20], 1):
                username_display = f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                date_display = timestamp[:16] if timestamp else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                display_url = link_url[:50] + "..." if len(link_url) > 50 else link_url
                
                text += f"{i}. {display_url}\n   üë§ {username_display} | üìÖ {date_display}\n\n"
            
            if len(links) > 20:
                text += f"... –∏ –µ—â—ë {len(links) - 20} —Å—Å—ã–ª–æ–∫\n"
            
            text += f"\nüìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑–µ: {len(links)}"
        
        user_role = get_user_role(call.from_user.id)
        back_menu = "admin_actions_menu" if user_role == 'admin' else "user_actions_menu"
        markup = menus.create_back_button(back_menu)
        
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in ALLLINKS callback: {str(e)}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫")

def execute_recent_callback(call):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ recent —á–µ—Ä–µ–∑ callback"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT link_url, username, timestamp 
                FROM link_history 
                LEFT JOIN user_links ON link_history.user_id = user_links.user_id
                ORDER BY timestamp DESC
                LIMIT 10
            ''')
            
            recent_links = cursor.fetchall()
        
        if not recent_links:
            text = "üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫"
        else:
            text = f"üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_links)} —Å—Å—ã–ª–æ–∫ v23.4:**\n\n"
            
            for i, (link_url, username, timestamp) in enumerate(recent_links, 1):
                username_display = f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                date_display = timestamp[:16] if timestamp else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                display_url = link_url[:60] + "..." if len(link_url) > 60 else link_url
                
                text += f"{i}. {display_url}\n   üë§ {username_display} | üìÖ {date_display}\n\n"
        
        user_role = get_user_role(call.from_user.id)
        back_menu = "admin_actions_menu" if user_role == 'admin' else "user_actions_menu"
        markup = menus.create_back_button(back_menu)
        
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in RECENT callback: {str(e)}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")

def execute_help_callback(call):
    """Help —á–µ—Ä–µ–∑ callback"""
    user_role = get_user_role(call.from_user.id)
    
    if user_role == 'admin':
        help_text = """
ü§ñ **Presave Reminder Bot v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø** (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä):

üÜï **–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:**
‚Ä¢ üéµ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º  
‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üì± –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
‚Ä¢ üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤
‚Ä¢ üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

üîß **–ò–°–ü–†–ê–í–õ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:**
‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤

üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

üìä **–î–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!

‚úÖ **–í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!**
        """
        back_menu = "admin_actions_menu"
    else:
        help_text = """
ü§ñ **Presave Reminder Bot v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø** (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å):

üÜï **–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:**
‚Ä¢ üéµ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤
‚Ä¢ üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ üèÜ –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
‚Ä¢ üîó –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

üéµ **–ö–∞–∫ –∑–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤:**
1. –ù–∞–∂–º–∏—Ç–µ "–ó–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º—É–∑—ã–∫—É (–≤–∫–ª—é—á–∞—è bandlink)
3. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é

üèÜ **–°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π:**
ü•â –ù–∞—á–∏–Ω–∞—é—â–∏–π (1-5 —Å—Å—ã–ª–æ–∫)
ü•à –ê–∫—Ç–∏–≤–Ω—ã–π (6-15 —Å—Å—ã–ª–æ–∫)  
ü•á –ü—Ä–æ–º–æ—É—Ç–µ—Ä (16-30 —Å—Å—ã–ª–æ–∫)
üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä (31+ —Å—Å—ã–ª–æ–∫)

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!

‚úÖ **v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:** –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!
        """
        back_menu = "user_actions_menu"
    
    markup = menus.create_back_button(back_menu)
    bot.edit_message_text(
        help_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='Markdown'
    )

# === –ö–û–ú–ê–ù–î–´ v23.4 ===

@bot.message_handler(commands=['start'])
def cmd_start(message):
    user_role = get_user_role(message.from_user.id)
    
    if user_role == 'admin':
        bot.reply_to(message, """
ü§ñ Presave Reminder Bot v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –∑–∞–ø—É—â–µ–Ω!

üéµ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´:
‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã
‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤
‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
‚úÖ –ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ

üìä –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ–Ω—é —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
üîó –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤
üîß –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã

üëë –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /help

üöÄ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!
        """)
    else:
        bot.reply_to(message, """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Presave Reminder Bot v23.4!

üéµ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚ú® –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤
üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
üèÜ –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
üîó –ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫ –æ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞ bandlink –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
‚ùì –ü–æ–º–æ—â—å: /help

üéµ –ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –º—É–∑—ã–∫–æ–π –∏ –∑–∞—è–≤–ª—è–π—Ç–µ –ø—Ä–µ—Å–µ–π–≤—ã!
        """)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    user_role = get_user_role(message.from_user.id)
    
    if user_role == 'admin':
        help_text = """
ü§ñ Presave Reminder Bot v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä):

üîß –ò–°–ü–†–ê–í–õ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:
‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤

üÜï –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
/menu ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
üéµ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/activate ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ
/deactivate ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ  
/stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
/botstat ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏–º–∏—Ç–æ–≤

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:
/linkstats ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/topusers ‚Äî —Ç–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö
/userstat @username ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/mystat ‚Äî –º–æ—è –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
/modes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤
/setmode <—Ä–µ–∂–∏–º> ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º
/setmessage —Ç–µ–∫—Å—Ç ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/clearhistory ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é

üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ v23.4:
/test_presave_system ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
/test_keepalive ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!
üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ!
        """
    else:
        help_text = """
ü§ñ Presave Reminder Bot v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å):

üîß –ò–°–ü–†–ê–í–õ–ï–ù–´ –û–®–ò–ë–ö–ò:
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ bandlink –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤

üÜï –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
/menu ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
üéµ –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—É—é —Ñ–æ—Ä–º—É
üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üèÜ –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
/linkstats ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/topusers ‚Äî —Ç–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö
/mystat ‚Äî –º–æ—è –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/alllinks ‚Äî –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
/recent ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏

üèÜ –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π:
ü•â –ù–∞—á–∏–Ω–∞—é—â–∏–π (1-5 —Å—Å—ã–ª–æ–∫)
ü•à –ê–∫—Ç–∏–≤–Ω—ã–π (6-15 —Å—Å—ã–ª–æ–∫)  
ü•á –ü—Ä–æ–º–æ—É—Ç–µ—Ä (16-30 —Å—Å—ã–ª–æ–∫)
üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä (31+ —Å—Å—ã–ª–æ–∫)

üéµ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ /menu –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!
–î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–∞–º–∏ –∏ –∑–∞—è–≤–ª—è–π—Ç–µ –ø—Ä–µ—Å–µ–π–≤—ã!

‚úÖ v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!
        """
    
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['menu'])
@check_permissions(['admin', 'user'])
def cmd_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ v23.4"""
    user_role = get_user_role(message.from_user.id)
    
    if user_role == 'admin':
        markup = menus.create_admin_menu()
        text = """
üëë **–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é v23.4 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:**

üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ ‚Äî —Ç–∞–±—ã –ø–æ —Å—Å—ã–ª–∫–∞–º, –ø—Ä–µ—Å–µ–π–≤–∞–º, –æ–±—â–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É  
‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è ‚Äî –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

üîß **–í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´:**
‚Ä¢ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
‚Ä¢ –ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ

üöÄ **–ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!**
        """
    else:
        markup = menus.create_user_menu()
        text = """
üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é v23.4 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:**

üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏, –∑–≤–∞–Ω–∏–µ, –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ ‚Äî —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è ‚Äî –∑–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Å—ã–ª–∫–∏

üîß **–ò–°–ü–†–ê–í–õ–ï–ù–û –í –≠–¢–û–ô –í–ï–†–°–ò–ò:**
‚Ä¢ –ü–æ—à–∞–≥–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ bandlink –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        """
    
    bot.reply_to(message, text, reply_markup=markup, parse_mode='Markdown')

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ===

@bot.message_handler(commands=['mystat'])
@check_permissions(['admin', 'user'])
def cmd_my_stat(message):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    try:
        user_data = db.get_user_stats(username)
        
        if not user_data:
            bot.reply_to(message, """
üë§ **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ v23.4:**

üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: 0
üèÜ –ó–≤–∞–Ω–∏–µ: ü•â –ù–∞—á–∏–Ω–∞—é—â–∏–π
üìà –î–æ –ø–µ—Ä–≤–æ–π —Å—Å—ã–ª–∫–∏: –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –º—É–∑—ã–∫–æ–π!

üí° –ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –º—É–∑—ã–∫—É –¥–ª—è —Ä–æ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!

üÜï **–ù–æ–≤–æ–µ:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu ‚Üí "–ó–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤" –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞!
            """, parse_mode='Markdown')
            return
        
        username_db, total_links, last_updated = user_data
        
        rank_emoji, rank_name = get_user_rank(total_links)
        progress_needed, next_rank = get_progress_to_next_rank(total_links)
        
        global all_users
        all_users = db.get_user_stats()
        user_position = get_user_position_in_ranking(username_db, all_users)
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM link_history 
                WHERE user_id = ? AND timestamp >= datetime('now', '-7 days')
            ''', (user_id,))
            week_result = cursor.fetchone()
            week_activity = week_result[0] if week_result else 0
        
        stat_text = f"""
üë§ **–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ v23.4 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:**

üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}
üèÜ –ó–≤–∞–Ω–∏–µ: {rank_emoji} {rank_name}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_updated[:16] if last_updated else '–ù–∏–∫–æ–≥–¥–∞'}
üìà –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {user_position} –∏–∑ {len(all_users)}
üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é: {week_activity} —Å—Å—ã–ª–æ–∫

üéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å:**
{f"–î–æ {next_rank}: {progress_needed} —Å—Å—ã–ª–æ–∫" if progress_needed > 0 else "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ! üéâ"}

üÜï **–ù–æ–≤–æ–µ:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤ –≤ /menu!

üí™ {'–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!' if total_links > 0 else '–ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –º—É–∑—ã–∫–æ–π!'}
        """
        
        bot.reply_to(message, stat_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in MYSTAT command: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['test_presave_system'])
@check_permissions(['admin'])
def cmd_test_presave_system_v23_4(message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Å–µ–π–≤–æ–≤ v23.4"""
    try:
        test_results = []
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM presave_claims")
            claims_count = cursor.fetchone()[0]
            test_results.append(f"‚úÖ presave_claims: {claims_count} –∑–∞–ø–∏—Å–µ–π")
            
            cursor.execute("SELECT COUNT(*) FROM presave_verifications")
            verifications_count = cursor.fetchone()[0]
            test_results.append(f"‚úÖ presave_verifications: {verifications_count} –∑–∞–ø–∏—Å–µ–π")
            
            cursor.execute("SELECT COUNT(*) FROM user_sessions")
            sessions_count = cursor.fetchone()[0]
            test_results.append(f"‚úÖ user_sessions: {sessions_count} –∑–∞–ø–∏—Å–µ–π")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        try:
            response, markup = interactive_presave_system.start_presave_claim(123456789, 0)
            if response and markup:
                test_results.append("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OK")
            else:
                test_results.append("‚ùå –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        except Exception as e:
            test_results.append(f"‚ùå –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {str(e)}")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        try:
            test_response = admin_analytics.get_user_links_history("test_user")
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in test_response:
                test_results.append("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ OK")
            else:
                test_results.append("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        except Exception as e:
            test_results.append(f"‚ùå –ê–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            if admin_notifications:
                test_results.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                test_results.append("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            test_results.append(f"‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–Ω—é
        try:
            user_menu = menus.create_user_menu()
            admin_menu = menus.create_admin_menu()
            stats_menu = menus.create_my_stats_menu(message.from_user.id)
            
            if user_menu and admin_menu and stats_menu:
                test_results.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é: –≤—Å–µ –º–µ–Ω—é —Å–æ–∑–¥–∞—é—Ç—Å—è")
            else:
                test_results.append("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        except Exception as e:
            test_results.append(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é: {str(e)}")
        
        # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handlers_count = len([h for h in bot.callback_query_handlers if h['function'].__name__ == 'handle_all_callbacks'])
            if handlers_count == 1:
                test_results.append("‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã (–µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)")
            else:
                test_results.append(f"‚ùå Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {handlers_count} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        except Exception as e:
            test_results.append(f"‚ùå Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {str(e)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        all_passed = all("‚úÖ" in result for result in test_results)
        
        result_text = f"""
üß™ **–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Å–µ–π–≤–æ–≤ v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:**

üìä **–ë–ê–ó–ê –î–ê–ù–ù–´–•:**
{chr(10).join([r for r in test_results if '–∑–∞–ø–∏—Å–µ–π' in r])}

üéµ **–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê:**
{chr(10).join([r for r in test_results if '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è' in r])}

üìà **–ê–î–ú–ò–ù–°–ö–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:**
{chr(10).join([r for r in test_results if '–ê–¥–º–∏–Ω—Å–∫–∞—è' in r])}

üîî **–°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:**
{chr(10).join([r for r in test_results if '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' in r])}

üì± **–°–ò–°–¢–ï–ú–ê –ú–ï–ù–Æ:**
{chr(10).join([r for r in test_results if '–º–µ–Ω—é' in r])}

üîß **CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:**
{chr(10).join([r for r in test_results if 'Callback' in r])}

üéØ **–°–¢–ê–¢–£–°:** {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_passed else '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}

üÜï **–ò–°–ü–†–ê–í–õ–ï–ù–û –í v23.4:**
‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
‚úÖ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚úÖ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (KEEPALIVE_URL, all_users)
‚úÖ –ü—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ bandlink –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤

{f'üöÄ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ù–£!' if all_passed else 'üõ†Ô∏è –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}
        """
        
        bot.reply_to(message, result_text, parse_mode='Markdown')
        
        logger.info(f"üß™ PRESAVE_SYSTEM_TEST_V23_4: {'PASSED' if all_passed else 'FAILED'}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in v23.4 presave system test: {str(e)}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@bot.message_handler(commands=['activate'])
@check_permissions(['admin'])
def cmd_activate(message):
    if message.chat.id != GROUP_ID or message.message_thread_id != THREAD_ID:
        bot.reply_to(message, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–æ–ø–∏–∫–µ –ø—Ä–µ—Å–µ–π–≤–æ–≤")
        return
    
    db.set_bot_active(True)
    
    current_limits = get_current_limits()
    current_mode = db.get_current_rate_mode()
    
    welcome_text = f"""
ü§ñ **Presave Reminder Bot v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**

‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —Ç–æ–ø–∏–∫–µ "–ü—Ä–µ—Å–µ–π–≤—ã"
üéØ –ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
{current_limits['mode_emoji']} –†–µ–∂–∏–º: {current_mode.upper()}

üîß **–í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´:**
‚Ä¢ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ bandlink –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤

üÜï **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v23.4:**
‚Ä¢ üéµ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤
‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
‚Ä¢ üì± –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ–Ω—é (/menu)
‚Ä¢ üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤
‚Ä¢ üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /help –∏–ª–∏ /menu
üõë –û—Ç–∫–ª—é—á–∏—Ç—å: /deactivate

üöÄ **–ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï –í –ü–†–û–î–ê–ö–®–ù–ï!**
    """
    
    bot.reply_to(message, welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['deactivate'])
@check_permissions(['admin'])
def cmd_deactivate(message):
    db.set_bot_active(False)
    bot.reply_to(message, "üõë –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate")

# === WEBHOOK –°–ï–†–í–ï–† v23.4 ===

class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        client_ip = self.client_address[0]
        logger.info(f"üì® WEBHOOK_POST: Request from {client_ip} to {self.path}")
        
        if not rate_limiter.is_allowed(client_ip):
            logger.warning(f"üö´ RATE_LIMITED: Blocked {client_ip}")
            self.send_response(429)
            self.end_headers()
            return
        
        if self.path == WEBHOOK_PATH:
            try:
                content_length = int(self.headers.get('Content-Length', 0))
                
                if not security.verify_telegram_request(self.headers, content_length):
                    logger.warning(f"üö® SECURITY: Invalid request from {client_ip}")
                    self.send_response(403)
                    self.end_headers()
                    return
                
                post_data = self.rfile.read(content_length)
                logger.info(f"üì¶ WEBHOOK_DATA: Received {content_length} bytes")
                
                update_data = json.loads(post_data.decode('utf-8'))
                update = telebot.types.Update.de_json(update_data)
                
                if update:
                    bot.process_new_updates([update])
                    logger.info(f"‚úÖ WEBHOOK_PROCESSED: Update processed successfully")
                
                self.send_response(200)
                self.end_headers()
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå JSON_ERROR: {e}")
                self.send_response(400)
                self.end_headers()
            except Exception as e:
                logger.error(f"‚ùå WEBHOOK_ERROR: {str(e)}")
                self.send_response(500)
                self.end_headers()
        
        elif self.path == '/' or self.path == '/health':
            self._handle_health_check()
        
        elif self.path == '/keepalive':
            self._handle_keepalive_request(client_ip)
        
        else:
            logger.warning(f"üîç UNKNOWN_POST_PATH: {self.path} from {client_ip}")
            self.send_response(404)
            self.end_headers()
    
    def do_GET(self):
        client_ip = self.client_address[0] 
        logger.info(f"üì® WEBHOOK_GET: Request from {client_ip} to {self.path}")
        
        if self.path == '/' or self.path == '/health':
            self._handle_health_check()
        
        elif self.path == '/keepalive':
            self._handle_keepalive_request(client_ip)
        
        elif self.path == WEBHOOK_PATH:
            self._handle_webhook_info_page()
        
        else:
            logger.warning(f"üîç UNKNOWN_GET_PATH: {self.path} from {client_ip}")
            self.send_response(404)
            self.end_headers()
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def _handle_health_check(self):
        """Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        response = json.dumps({
            "status": "healthy", 
            "service": "telegram-bot",
            "version": "v23.4-fixed-interactive-presave-system",
            "fixes": ["callback_handlers_unified", "user_states_fixed", "variables_defined", "method_fixes", "bandlink_support"]
        })
        self.wfile.write(response.encode())
    
    def _handle_keepalive_request(self, client_ip):
        """Keepalive monitoring —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        logger.info(f"üíì KEEPALIVE: Keep-alive request from {client_ip}")
        
        try:
            bot_active = db.is_bot_active()
            current_limits = get_current_limits()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            try:
                with db.get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute('SELECT 1')
                    db_check = cursor.fetchone() is not None
            except Exception as e:
                logger.error(f"‚ùå DB_CHECK_ERROR: {e}")
                db_check = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Bot API
            try:
                bot_info = bot.get_me()
                telegram_check = bool(bot_info)
                bot_username = bot_info.username if bot_info else "unknown"
            except Exception as e:
                logger.error(f"‚ùå TELEGRAM_API_ERROR: {e}")
                telegram_check = False
                bot_username = "api_error"
            
            response_data = {
                "status": "alive",
                "timestamp": time.time(),
                "version": "v23.4-fixed-interactive-presave-system",
                "uptime_check": "‚úÖ OK",
                "details": {
                    "bot_active": bot_active,
                    "current_mode": current_limits['mode_name'],
                    "database_check": db_check,
                    "telegram_api_check": telegram_check,
                    "bot_username": bot_username,
                    "features_status": {
                        "interactive_presave_claims": True,
                        "enhanced_menus": True,
                        "admin_analytics": True,
                        "user_notifications": True,
                        "diagnostics": True,
                        "callback_handlers_fixed": True,
                        "user_states_fixed": True,
                        "variables_defined": True,
                        "bandlink_support": True,
                        "stage1_complete": True
                    }
                },
                "endpoints": {
                    "webhook": WEBHOOK_PATH,
                    "health": "/health",
                    "keepalive": "/keepalive"
                }
            }
            
            if db_check and telegram_check:
                status_code = 200
                response_data["service_status"] = "operational"
                logger.info(f"üíì KEEPALIVE_HEALTHY: All systems operational")
            else:
                status_code = 503
                response_data["service_status"] = "degraded"
                response_data["issues"] = []
                if not db_check:
                    response_data["issues"].append("database_connection")
                if not telegram_check:
                    response_data["issues"].append("telegram_api")
                logger.warning(f"üíì KEEPALIVE_DEGRADED: Issues detected")
            
            self.send_response(status_code)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response_json = json.dumps(response_data, indent=2)
            self.wfile.write(response_json.encode())
            
        except Exception as e:
            logger.error(f"‚ùå KEEPALIVE_CRITICAL_ERROR: {e}")
            
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            error_response = json.dumps({
                "status": "error",
                "timestamp": time.time(),
                "version": "v23.4-fixed-interactive-presave-system",
                "error": str(e),
                "uptime_check": "‚ùå CRITICAL_ERROR"
            })
            self.wfile.write(error_response.encode())
    
    def _handle_webhook_info_page(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ webhook"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        info_page = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Presave Reminder Bot v23.4 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }}
                .header {{ text-align: center; color: #2196F3; }}
                .status {{ background: #E8F5E8; padding: 15px; border-radius: 8px; margin: 20px 0; }}
                .feature {{ background: #F0F8FF; padding: 10px; border-radius: 5px; margin: 10px 0; }}
                .fixed {{ background: #E8F5E8; padding: 10px; border-radius: 5px; margin: 10px 0; border-left: 4px solid #4CAF50; }}
                .endpoints {{ background: #F5F5F5; padding: 10px; border-radius: 5px; margin: 10px 0; }}
                .critical {{ background: #FFE6E6; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #FF4444; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ü§ñ Presave Reminder Bot v23.4</h1>
                <h2>üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø</h2>
            </div>
            
            <div class="critical">
                <h3>‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´</h3>
                <p><strong>–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ</strong></p>
            </div>
            
            <div class="fixed">
                <h4>üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò</h4>
                <ul>
                    <li>‚úÖ <strong>Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã</strong> - —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
                    <li>‚úÖ <strong>–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã</strong> - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞</li>
                    <li>‚úÖ <strong>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã</strong> - KEEPALIVE_URL, all_users</li>
                    <li>‚úÖ <strong>–ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã</strong> - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ process_links_step</li>
                    <li>‚úÖ <strong>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ bandlink</strong> - –≤—Å–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã taplink —Ä–∞–±–æ—Ç–∞—é—Ç</li>
                </ul>
            </div>
            
            <div class="status">
                <h4>üöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ù–£</h4>
                <p>v23.4 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≠–¢–ê–ü–ê 1:</p>
                <ul>
                    <li>üéµ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤</li>
                    <li>üìä –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ–Ω—é —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π</li>
                    <li>üîó –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏</li>
                    <li>üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</li>
                    <li>üîî –ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º</li>
                    <li>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤</li>
                    <li>üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</li>
                </ul>
            </div>
            
            <div class="endpoints">
                <h4>üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã</h4>
                <ul>
                    <li><strong>POST {WEBHOOK_PATH}</strong> - Telegram webhook</li>
                    <li><strong>GET/POST /keepalive</strong> - Uptime monitoring</li>
                    <li><strong>GET/POST /health</strong> - Health check</li>
                    <li><strong>GET {WEBHOOK_PATH}</strong> - –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</li>
                </ul>
            </div>
        </body>
        </html>
        """
        self.wfile.write(info_page.encode('utf-8'))
    
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
        pass

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ v23.4 ===

@bot.message_handler(commands=['linkstats'])
@check_permissions(['admin', 'user'])
def cmd_linkstats(message):
    """–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–∞–º"""
    try:
        users = db.get_user_stats()
        
        if not users:
            bot.reply_to(message, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Å—ã–ª–∫–∞–º–∏")
            return
        
        response = "üìä **–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–∞–º:**\n\n"
        
        for i, (username, total_links, last_updated) in enumerate(users[:10], 1):
            rank_emoji, rank_name = get_user_rank(total_links)
            
            response += f"{rank_emoji} **{i}.** @{username} ‚Äî {total_links} —Å—Å—ã–ª–æ–∫\n"
            response += f"   üèÜ {rank_name} | üìÖ {last_updated[:16]}\n\n"
        
        response += f"üìà **–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(users)}\n"
        response += f"üîó **–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫:** {sum(user[1] for user in users)}\n"
        response += f"‚ú® **v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:** –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ—Å–µ–π–≤–æ–≤ –≥–æ—Ç–æ–≤–∞!"
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in LINKSTATS: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞")

@bot.message_handler(commands=['topusers'])
@check_permissions(['admin', 'user'])
def cmd_topusers(message):
    """–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        users = db.get_user_stats()
        
        if not users:
            bot.reply_to(message, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        response = "üèÜ **–¢–û–ü-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
        
        for i, (username, total_links, last_updated) in enumerate(users[:5], 1):
            rank_emoji, rank_name = get_user_rank(total_links)
            
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
            
            response += f"{medal} **{i} –º–µ—Å—Ç–æ:** @{username}\n"
            response += f"   {rank_emoji} {rank_name} | üîó {total_links} —Å—Å—ã–ª–æ–∫\n"
            response += f"   üìÖ {last_updated[:16]}\n\n"
        
        response += f"üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu ‚Üí \"–ó–∞—è–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–≤\" –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫!"
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in TOPUSERS: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞")

@bot.message_handler(commands=['userstat'])
@check_permissions(['admin', 'user'])
def cmd_userstat(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /userstat @username")
            return
        
        username = args[1].replace('@', '')
        user_data = db.get_user_stats(username)
        
        if not user_data:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        username_db, total_links, last_updated = user_data
        rank_emoji, rank_name = get_user_rank(total_links)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        all_users = db.get_user_stats()
        position = get_user_position_in_ranking(username_db, all_users)
        
        response = f"""
üë§ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username_db}:**

üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}
üèÜ –ó–≤–∞–Ω–∏–µ: {rank_emoji} {rank_name}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_updated[:16]}
üìä –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {position} –∏–∑ {len(all_users)}

üí° **v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤ —á–µ—Ä–µ–∑ /menu!
        """
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in USERSTAT: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(commands=['alllinks'])
@check_permissions(['admin', 'user'])
def cmd_alllinks(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –±–∞–∑—ã"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT link_url, username, timestamp 
                FROM link_history 
                LEFT JOIN user_links ON link_history.user_id = user_links.user_id
                ORDER BY timestamp DESC
                LIMIT 50
            ''')
            
            links = cursor.fetchall()
        
        if not links:
            bot.reply_to(message, "üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        response = f"üìã **–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ v23.4** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):\n\n"
        
        for i, (link_url, username, timestamp) in enumerate(links[:20], 1):
            username_display = f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            date_display = timestamp[:16] if timestamp else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            display_url = link_url[:50] + "..." if len(link_url) > 50 else link_url
            
            response += f"{i}. {display_url}\n   üë§ {username_display} | üìÖ {date_display}\n\n"
        
        if len(links) > 20:
            response += f"... –∏ –µ—â—ë {len(links) - 20} —Å—Å—ã–ª–æ–∫\n"
        
        response += f"\nüìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑–µ: {len(links)}"
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in ALLLINKS: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫")

@bot.message_handler(commands=['recent'])
@check_permissions(['admin', 'user'])
def cmd_recent(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT link_url, username, timestamp 
                FROM link_history 
                LEFT JOIN user_links ON link_history.user_id = user_links.user_id
                ORDER BY timestamp DESC
                LIMIT 10
            ''')
            
            recent_links = cursor.fetchall()
        
        if not recent_links:
            bot.reply_to(message, "üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        
        response = f"üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_links)} —Å—Å—ã–ª–æ–∫ v23.4:**\n\n"
        
        for i, (link_url, username, timestamp) in enumerate(recent_links, 1):
            username_display = f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            date_display = timestamp[:16] if timestamp else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            display_url = link_url[:60] + "..." if len(link_url) > 60 else link_url
            
            response += f"{i}. {display_url}\n   üë§ {username_display} | üìÖ {date_display}\n\n"
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in RECENT: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")

@bot.message_handler(commands=['stats'])
@check_permissions(['admin'])
def cmd_stats(message):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        stats = db.get_bot_stats()
        all_users = db.get_user_stats()
        
        total_users = len(all_users)
        total_links = sum(user[1] for user in all_users) if all_users else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–≤
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM presave_claims")
            total_claims = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM presave_claims WHERE status = 'verified'")
            verified_claims = cursor.fetchone()[0]
        
        current_limits = get_current_limits()
        current_mode = db.get_current_rate_mode()
        
        response = f"""
üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ v23.4:**

ü§ñ **–°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if stats['is_active'] else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}
‚Ä¢ –†–µ–∂–∏–º: {current_limits['mode_emoji']} {current_mode.upper()}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å: {stats['hourly_responses']}/{stats['hourly_limit']}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['today_responses']}

üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(total_links/max(total_users,1)):.1f} —Å—Å—ã–ª–æ–∫/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

üéµ **–ü–†–ï–°–ï–ô–í–´ (–ò–°–ü–†–ê–í–õ–ï–ù–û):**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {total_claims}
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {verified_claims}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {(verified_claims/max(total_claims,1)*100):.1f}%

‚úÖ **v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:** –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã!
        """
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in STATS: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(commands=['botstat'])
@check_permissions(['admin'])
def cmd_botstat(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        stats = db.get_bot_stats()
        current_limits = get_current_limits()
        current_mode = db.get_current_rate_mode()
        
        usage_percent = round((stats['hourly_responses'] / max(stats['hourly_limit'], 1)) * 100, 1)
        
        cooldown_text = "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≤–µ—Ç—É"
        if stats['cooldown_until']:
            try:
                cooldown_time = datetime.fromisoformat(stats['cooldown_until'])
                now = datetime.now()
                if now < cooldown_time:
                    remaining = int((cooldown_time - now).total_seconds())
                    cooldown_text = f"Cooldown: {remaining} —Å–µ–∫"
            except:
                cooldown_text = "–û—à–∏–±–∫–∞ cooldown"
        
        response = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–º–∏—Ç–æ–≤ v23.4:**

üéõÔ∏è **–¢–ï–ö–£–©–ò–ô –†–ï–ñ–ò–ú:**
{current_limits['mode_emoji']} {current_mode.upper()}

üìà **–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:**
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Å: {stats['hourly_responses']}/{stats['hourly_limit']} ({usage_percent}%)
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['today_responses']}
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {cooldown_text}

‚ö° **–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü° –ù–∞–≥—Ä—É–∑–∫–∞' if usage_percent >= 80 else 'üü¢ –ù–æ—Ä–º–∞' if usage_percent >= 50 else 'üîµ –ù–∏–∑–∫–∞—è'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: {stats['last_response'][:16] if stats['last_response'] else '–ù–∏–∫–æ–≥–¥–∞'}

üîß **–£–ü–†–ê–í–õ–ï–ù–ò–ï:**
‚Ä¢ /modes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–∂–∏–º—ã
‚Ä¢ /setmode <—Ä–µ–∂–∏–º> - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º
‚Ä¢ /menu - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

‚ú® **v23.4 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:** –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!
        """
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in BOTSTAT: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤")

@bot.message_handler(commands=['modes'])
@check_permissions(['admin'])
def cmd_modes(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã"""
    try:
        current_mode = db.get_current_rate_mode()
        
        response = "üéõÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ v23.4:**\n\n"
        
        for mode_key, mode_config in RATE_LIMIT_MODES.items():
            emoji = mode_config['emoji']
            name = mode_config['name']
            description = mode_config['description']
            max_hour = mode_config['max_responses_per_hour']
            cooldown = mode_config['min_cooldown_seconds']
            risk = mode_config['risk']
            
            current_marker = "‚úÖ " if mode_key == current_mode else ""
            
            response += f"{current_marker}{emoji} **{name}**\n"
            response += f"üìù {description}\n"
            response += f"‚ö° {max_hour} –æ—Ç–≤–µ—Ç–æ–≤/—á–∞—Å, {cooldown}—Å cooldown\n"
            response += f"üéØ –†–∏—Å–∫: {risk}\n\n"
        
        response += f"üîß **–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º:** /setmode <—Ä–µ–∂–∏–º>\n"
        response += f"üì± **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ:** /menu ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –†–µ–∂–∏–º—ã"
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in MODES: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤")

@bot.message_handler(commands=['setmode'])
@check_permissions(['admin'])
def cmd_setmode(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤"""
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setmode <—Ä–µ–∂–∏–º>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: conservative, normal, burst, admin_burst")
            return
        
        new_mode = args[1].lower()
        success, result_text = set_rate_limit_mode(new_mode, message.from_user.id)
        
        if success:
            bot.reply_to(message, f"‚úÖ {result_text}", parse_mode='Markdown')
        else:
            bot.reply_to(message, f"‚ùå {result_text}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in SETMODE: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞")

@bot.message_handler(commands=['setmessage'])
@check_permissions(['admin'])
def cmd_setmessage(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setmessage <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
            return
        
        new_text = args[1]
        db.set_reminder_text(new_text)
        
        response = f"""
‚úÖ **–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!**

**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**
{new_text}

–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞.
        """
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in SETMESSAGE: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞")

@bot.message_handler(commands=['clearhistory'])
@check_permissions(['admin'])
def cmd_clearhistory(message):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Å—ã–ª–æ–∫"""
    try:
        db.clear_link_history()
        bot.reply_to(message, "üßπ **–ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫ –æ—á–∏—â–µ–Ω–∞**\n\n–û–±—â–∏–µ —Å—á—ë—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in CLEARHISTORY: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

@bot.message_handler(commands=['test_keepalive'])
@check_permissions(['admin'])
def cmd_test_keepalive(message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ keepalive"""
    try:
        try:
            request = urllib.request.Request(KEEPALIVE_URL)
            request.add_header('User-Agent', 'TelegramBot/v23.4-test')
            
            with urllib.request.urlopen(request, timeout=10) as response:
                status_code = response.getcode()
                response_data = response.read().decode('utf-8')
            
            try:
                response_json = json.loads(response_data)
                service_status = response_json.get('service_status', 'unknown')
                db_check = response_json.get('details', {}).get('database_check', 'unknown')
                telegram_check = response_json.get('details', {}).get('telegram_api_check', 'unknown')
            except:
                service_status = 'parse_error'
                db_check = 'unknown'
                telegram_check = 'unknown'
            
            result_text = f"""
üíì **–¢–µ—Å—Ç keepalive —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ v23.4:**

üîó **URL:** {KEEPALIVE_URL}
üìä **HTTP Status:** {status_code}
‚úÖ **Response:** {"–û–ö" if status_code == 200 else "–û—à–∏–±–∫–∞"}

üîç **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:**
‚Ä¢ Service Status: {service_status}
‚Ä¢ Database Check: {db_check}
‚Ä¢ Telegram API: {telegram_check}

üéØ **–†–ï–ó–£–õ–¨–¢–ê–¢:** {f"‚úÖ Keepalive —Ä–∞–±–æ—Ç–∞–µ—Ç!" if status_code == 200 else "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å keepalive!"}
            """
            
        except Exception as e:
            result_text = f"""
üíì **–¢–µ—Å—Ç keepalive —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ v23.4:**

üîó **URL:** {KEEPALIVE_URL}
‚ùå **–û—à–∏–±–∫–∞:** {str(e)}

üîß **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**
‚Ä¢ –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL
            """
        
        bot.reply_to(message, result_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in keepalive test: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è keepalive")

# === –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò v23.4 ===

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook v23.4"""
    try:
        logger.info("üîó WEBHOOK_SETUP: Configuring webhook for v23.4 FIXED...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        bot.remove_webhook()
        logger.info("üßπ WEBHOOK_CLEANUP: Previous webhook removed")
        
        webhook_kwargs = {"url": WEBHOOK_URL}
        if WEBHOOK_SECRET:
            webhook_kwargs["secret_token"] = WEBHOOK_SECRET
            logger.info("üîê WEBHOOK_SECURITY: Using secret token")
        
        webhook_result = bot.set_webhook(**webhook_kwargs)
        
        if webhook_result:
            logger.info(f"‚úÖ WEBHOOK_SET: Webhook configured successfully")
            logger.info(f"üîó WEBHOOK_TARGET: {WEBHOOK_URL}")
            logger.info(f"üíì KEEPALIVE_MONITORING: {KEEPALIVE_URL}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = bot.get_me()
        logger.info(f"ü§ñ BOT_INFO: Connected as @{bot_info.username} (ID: {bot_info.id})")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå WEBHOOK_ERROR: Failed to setup webhook: {str(e)}")
        return False

def start_webhook_server():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ v23.4"""
    try:
        logger.info(f"üöÄ WEBHOOK_SERVER: Starting server on port {WEBHOOK_PORT}")
        
        with socketserver.TCPServer(("", WEBHOOK_PORT), WebhookHandler) as httpd:
            logger.info(f"‚úÖ WEBHOOK_SERVER: Server started successfully")
            logger.info(f"üîó WEBHOOK_URL: {WEBHOOK_URL}")
            logger.info(f"üíì KEEPALIVE_URL: {KEEPALIVE_URL}")
            logger.info(f"üè• HEALTH_URL: https://{WEBHOOK_HOST}/health")
            
            logger.info("üéâ PRESAVE_REMINDER_BOT_V23_4_FIXED: All systems ready!")
            httpd.serve_forever()
            
    except Exception as e:
        logger.error(f"‚ùå SERVER_ERROR: Failed to start webhook server: {str(e)}")
        raise

class WebhookHealthChecker:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã v23.5"""
    
    def __init__(self, db, bot):
        self.db = db
        self.bot = bot
        self.last_check = 0
        self.check_interval = int(os.getenv('HEALTH_CHECK_INTERVAL', '300'))  # 5 –º–∏–Ω—É—Ç
        self.critical_error_count = 0
        self.max_critical_errors = 5
    
    def check_system_health(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        current_time = time.time()
        if current_time - self.last_check < self.check_interval:
            return True
        
        self.last_check = current_time
        health_status = {
            'database': self._check_database(),
            'telegram_api': self._check_telegram_api(),
            'memory_usage': self._check_memory_usage(),
            'session_count': self._check_session_count()
        }
        
        critical_issues = [k for k, v in health_status.items() if not v]
        
        if critical_issues:
            self.critical_error_count += 1
            logger.error(f"üö® HEALTH_CHECK_FAILED: {critical_issues} ({self.critical_error_count}/{self.max_critical_errors})")
            
            if self.critical_error_count >= self.max_critical_errors:
                self._notify_critical_failure(critical_issues)
                
        else:
            self.critical_error_count = 0
            logger.info("üíö HEALTH_CHECK_PASSED: All systems operational")
        
        return len(critical_issues) == 0
    
    def _check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT 1')
                return cursor.fetchone() is not None
        except Exception as e:
            logger.error(f"‚ùå DB_HEALTH_CHECK: {e}")
            return False
    
    def _check_telegram_api(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API"""
        try:
            self.bot.get_me()
            return True
        except Exception as e:
            logger.error(f"‚ùå TELEGRAM_API_HEALTH_CHECK: {e}")
            return False
    
    def _check_memory_usage(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            process = psutil.Process()
            memory_mb = process.memory_info().rss / 1024 / 1024
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ >400MB –Ω–∞ Render Free Tier
            if memory_mb > 400:
                logger.warning(f"‚ö†Ô∏è HIGH_MEMORY_USAGE: {memory_mb:.1f}MB")
                return False
            
            return True
        except ImportError:
            # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return True
        except Exception as e:
            logger.error(f"‚ùå MEMORY_CHECK: {e}")
            return False
    
    def _check_session_count(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            if hasattr(interactive_presave_system, 'user_sessions'):
                session_count = len(interactive_presave_system.user_sessions)
                max_sessions = getattr(interactive_presave_system, 'max_sessions', 100)
                
                if session_count > max_sessions * 0.8:  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞
                    logger.warning(f"‚ö†Ô∏è HIGH_SESSION_COUNT: {session_count}/{max_sessions}")
                    return False
                
            return True
        except Exception as e:
            logger.error(f"‚ùå SESSION_CHECK: {e}")
            return False
    
    def _notify_critical_failure(self, issues):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
        message = f"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´ v23.5

–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(issues)}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {self.critical_error_count}
–í—Ä–µ–º—è: {datetime.now().isoformat()}

–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!
        """
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                self.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")

def init_global_variables():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö v23.5"""
    global all_users, health_checker
    all_users = db.get_user_stats()
    health_checker = WebhookHealthChecker(db, bot)
    logger.info(f"‚úÖ GLOBALS: Initialized all_users with {len(all_users)} users")
    logger.info(f"‚úÖ HEALTH_CHECKER: Monitoring system initialized")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ v23.5
rate_limiter = WebhookRateLimiter()
security = SecurityValidator()
input_validator = InputValidator()

# === –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò v23.5 ===

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook v23.5 —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info("üîó WEBHOOK_SETUP: Configuring webhook for v23.5...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        bot.remove_webhook()
        logger.info("üßπ WEBHOOK_CLEANUP: Previous webhook removed")
        
        webhook_kwargs = {"url": WEBHOOK_URL}
        if WEBHOOK_SECRET:
            webhook_kwargs["secret_token"] = WEBHOOK_SECRET
            logger.info("üîê WEBHOOK_SECURITY: Using secret token")
        
        webhook_result = bot.set_webhook(**webhook_kwargs)
        
        if webhook_result:
            logger.info(f"‚úÖ WEBHOOK_SET: Webhook configured successfully")
            logger.info(f"üîó WEBHOOK_TARGET: {WEBHOOK_URL}")
            logger.info(f"üíì KEEPALIVE_MONITORING: {KEEPALIVE_URL}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = bot.get_me()
        logger.info(f"ü§ñ BOT_INFO: Connected as @{bot_info.username} (ID: {bot_info.id})")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå WEBHOOK_ERROR: Failed to setup webhook: {str(e)}")
        return False

def start_webhook_server():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ v23.5 —Å health checking"""
    try:
        logger.info(f"üöÄ WEBHOOK_SERVER: Starting server on port {WEBHOOK_PORT}")
        
        with socketserver.TCPServer(("", WEBHOOK_PORT), WebhookHandler) as httpd:
            logger.info(f"‚úÖ WEBHOOK_SERVER: Server started successfully")
            logger.info(f"üîó WEBHOOK_URL: {WEBHOOK_URL}")
            logger.info(f"üíì KEEPALIVE_URL: {KEEPALIVE_URL}")
            logger.info(f"üè• HEALTH_URL: https://{WEBHOOK_HOST}/health")
            
            logger.info("üéâ PRESAVE_REMINDER_BOT_V23_5: All systems ready!")
            httpd.serve_forever()
            
    except Exception as e:
        logger.error(f"‚ùå SERVER_ERROR: Failed to start webhook server: {str(e)}")
        raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è v23.5 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        logger.info("üöÄ STARTING: Presave Reminder Bot v23.5 - PRODUCTION READY")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.init_db()
        logger.info("‚úÖ DATABASE: Initialized successfully")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        init_global_variables()
        logger.info("‚úÖ GLOBALS: Variables initialized")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        if setup_webhook():
            logger.info("‚úÖ WEBHOOK: Configuration successful")
        else:
            logger.error("‚ùå WEBHOOK: Configuration failed")
            return
        
        # –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
        start_webhook_server()
        
    except KeyboardInterrupt:
        logger.info("üõë SHUTDOWN: Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå CRITICAL_ERROR: {str(e)}")
        raise

if __name__ == "__main__":
    main()
