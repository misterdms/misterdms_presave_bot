"""
Tests/test_user_management.py - –¢–µ—Å—Ç—ã –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
Do Presave Reminder Bot v29.07

–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ú–û–î–£–õ–Ø 1: user_management
"""

import asyncio
import pytest
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª—è
from modules.user_management import (
    UserManagementModule,
    UserManagementConfig,
    UserService,
    MusicUser,
    KarmaHistory,
    UserDataValidator,
    KarmaValidator,
    OnboardingValidator,
    sanitize_username,
    sanitize_name,
    sanitize_genre
)


class TestUserDataValidator:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def test_validate_user_creation_data_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = {
            'user_id': 12345,
            'group_id': -1001234567890,
            'username': 'test_user',
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'music_genre': '–†–æ–∫'
        }
        
        is_valid, errors = UserDataValidator.validate_user_creation_data(data)
        assert is_valid == True
        assert len(errors) == 0
    
    def test_validate_user_creation_data_missing_required(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        data = {
            'username': 'test_user'
        }
        
        is_valid, errors = UserDataValidator.validate_user_creation_data(data)
        assert is_valid == False
        assert 'user_id' in str(errors)
        assert 'group_id' in str(errors)
    
    def test_validate_user_creation_data_invalid_username(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ username"""
        data = {
            'user_id': 12345,
            'group_id': -1001234567890,
            'username': 'invalid-user@name!'
        }
        
        is_valid, errors = UserDataValidator.validate_user_creation_data(data)
        assert is_valid == False
        assert any('Username' in error for error in errors)
    
    def test_validate_karma_change_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
        is_valid, error = UserDataValidator.validate_karma_change(
            karma_change=5,
            current_karma=10,
            min_karma=0,
            max_karma=100500
        )
        assert is_valid == True
        assert error is None
    
    def test_validate_karma_change_exceeds_max(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã, –ø—Ä–µ–≤—ã—à–∞—é—â–µ–≥–æ –º–∞–∫—Å–∏–º—É–º"""
        is_valid, error = UserDataValidator.validate_karma_change(
            karma_change=100,
            current_karma=100450,
            min_karma=0,
            max_karma=100500
        )
        assert is_valid == False
        assert "–ø—Ä–µ–≤—ã—à–∞—Ç—å" in error
    
    def test_validate_karma_ratio_format_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è"""
        is_valid, ratio, error = UserDataValidator.validate_karma_ratio_format("15:3")
        assert is_valid == True
        assert ratio == (15, 3)
        assert error is None
    
    def test_validate_karma_ratio_format_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è"""
        is_valid, ratio, error = UserDataValidator.validate_karma_ratio_format("invalid")
        assert is_valid == False
        assert ratio is None
        assert "—Ñ–æ—Ä–º–∞—Ç" in error


class TestKarmaValidator:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–∞—Ä–º–æ–π"""
    
    def test_validate_karma_operation_valid_gratitude(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"""
        is_valid, error = KarmaValidator.validate_karma_operation(
            user_id=12345,
            karma_change=1,
            change_type='gratitude',
            current_karma=10,
            reason='–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫—É'
        )
        assert is_valid == True
        assert error is None
    
    def test_validate_karma_operation_invalid_change_type(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        is_valid, error = KarmaValidator.validate_karma_operation(
            user_id=12345,
            karma_change=5,
            change_type='invalid_type',
            current_karma=10,
            reason='–¢–µ—Å—Ç'
        )
        assert is_valid == False
        assert "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø" in error
    
    def test_validate_karma_operation_invalid_reason_length(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã"""
        is_valid, error = KarmaValidator.validate_karma_operation(
            user_id=12345,
            karma_change=1,
            change_type='gratitude',
            current_karma=10,
            reason='OK'  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
        )
        assert is_valid == False
        assert "–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞" in error


class TestOnboardingValidator:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    
    def test_validate_onboarding_data_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        data = {
            'user_id': 12345,
            'group_id': -1001234567890,
            'music_genre': '–†–æ–∫',
            'first_name': '–¢–µ—Å—Ç'
        }
        
        is_valid, errors = OnboardingValidator.validate_onboarding_data(data)
        assert is_valid == True
        assert len(errors) == 0
    
    def test_validate_onboarding_data_invalid_genre(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞"""
        data = {
            'user_id': 12345,
            'group_id': -1001234567890,
            'music_genre': '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ñ–∞–Ω—Ä',
            'first_name': '–¢–µ—Å—Ç'
        }
        
        is_valid, errors = OnboardingValidator.validate_onboarding_data(data)
        assert is_valid == False
        assert any('–∂–∞–Ω—Ä' in error.lower() for error in errors)
    
    def test_validate_onboarding_step_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —à–∞–≥–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        is_valid, error = OnboardingValidator.validate_onboarding_step(2, 3)
        assert is_valid == True
        assert error is None
    
    def test_validate_onboarding_step_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —à–∞–≥–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        is_valid, error = OnboardingValidator.validate_onboarding_step(5, 3)
        assert is_valid == False
        assert "–æ—Ç 1 –¥–æ 3" in error


class TestSanitizers:
    """–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_sanitize_username(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ username"""
        assert sanitize_username('@test_user') == 'test_user'
        assert sanitize_username('user@with!special#chars') == 'userwithspecialchars'
        assert sanitize_username('') == ''
    
    def test_sanitize_name(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏"""
        assert sanitize_name('  –¢–µ—Å—Ç  ') == '–¢–µ—Å—Ç'
        assert sanitize_name('') == ''
        long_name = '–ê' * 150  # –î–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º—É–º–∞
        assert len(sanitize_name(long_name)) <= 100
    
    def test_sanitize_genre(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∂–∞–Ω—Ä–∞"""
        assert sanitize_genre('—Ä–æ–∫') == '–†–æ–∫'
        assert sanitize_genre('hip-hop') == '–•–∏–ø-—Ö–æ–ø'
        assert sanitize_genre('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∂–∞–Ω—Ä') == '–î—Ä—É–≥–æ–µ'
        assert sanitize_genre('') == ''


class TestUserManagementConfig:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è"""
    
    def test_config_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = UserManagementConfig()
        assert config.enabled == True
        assert config.karma.min_karma == 0
        assert config.karma.max_karma == 100500
        assert config.karma.admin_karma == 100500
    
    def test_config_validation_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = UserManagementConfig()
        is_valid, errors = config.validate_config()
        assert is_valid == True
        assert len(errors) == 0
    
    def test_get_rank_by_karma(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ä–º–µ"""
        config = UserManagementConfig()
        
        assert 'ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π' in config.get_rank_by_karma(3)
        assert 'ü•à –ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' in config.get_rank_by_karma(10)
        assert 'ü•á –ú–µ–≥–∞-–ø–æ–º–æ—â–Ω–∏—á—å–µ' in config.get_rank_by_karma(20)
        assert 'üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ' in config.get_rank_by_karma(50)
    
    def test_get_rank_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–∞–Ω–∏–∏"""
        config = UserManagementConfig()
        
        rank_info = config.get_rank_info(10)
        assert rank_info['level'] == 'hope'
        assert rank_info['next_rank'] is not None
        assert rank_info['karma_to_next'] > 0
        assert 0 <= rank_info['progress_percent'] <= 100
    
    def test_is_admin(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        config = UserManagementConfig({'ADMIN_IDS': '12345,67890'})
        assert config.is_admin(12345) == True
        assert config.is_admin(99999) == False


class TestMusicUserModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def test_music_user_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = MusicUser(
            user_id=12345,
            group_id=-1001234567890,
            username='test_user',
            first_name='–¢–µ—Å—Ç',
            karma_points=10
        )
        
        assert user.user_id == 12345
        assert user.username == 'test_user'
        assert user.karma_points == 10
        assert user.is_active == True
    
    def test_music_user_to_dict(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        user = MusicUser(
            user_id=12345,
            group_id=-1001234567890,
            username='test_user',
            karma_points=10
        )
        
        user_dict = user.to_dict()
        assert isinstance(user_dict, dict)
        assert user_dict['user_id'] == 12345
        assert user_dict['username'] == 'test_user'
        assert user_dict['karma_points'] == 10
    
    def test_music_user_karma_percentage(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–∞—Ä–º—ã"""
        user = MusicUser(user_id=12345, group_id=-1001, karma_points=50)
        percentage = user.get_karma_percentage()
        expected = (50 / 100500) * 100
        assert abs(percentage - expected) < 0.01
    
    def test_music_user_can_change_karma(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
        user = MusicUser(user_id=12345, group_id=-1001, karma_points=10)
        
        can_add, msg = user.can_change_karma(5)
        assert can_add == True
        assert msg is None
        
        can_subtract, msg = user.can_change_karma(-15)
        assert can_subtract == False
        assert "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π" in msg
    
    def test_music_user_is_newbie(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–∏—á–∫–∞"""
        newbie = MusicUser(user_id=12345, group_id=-1001, karma_points=3)
        experienced = MusicUser(user_id=67890, group_id=-1001, karma_points=10)
        
        assert newbie.is_newbie() == True
        assert experienced.is_newbie() == False


class TestKarmaHistoryModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä–º—ã"""
    
    def test_karma_history_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä–º—ã"""
        entry = KarmaHistory(
            user_id=12345,
            group_id=-1001234567890,
            karma_change=5,
            karma_before=10,
            karma_after=15,
            reason='–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫—É',
            change_type='gratitude'
        )
        
        assert entry.user_id == 12345
        assert entry.karma_change == 5
        assert entry.karma_before == 10
        assert entry.karma_after == 15
        assert entry.reason == '–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫—É'
    
    def test_karma_history_to_dict(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä–º—ã –≤ —Å–ª–æ–≤–∞—Ä—å"""
        entry = KarmaHistory(
            user_id=12345,
            group_id=-1001,
            karma_change=5,
            karma_before=10,
            karma_after=15,
            reason='–¢–µ—Å—Ç'
        )
        
        entry_dict = entry.to_dict()
        assert isinstance(entry_dict, dict)
        assert entry_dict['user_id'] == 12345
        assert entry_dict['karma_change'] == 5


@pytest.mark.asyncio
class TestUserService:
    """–¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)"""
    
    async def test_user_service_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        mock_database = Mock()
        mock_config = UserManagementConfig()
        
        service = UserService(mock_database, mock_config)
        assert service.database == mock_database
        assert service.config == mock_config


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

class TestUserManagementIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–æ–¥—É–ª—è"""
    
    def test_module_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–¥—É–ª—è"""
        from modules.user_management import (
            UserManagementModule,
            MusicUser,
            KarmaHistory,
            UserService,
            UserManagementConfig,
            UserDataValidator
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert UserManagementModule is not None
        assert MusicUser is not None
        assert KarmaHistory is not None
        assert UserService is not None
        assert UserManagementConfig is not None
        assert UserDataValidator is not None
    
    def test_module_info_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ"""
        from modules.user_management import get_module_info, get_module_stats
        
        info = get_module_info()
        stats = get_module_stats()
        
        assert info['name'] == 'user_management'
        assert info['plan'] == 1
        assert info['priority'] == 1
        assert info['webapp_integration'] == True
        
        assert stats['plan'] == 1
        assert stats['priority'] == 1
        assert stats['has_webapp'] == True
        assert stats['commands_count'] > 0
        assert stats['events_count'] > 0


def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è user_management...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_classes = [
        TestUserDataValidator,
        TestKarmaValidator,
        TestOnboardingValidator,
        TestSanitizers,
        TestUserManagementConfig,
        TestMusicUserModel,
        TestKarmaHistoryModel,
        TestUserManagementIntegration
    ]
    
    total_tests = 0
    passed_tests = 0
    
    for test_class in test_classes:
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {test_class.__name__}...")
        
        instance = test_class()
        test_methods = [method for method in dir(instance) if method.startswith('test_')]
        
        for test_method_name in test_methods:
            total_tests += 1
            try:
                test_method = getattr(instance, test_method_name)
                test_method()
                print(f"  ‚úÖ {test_method_name}")
                passed_tests += 1
            except Exception as e:
                print(f"  ‚ùå {test_method_name}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"  –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total_tests - passed_tests}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests / total_tests * 100):.1f}%")
    
    if passed_tests == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
        return False


if __name__ == "__main__":
    success = run_tests()
    exit(0 if success else 1)
