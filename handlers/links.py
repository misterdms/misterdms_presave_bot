"""
üîó Links Handler - Do Presave Reminder Bot v25+
–ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å—Å—ã–ª–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ –≤–∑–∞–∏–º–Ω—ã—Ö –ø—Ä–µ—Å–µ–π–≤–∞—Ö
"""

import asyncio
import time
from typing import List, Optional, Dict, Any
import telebot
from telebot.types import Message
from urllib.parse import urlparse

from config import config
from database.manager import get_database_manager
from utils.security import (
    security_manager, whitelisted_thread_required,
    extract_user_id_from_message, extract_thread_id_from_message,
    user_rate_limit
)
from utils.logger import get_logger, telegram_logger
from utils.helpers import MessageFormatter, CommandParser, ConfigHelper

logger = get_logger(__name__)

class LinkHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    
    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot
        self.db = get_database_manager()
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.recent_reminders = {}  # thread_id: timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        
        # Cooldown –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–¥–Ω–æ–º —Ç–æ–ø–∏–∫–µ (—Å–µ–∫—É–Ω–¥—ã)
        self.reminder_cooldown = config.RESPONSE_DELAY * 10  # 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        logger.info("üîó Link Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def process_message_with_links(self, message: Message, user):
        """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
        try:
            user_id = extract_user_id_from_message(message)
            thread_id = extract_thread_id_from_message(message)
            text = message.text or ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
            if not ConfigHelper.is_bot_enabled():
                logger.debug(f"üîó –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist —Ç–æ–ø–∏–∫–æ–≤
            if thread_id and not security_manager.is_whitelisted_thread(thread_id):
                logger.debug(f"üîó –¢–æ–ø–∏–∫ {thread_id} –Ω–µ –≤ whitelist, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            links = CommandParser.extract_links_from_text(text)
            if not links:
                return
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
            valid_links = self._validate_and_filter_links(links)
            if not valid_links:
                logger.debug(f"üîó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {user_id}")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            saved_links = self._save_links_to_database(
                user=user,
                message=message,
                links=valid_links,
                thread_id=thread_id
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if self._should_send_reminder(thread_id, user_id):
                self._send_presave_reminder(message, user, saved_links, thread_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            telegram_logger.user_action(
                user_id,
                f"–æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª {len(valid_links)} —Å—Å—ã–ª–æ–∫",
                thread_id=thread_id,
                links_count=len(valid_links),
                domains=[self._extract_domain(link) for link in valid_links]
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")
    
    def _validate_and_filter_links(self, links: List[str]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫"""
        valid_links = []
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–µ—Å–µ–π–≤–æ–≤
        supported_domains = [
            'spotify.com', 'music.apple.com', 'music.youtube.com',
            'soundcloud.com', 'bandcamp.com', 'deezer.com', 'tidal.com',
            'music.amazon.com', 'linktr.ee', 'fanlink.to', 'smarturl.it',
            'ffm.to', 'orcd.co', 'lnk.to', 'distrokid.com', 'toneden.io'
        ]
        
        for link in links:
            try:
                # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
                if not link.startswith(('http://', 'https://')):
                    continue
                
                parsed = urlparse(link)
                domain = parsed.netloc.lower()
                
                # –£–±–∏—Ä–∞–µ–º www.
                if domain.startswith('www.'):
                    domain = domain[4:]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã
                is_supported = any(supported_domain in domain for supported_domain in supported_domains)
                
                if is_supported:
                    valid_links.append(link)
                    logger.debug(f"üîó –í–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞: {domain}")
                else:
                    logger.debug(f"üîó –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–æ–º–µ–Ω: {domain}")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ {link}: {e}")
                continue
        
        return valid_links
    
    def _save_links_to_database(self, user, message: Message, links: List[str], 
                              thread_id: Optional[int]) -> List:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        saved_links = []
        
        try:
            for link in links:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏
                link_record = self.db.create_link(
                    user_id=user.id,
                    message_id=message.message_id,
                    url=link,
                    thread_id=thread_id,
                    message_text=message.text
                )
                saved_links.append(link_record)
                
                logger.debug(f"üíæ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {link_record.domain}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if thread_id:
                self.db.update_message_stats(
                    user_id=user.id,
                    thread_id=thread_id,
                    links_shared=len(links)
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö (–¥–ª—è –ü–ª–∞–Ω 2)
            if config.ENABLE_PLAN_2_FEATURES:
                karma_record = self.db.get_user_karma(user.id)
                if karma_record:
                    karma_record.presave_requests_count += len(links)
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ORM
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ –ë–î: {e}")
        
        return saved_links
    
    def _should_send_reminder(self, thread_id: Optional[int], user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –õ–°
        if not thread_id:
            return False
        
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞–º (–æ–Ω–∏ –∏ —Ç–∞–∫ –∑–Ω–∞—é—Ç)
        if security_manager.is_admin(user_id):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è —Ç–æ–ø–∏–∫–∞
        current_time = time.time()
        last_reminder = self.recent_reminders.get(thread_id, 0)
        
        if current_time - last_reminder < self.reminder_cooldown:
            logger.debug(f"üîó Cooldown –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ç–æ–ø–∏–∫–∞ {thread_id}")
            return False
        
        return True
    
    def _send_presave_reminder(self, message: Message, user, saved_links: List, 
                             thread_id: Optional[int]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            reminder_text = self.db.get_setting('reminder_text') or config.REMINDER_TEXT
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            user_display = f"@{user.username}" if user.username else user.first_name or "–ú—É–∑—ã–∫–∞–Ω—Ç"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            full_reminder = f"{reminder_text}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö
            if len(saved_links) == 1:
                domain = self._extract_domain_name(saved_links[0].url)
                full_reminder += f"üìé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {domain}"
            else:
                full_reminder += f"üìé –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(saved_links)}"
                domains = [self._extract_domain_name(link.url) for link in saved_links]
                unique_domains = list(set(domains))
                if len(unique_domains) <= 3:
                    full_reminder += f" ({', '.join(unique_domains)})"
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (—á—Ç–æ–±—ã –Ω–µ –≤—ã–≥–ª—è–¥–µ–ª–æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ)
            time.sleep(config.RESPONSE_DELAY)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            self.bot.reply_to(message, full_reminder)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if thread_id:
                self.recent_reminders[thread_id] = time.time()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            telegram_logger.user_action(
                user.telegram_id,
                "–ø–æ–ª—É—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö",
                thread_id=thread_id,
                reminder_type="auto",
                links_detected=len(saved_links)
            )
            
            logger.info(f"üîó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} –≤ —Ç–æ–ø–∏–∫–µ {thread_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    def _extract_domain(self, url: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ URL"""
        try:
            parsed = urlparse(url)
            domain = parsed.netloc.lower()
            if domain.startswith('www.'):
                domain = domain[4:]
            return domain
        except:
            return "unknown"
    
    def _extract_domain_name(self, url: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ URL"""
        try:
            domain = self._extract_domain(url)
            
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            domain_names = {
                'spotify.com': 'Spotify',
                'music.apple.com': 'Apple Music',
                'music.youtube.com': 'YouTube Music',
                'soundcloud.com': 'SoundCloud',
                'bandcamp.com': 'Bandcamp',
                'deezer.com': 'Deezer',
                'tidal.com': 'Tidal',
                'music.amazon.com': 'Amazon Music',
                'linktr.ee': 'Linktree',
                'fanlink.to': 'FanLink',
                'smarturl.it': 'SmartURL',
                'ffm.to': 'Feature.fm',
                'orcd.co': 'Onerpm',
                'lnk.to': 'Linkfire',
                'distrokid.com': 'DistroKid',
                'toneden.io': 'ToneDen'
            }
            
            return domain_names.get(domain, domain.capitalize())
            
        except:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å"
    
    # ============================================
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–û–ú–ê–ù–î
    # ============================================
    
    def get_recent_links_formatted(self, limit: int = 10, thread_id: Optional[int] = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –ë–î
            links = self.db.get_recent_links(limit=limit, thread_id=thread_id)
            
            if not links:
                return f"{MessageFormatter.get_emoji('info')} –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            result = f"{MessageFormatter.get_emoji('link')} **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(len(links), limit)} —Å—Å—ã–ª–æ–∫:**\n\n"
            
            for i, link in enumerate(links, 1):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_display = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                if hasattr(link, 'user') and link.user:
                    if link.user.username:
                        user_display = f"@{link.user.username}"
                    else:
                        user_display = link.user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω
                domain_name = self._extract_domain_name(link.url)
                
                # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                time_ago = MessageFormatter.format_time_ago(link.created_at)
                
                # –¢–æ–ø–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                topic_info = f" –≤ —Ç–æ–ø–∏–∫–µ {link.thread_id}" if link.thread_id else ""
                
                result += f"{i}. **{domain_name}** –æ—Ç {user_display}{topic_info} ({time_ago})\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
                if link.message_text and len(link.message_text) > 10:
                    preview = MessageFormatter.truncate_text(link.message_text, 100)
                    result += f"   _{preview}_\n"
                
                result += "\n"
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫: {e}")
            return f"{MessageFormatter.get_emoji('error')} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫."
    
    def get_user_links_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = self.db.get_user_by_telegram_id(user_id)
            if not user:
                return {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_links = self.db.get_user_links(user.id, limit=100)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã
            domain_stats = {}
            total_links = len(user_links)
            
            for link in user_links:
                domain = self._extract_domain_name(link.url)
                domain_stats[domain] = domain_stats.get(domain, 0) + 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            sorted_domains = sorted(domain_stats.items(), key=lambda x: x[1], reverse=True)
            
            return {
                'total_links': total_links,
                'domains': sorted_domains,
                'recent_links': user_links[:10],
                'user': user
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")
            return {'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}
    
    def analyze_link_trends(self, days: int = 7) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Å—Å—ã–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            from datetime import datetime, timedelta, timezone
            
            # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            end_date = datetime.now(timezone.utc)
            start_date = end_date - timedelta(days=days)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π)
            recent_links = self.db.get_recent_links(limit=1000)  # –ë–µ—Ä–µ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            period_links = [
                link for link in recent_links 
                if link.created_at >= start_date
            ]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            domain_stats = {}
            daily_stats = {}
            
            for link in period_links:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–µ–Ω–æ–≤
                domain = self._extract_domain_name(link.url)
                domain_stats[domain] = domain_stats.get(domain, 0) + 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
                day_key = link.created_at.strftime('%Y-%m-%d')
                daily_stats[day_key] = daily_stats.get(day_key, 0) + 1
            
            # –¢–æ–ø –¥–æ–º–µ–Ω–æ–≤
            top_domains = sorted(domain_stats.items(), key=lambda x: x[1], reverse=True)[:10]
            
            return {
                'period_days': days,
                'total_links': len(period_links),
                'daily_average': len(period_links) / max(days, 1),
                'top_domains': top_domains,
                'daily_breakdown': daily_stats,
                'most_active_day': max(daily_stats.items(), key=lambda x: x[1]) if daily_stats else None
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {'error': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö'}
    
    # ============================================
    # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–õ–ê–ù–ê–ú–ò 2-3
    # ============================================
    
    def check_user_activity_for_karma(self, user_id: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã (–ü–ª–∞–Ω 2)"""
        if not config.ENABLE_PLAN_2_FEATURES:
            return {}
        
        try:
            user = self.db.get_user_by_telegram_id(user_id)
            if not user:
                return {}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_links = self.db.get_user_links(user.id, limit=50)
            karma_record = self.db.get_user_karma(user.id)
            
            links_count = len(user_links)
            karma_points = karma_record.karma_points if karma_record else 0
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            ratio = karma_points / max(links_count, 1)
            
            # –û—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if links_count == 0:
                activity_level = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            elif ratio >= 0.8:
                activity_level = "–û—Ç–ª–∏—á–Ω–∞—è –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å"
            elif ratio >= 0.5:
                activity_level = "–•–æ—Ä–æ—à–∞—è –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å" 
            elif ratio >= 0.25:
                activity_level = "–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å"
            else:
                activity_level = "–ù–∏–∑–∫–∞—è –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å"
            
            return {
                'links_count': links_count,
                'karma_points': karma_points,
                'ratio': ratio,
                'activity_level': activity_level,
                'needs_karma_boost': ratio < 0.3 and links_count > 5
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ä–º—ã: {e}")
            return {}
    
    def suggest_presave_targets(self, user_id: int, limit: int = 5) -> List[Dict[str, Any]]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –¥–ª—è –ø—Ä–µ—Å–µ–π–≤–æ–≤ (–ü–ª–∞–Ω 3 - –ò–ò)"""
        if not config.ENABLE_PLAN_3_FEATURES:
            return []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            recent_links = self.db.get_recent_links(limit=20)
            
            suggestions = []
            user_links = set()  # –°—Å—ã–ª–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            user = self.db.get_user_by_telegram_id(user_id)
            if user:
                user_recent_links = self.db.get_user_links(user.id, limit=10)
                user_links = {link.url for link in user_recent_links}
            
            for link in recent_links:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                if link.url in user_links:
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if hasattr(link, 'user') and link.user and link.user.telegram_id == user_id:
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                suggestion = {
                    'url': link.url,
                    'domain': self._extract_domain_name(link.url),
                    'author': link.user.username if link.user and link.user.username else "–ê–Ω–æ–Ω–∏–º",
                    'time_ago': MessageFormatter.format_time_ago(link.created_at),
                    'preview': MessageFormatter.truncate_text(link.message_text or "", 50)
                }
                
                suggestions.append(suggestion)
                
                if len(suggestions) >= limit:
                    break
            
            return suggestions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–µ—Å–µ–π–≤–æ–≤: {e}")
            return []
    
    # ============================================
    # –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
    # ============================================
    
    def cleanup_old_reminders(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –∫—ç—à–∞"""
        try:
            current_time = time.time()
            expired_threads = [
                thread_id for thread_id, timestamp in self.recent_reminders.items()
                if current_time - timestamp > self.reminder_cooldown * 2
            ]
            
            for thread_id in expired_threads:
                del self.recent_reminders[thread_id]
            
            if expired_threads:
                logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_threads)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    def get_handler_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            return {
                'recent_reminders_count': len(self.recent_reminders),
                'reminder_cooldown': self.reminder_cooldown,
                'bot_enabled': ConfigHelper.is_bot_enabled(),
                'whitelist_threads': len(config.WHITELIST_THREADS),
                'supported_domains': 15  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================

def init_link_handlers(bot: telebot.TeleBot) -> LinkHandler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫"""
    return LinkHandler(bot)

# ============================================
# –≠–ö–°–ü–û–†–¢
# ============================================

__all__ = ['LinkHandler', 'init_link_handlers']

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Link Handler...")
    print("‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞!")
    print("üîó –ú–æ–¥—É–ª—å links.py –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–µ—Å–µ–π–≤-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
