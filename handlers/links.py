"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ Do Presave Reminder Bot v25+
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö

–ü–õ–ê–ù 1: –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ (–ê–ö–¢–ò–í–ù–ê–Ø)
–ü–õ–ê–ù 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞—Ä–º–æ–π (–ó–ê–ì–õ–£–®–ö–ò)
–ü–õ–ê–ù 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–æ—Ä–º–∞–º–∏ (–ó–ê–ì–õ–£–®–ö–ò)
–ü–õ–ê–ù 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è backup (–ó–ê–ì–õ–£–®–ö–ò)
"""

import re
import time
from datetime import datetime
from typing import List, Optional
import telebot
from telebot.types import Message

from database.manager import DatabaseManager
from utils.security import SecurityManager
from utils.logger import get_logger, log_user_action
from config import Config

logger = get_logger(__name__)

class LinkHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def __init__(self, bot: telebot.TeleBot, db_manager: DatabaseManager, 
                 security_manager: SecurityManager, config: Config):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫"""
        self.bot = bot
        self.db = db_manager
        self.security = security_manager
        self.config = config
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WHITELIST
        if not hasattr(self.security, 'whitelist_threads'):
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: SecurityManager.whitelist_threads –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            self.security.whitelist_threads = self.config.WHITELIST if hasattr(self.config, 'WHITELIST') else []
            logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω WHITELIST: {self.security.whitelist_threads}")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ (—É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–≥–µ–∫—Å)
        self.url_pattern = re.compile(
            r'https?://(?:[-\w.])+(?:[:\d]+)?(?:/(?:[\w/_.])*(?:\?(?:[\w&=%.])*)?(?:\#(?:[\w.])*)?)?',
            re.IGNORECASE
        )
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–µ—Å–µ–π–≤ —Å—Å—ã–ª–æ–∫
        self.presave_patterns = [
            re.compile(r'presave', re.IGNORECASE),
            re.compile(r'pre-save', re.IGNORECASE),
            re.compile(r'linktr\.ee', re.IGNORECASE),
            re.compile(r'smarturl', re.IGNORECASE),
            re.compile(r'distrokid', re.IGNORECASE),
            re.compile(r'ampl\.ink', re.IGNORECASE),
        ]
        
        logger.info("LinkHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def handle_link_message(self, message: Message):
        """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
        try:
            user_id = message.from_user.id
            text = message.text or ""
            thread_id = getattr(message, 'message_thread_id', None)
            message_id = message.message_id
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì
            logger.info(f"üîó –í–´–ó–í–ê–ù handle_link_message: user_id={user_id}, thread_id={thread_id}, text='{text[:100]}...'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç
            if not self.db.get_setting('bot_enabled', True):
                logger.info("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
            whitelist_threads = getattr(self.security, 'whitelist_threads', [])
            if not whitelist_threads:
                # –ï—Å–ª–∏ whitelist –ø—É—Å—Ç–æ–π, –±–µ—Ä–µ–º –∏–∑ config
                whitelist_threads = getattr(self.config, 'WHITELIST', [])
                logger.warning(f"‚ö†Ô∏è WHITELIST –≤–∑—è—Ç –∏–∑ config: {whitelist_threads}")

            if thread_id and thread_id not in whitelist_threads:
                logger.info(f"–°—Å—ã–ª–∫–∞ –≤ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ {thread_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (WHITELIST: {whitelist_threads})")
                return

            logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ {thread_id} (WHITELIST: {whitelist_threads})")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            urls = self._extract_urls(text)
            
            if not urls:
                logger.info(f"üîç –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö URL")
                return
            
            log_user_action(logger, user_id, f"–æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª {len(urls)} —Å—Å—ã–ª–æ–∫ –≤ —Ç–æ–ø–∏–∫–µ {thread_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –ë–î
            self._save_links_to_database(user_id, urls, text, message_id, thread_id)
            
            # –ü–õ–ê–ù 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å—å–± (–ó–ê–ì–õ–£–®–ö–ê)
            # self._update_request_count(user_id, len(urls))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏
            self._send_reminder_message(message, len(urls))
            
            # –ü–õ–ê–ù 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –∞–¥–º–∏–Ω–∞–º (–ó–ê–ì–õ–£–®–ö–ê)
            # if self._is_presave_link(urls):
            #     self._notify_admins_new_request(user_id, urls, text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ handle_link_message: {e}")
    
    def _extract_urls(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            urls = self.url_pattern.findall(text)
            
            # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
            cleaned_urls = []
            for url in urls:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
                url = url.rstrip('.,!?;)')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
                if self._is_valid_url(url):
                    cleaned_urls.append(url)
            
            logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(cleaned_urls)} –≤–∞–ª–∏–¥–Ω—ã—Ö URL –∏–∑ {len(urls)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö")
            return cleaned_urls
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _extract_urls: {e}")
            return []
    
    def _is_valid_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if len(url) < 10 or len(url) > 2000:
                return False
            
            if not (url.startswith('http://') or url.startswith('https://')):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–æ–º–µ–Ω
            if '//' not in url or '.' not in url:
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _is_valid_url: {e}")
            return False
    
    def _save_links_to_database(self, user_id: int, urls: List[str], 
                               message_text: str, message_id: int, thread_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            for url in urls:
                self.db.add_link(
                    user_id=user_id,
                    url=url,
                    message_text=message_text,
                    message_id=message_id,
                    thread_id=thread_id
                )
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(urls)} —Å—Å—ã–ª–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _save_links_to_database: {e}")
    
    def _send_reminder_message(self, original_message: Message, links_count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã API –∏ delay
            if not self._check_rate_limits(original_message.from_user.id):
                logger.info("Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            delay = self.config.RESPONSE_DELAY
            if delay > 0:
                logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {delay} —Å–µ–∫")
                time.sleep(delay)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_text = self.config.REMINDER_TEXT
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Å—ã–ª–æ–∫
            if links_count > 1:
                reminder_text += f"\n\nüìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {links_count}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            self.bot.reply_to(original_message, reminder_text)
            
            log_user_action(logger, original_message.from_user.id, 
                           f"–ø–æ–ª—É—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ {links_count} —Å—Å—ã–ª–∫–∞—Ö")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            current_count = self.db.get_setting('reminder_count', 0)
            self.db.set_setting('reminder_count', current_count + 1, 'int', 
                               '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _send_reminder_message: {e}")
    
    def _check_rate_limits(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤
            current_mode = self.db.get_setting('current_limit_mode', 'BURST')
            limit_config = self.config.get_limit_config(current_mode)
            
            # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            if self.security.is_admin(user_id):
                return True  # –ê–¥–º–∏–Ω—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
            
            # –ü–õ–ê–ù 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _check_rate_limits: {e}")
            return True
    
    def _is_presave_link(self, urls: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–º"""
        try:
            for url in urls:
                url_lower = url.lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                for pattern in self.presave_patterns:
                    if pattern.search(url_lower):
                        return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _is_presave_link: {e}")
            return False
    
    # ============================================
    # –ü–õ–ê–ù 2: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ö–ê–†–ú–û–ô (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    # def _update_request_count(self, user_id: int, links_count: int):
    #     """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö"""
    #     try:
    #         # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å—å–± –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–∞—Ä–º—ã
    #         karma = self.db.get_or_create_karma(user_id)
    #         karma.total_requests += links_count
    #         
    #         self.db.session.commit()
    #         
    #         logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å—å–± –¥–ª—è {user_id}: +{links_count}")
    #         
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _update_request_count: {e}")
    
    # def _check_ratio_warning(self, user_id: int):
    #     """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–æ—Å—å–± –∫ –∫–∞—Ä–º–µ"""
    #     try:
    #         karma = self.db.get_or_create_karma(user_id)
    #         
    #         # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø—Ä–æ—Å—å–±, –Ω–æ –º–∞–ª–æ –∫–∞—Ä–º—ã - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    #         if karma.total_requests > 10 and karma.karma_points < 5:
    #             ratio = karma.total_requests / max(karma.karma_points, 1)
    #             
    #             if ratio > 3:  # –ë–æ–ª–µ–µ 3 –ø—Ä–æ—Å—å–± –Ω–∞ 1 –∫–∞—Ä–º—É
    #                 self._send_ratio_warning(user_id, karma.total_requests, karma.karma_points)
    #                 
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _check_ratio_warning: {e}")
    
    # def _send_ratio_warning(self, user_id: int, requests: int, karma: int):
    #     """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–ª–æ—Ö–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏"""
    #     try:
    #         user = self.db.get_user_by_id(user_id)
    #         if not user:
    #             return
    #         
    #         warning_text = f"""
    # ‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>
    # 
    # üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
    # ‚Ä¢ –ü—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö: {requests}
    # ‚Ä¢ –ö–∞—Ä–º–∞ –∑–∞ –ø–æ–º–æ—â—å: {karma}
    # 
    # üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>
    # –ü–æ–º–æ–≥–∞–π—Ç–µ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤—ã, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ!
    # 
    # üí° –ö–∞—Ä–º–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    # """
    #         
    #         self.bot.send_message(user_id, warning_text, parse_mode='HTML')
    #         
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _send_ratio_warning: {e}")
    
    # ============================================
    # –ü–õ–ê–ù 3: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –§–û–†–ú–ê–ú–ò (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    # def _notify_admins_new_request(self, user_id: int, urls: List[str], text: str):
    #     """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤"""
    #     try:
    #         if not self.db.get_setting('forms_enabled', False):
    #             return
    #         
    #         user = self.db.get_user_by_id(user_id)
    #         if not user:
    #             return
    #         
    #         # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    #         from services.forms import FormManager
    #         form_manager = FormManager(self.db, self.config)
    #         
    #         request_id = form_manager.create_presave_request(
    #             user_id=user_id,
    #             description=text,
    #             links=urls
    #         )
    #         
    #         # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    #         notification_text = f"""
    # üéµ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤</b>
    # 
    # üë§ <b>–û—Ç:</b> {format_user_mention(user_id, user.username, user.first_name)}
    # üîó <b>–°—Å—ã–ª–æ–∫:</b> {len(urls)}
    # üìù <b>ID –∑–∞—è–≤–∫–∏:</b> {request_id}
    # 
    # üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
    # {text[:200]}{'...' if len(text) > 200 else ''}
    # 
    # üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /checkapprovals –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
    # """
    #         
    #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    #         admins = self.db.get_all_admins()
    #         for admin in admins:
    #             try:
    #                 self.bot.send_message(admin.user_id, notification_text, parse_mode='HTML')
    #             except Exception as e:
    #                 logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin.user_id}: {e}")
    #                 
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _notify_admins_new_request: {e}")
    
    # def _create_presave_request(self, user_id: int, urls: List[str], description: str) -> int:
    #     """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤ –≤ –ë–î"""
    #     try:
    #         from database.models import PresaveRequest
    #         
    #         request = PresaveRequest(
    #             user_id=user_id,
    #             description=description,
    #             links=urls,
    #             status='active'
    #         )
    #         
    #         with self.db.get_session() as session:
    #             session.add(request)
    #             session.commit()
    #             return request.id
    #             
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _create_presave_request: {e}")
    #         return 0
    
    # ============================================
    # –£–¢–ò–õ–ò–¢–´
    # ============================================
    
    def get_recent_links_formatted(self, count: int = 10, thread_id: int = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
        try:
            links = self.db.get_recent_links(count, thread_id)
            
            if not links:
                return f"üìé <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {count} —Å—Å—ã–ª–æ–∫</b>\n\nü§∑ –°—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
            
            text_parts = [f"üìé <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {count} —Å—Å—ã–ª–æ–∫</b>\n"]
            
            for i, link in enumerate(links, 1):
                user = self.db.get_user_by_id(link.user_id)
                username = f"@{user.username}" if user and user.username else f"ID{link.user_id}"
                date_str = link.created_at.strftime("%d.%m %H:%M")
                
                # –û–±—Ä–µ–∑–∞–µ–º URL –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                display_url = link.url if len(link.url) <= 50 else link.url[:47] + "..."
                
                text_parts.append(f"{i}. <b>{username}</b> ({date_str})")
                text_parts.append(f"   üîó {display_url}")
                
                if i < len(links):
                    text_parts.append("")
            
            return "\n".join(text_parts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_recent_links_formatted: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫"
    
    def get_user_links_formatted(self, username: str, limit: int = 20) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            links = self.db.get_links_by_username(username)
            
            if not links:
                return f"üîç <b>–°—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}</b>\n\nü§∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫."
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫–∞–∑–∞
            display_links = links[:limit]
            
            text_parts = [
                f"üîç <b>–°—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}</b>",
                f"üìä <b>–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:</b> {len(links)} —Å—Å—ã–ª–æ–∫\n"
            ]
            
            for i, link in enumerate(display_links, 1):
                date_str = link.created_at.strftime("%d.%m.%Y %H:%M")
                display_url = link.url if len(link.url) <= 50 else link.url[:47] + "..."
                
                text_parts.append(f"{i}. {date_str}")
                text_parts.append(f"   üîó {display_url}")
                
                if i < len(display_links):
                    text_parts.append("")
            
            if len(links) > limit:
                text_parts.append(f"\n... –∏ –µ—â–µ {len(links) - limit} —Å—Å—ã–ª–æ–∫")
            
            return "\n".join(text_parts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_user_links_formatted: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    def get_links_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫"""
        try:
            stats = self.db.get_basic_stats()
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Å—ã–ª–æ–∫
            with self.db.get_session() as session:
                from database.models import Link
                
                # –°—Å—ã–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
                today_links = session.query(Link).filter(
                    Link.created_at >= today_start,
                    Link.is_active == True
                ).count()
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏
                unique_users = session.query(Link.user_id).filter(
                    Link.is_active == True
                ).distinct().count()
                
                # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–∞–º
                from sqlalchemy import func
                top_users = session.query(
                    Link.user_id,
                    func.count(Link.id).label('link_count')
                ).filter(
                    Link.is_active == True
                ).group_by(Link.user_id).order_by(
                    func.count(Link.id).desc()
                ).limit(5).all()
                
                stats.update({
                    'links_today': today_links,
                    'unique_users_with_links': unique_users,
                    'top_users': top_users,
                    'reminder_count': self.db.get_setting('reminder_count', 0)
                })
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_links_statistics: {e}")
            return {}


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LinkHandler"""
    from database.manager import DatabaseManager
    from utils.security import SecurityManager
    from config import Config
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LinkHandler...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db = DatabaseManager("sqlite:///:memory:")
    db.create_tables()
    
    security = SecurityManager([12345], [2, 3])
    config = Config()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ link handler
    link_handler = LinkHandler(None, db, security, config)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL:")
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å—Å—ã–ª–∫–∞: https://example.com",
        "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: http://test.org –∏ https://another.com/path?param=value",
        "–ü–ª–æ—Ö–∞—è —Å—Å—ã–ª–∫–∞: ht://invalid.url",
        "–ü—Ä–µ—Å–µ–π–≤: https://linktr.ee/artist_name"
    ]
    
    for text in test_texts:
        urls = link_handler._extract_urls(text)
        print(f"‚Ä¢ '{text[:40]}...': {len(urls)} URL(s)")
        for url in urls:
            print(f"    - {url}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ—Å–µ–π–≤ —Å—Å—ã–ª–æ–∫
    print("\nüéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ—Å–µ–π–≤ —Å—Å—ã–ª–æ–∫:")
    test_urls = [
        ["https://linktr.ee/artist"],
        ["https://example.com/presave"],
        ["https://distrokid.com/hyperfollow/artist/song"],
        ["https://regular-website.com"]
    ]
    
    for urls in test_urls:
        is_presave = link_handler._is_presave_link(urls)
        status = "‚úÖ –ü—Ä–µ—Å–µ–π–≤" if is_presave else "‚ùå –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞"
        print(f"‚Ä¢ {urls[0]}: {status}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LinkHandler –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")