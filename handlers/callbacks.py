"""
üîò Callbacks Handler - Do Presave Reminder Bot v25+
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback_query (–Ω–∞–∂–∞—Ç–∏–π inline –∫–Ω–æ–ø–æ–∫)
"""

import time
from typing import Optional, Dict, Any, List, Tuple
import telebot
from telebot.types import CallbackQuery, InlineKeyboardMarkup

from config import config
from database.manager import get_database_manager
from utils.security import (
    admin_required, security_manager, user_rate_limit,
    AccessDeniedError, RateLimitError
)
from utils.logger import get_logger, telegram_logger
from utils.helpers import (
    MessageFormatter, KeyboardBuilder, UserHelper, 
    DataHelper, ConfigHelper, CommandParser
)

logger = get_logger(__name__)

class CallbackHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query (–Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫)"""
    
    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot
        self.db = get_database_manager()
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ –∫–Ω–æ–ø–æ–∫
        self.callback_cache = {}  # user_id: {callback_data: timestamp}
        self.callback_cooldown = 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ callback
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        logger.info("üîò Callback Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback_query"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_all_callbacks(call: CallbackQuery):
            self.process_callback(call)
    
    def process_callback(self, call: CallbackQuery):
        """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback_query"""
        try:
            user_id = call.from_user.id
            callback_data = call.data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
            if not ConfigHelper.is_bot_enabled() and not security_manager.is_admin(user_id):
                self.bot.answer_callback_query(
                    call.id, 
                    "üö´ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", 
                    show_alert=True
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
            if self._is_callback_on_cooldown(user_id, callback_data):
                self.bot.answer_callback_query(call.id, "‚è≥ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!", show_alert=False)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._update_callback_cache(user_id, callback_data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º callback
            telegram_logger.user_action(
                user_id,
                f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {callback_data}",
                callback_data=callback_data
            )
            
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É callback
            handled = self._route_callback(call)
            
            if not handled:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                self.bot.answer_callback_query(
                    call.id, 
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", 
                    show_alert=False
                )
            
        except AccessDeniedError:
            self.bot.answer_callback_query(
                call.id, 
                "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 
                show_alert=True
            )
        except RateLimitError:
            self.bot.answer_callback_query(
                call.id, 
                "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤", 
                show_alert=True
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {call.data}: {e}")
            self.bot.answer_callback_query(
                call.id, 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", 
                show_alert=True
            )
    
    def _is_callback_on_cooldown(self, user_id: int, callback_data: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –¥–ª—è callback"""
        try:
            current_time = time.time()
            user_cache = self.callback_cache.get(user_id, {})
            last_time = user_cache.get(callback_data, 0)
            
            return current_time - last_time < self.callback_cooldown
        except:
            return False
    
    def _update_callback_cache(self, user_id: int, callback_data: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ callback"""
        try:
            current_time = time.time()
            
            if user_id not in self.callback_cache:
                self.callback_cache[user_id] = {}
            
            self.callback_cache[user_id][callback_data] = current_time
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            cutoff_time = current_time - 60  # –•—Ä–∞–Ω–∏–º 1 –º–∏–Ω—É—Ç—É
            for uid in list(self.callback_cache.keys()):
                user_callbacks = self.callback_cache[uid]
                expired_callbacks = [
                    cd for cd, timestamp in user_callbacks.items()
                    if timestamp < cutoff_time
                ]
                for cd in expired_callbacks:
                    del user_callbacks[cd]
                
                if not user_callbacks:
                    del self.callback_cache[uid]
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ callback: {e}")
    
    def _route_callback(self, call: CallbackQuery) -> bool:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback –ø–æ —Ç–∏–ø–∞–º"""
        data = call.data
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ callback (—É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ menu.py)
        if data.startswith(('menu_', 'leaderboard_', 'action_', 'settings_', 'limits_')):
            # –≠—Ç–∏ callback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ MenuManager
            return True
        
        # Callback –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤ (–ü–ª–∞–Ω 2)
        elif data.startswith('karma_'):
            return self._handle_karma_callbacks(call)
        
        # Callback –¥–ª—è –ò–ò –∏ —Ñ–æ—Ä–º (–ü–ª–∞–Ω 3)
        elif data.startswith(('ai_', 'form_', 'gratitude_')):
            return self._handle_ai_form_callbacks(call)
        
        # Callback –¥–ª—è backup (–ü–ª–∞–Ω 4)
        elif data.startswith('backup_'):
            return self._handle_backup_callbacks(call)
        
        # Callback –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        elif data.startswith('analytics_'):
            return self._handle_analytics_callbacks(call)
        
        # Callback –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        elif data.startswith('diagnostics_'):
            return self._handle_diagnostics_callbacks(call)
        
        # Callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        elif data.startswith('page_'):
            return self._handle_pagination_callbacks(call)
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ callback
        elif data == 'under_development':
            return self._handle_under_development(call)
        elif data == 'refresh':
            return self._handle_refresh(call)
        elif data == 'close':
            return self._handle_close(call)
        
        return False
    
    # ============================================
    # –ü–õ–ê–ù 2 - CALLBACK –ö–ê–†–ú–´
    # ============================================
    
    def _handle_karma_callbacks(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã"""
        if not config.ENABLE_PLAN_2_FEATURES:
            self._send_feature_unavailable(call, "–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã (–ü–ª–∞–Ω 2)")
            return True
        
        data = call.data
        
        try:
            if data == 'karma_leaderboard':
                self._show_karma_leaderboard(call)
            
            elif data == 'karma_history':
                self._show_karma_history(call)
            
            elif data.startswith('karma_user_'):
                # karma_user_123456 - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = int(data.split('_')[-1])
                self._show_user_karma_details(call, user_id)
            
            elif data == 'karma_top_gainers':
                self._show_top_karma_gainers(call)
            
            elif data == 'karma_stats':
                self._show_karma_statistics(call)
            
            else:
                return False
            
            self.bot.answer_callback_query(call.id)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ karma callback: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return True
    
    @admin_required
    def _show_karma_leaderboard(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∫–∞—Ä–º—ã"""
        try:
            leaderboard_data = self.db.get_karma_leaderboard(limit=10)
            
            text = DataHelper.format_leaderboard(leaderboard_data, 'karma')
            text += f"\n\n{MessageFormatter.get_emoji('refresh')} –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —á—Ç–æ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = [
                [{'text': f"{MessageFormatter.get_emoji('refresh')} –û–±–Ω–æ–≤–∏—Ç—å", 'callback_data': 'karma_leaderboard'}],
                [{'text': f"{MessageFormatter.get_emoji('stats')} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–º—ã", 'callback_data': 'karma_stats'}],
                [{'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥", 'callback_data': 'menu_leaderboard'}]
            ]
            
            keyboard = KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∫–∞—Ä–º—ã: {e}")
    
    # ============================================
    # –ü–õ–ê–ù 3 - CALLBACK –ò–ò –ò –§–û–†–ú
    # ============================================
    
    def _handle_ai_form_callbacks(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ò–ò –∏ —Ñ–æ—Ä–º"""
        if not config.ENABLE_PLAN_3_FEATURES:
            self._send_feature_unavailable(call, "–ò–ò –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã (–ü–ª–∞–Ω 3)")
            return True
        
        data = call.data
        
        try:
            # –ò–ò callback
            if data.startswith('ai_'):
                return self._handle_ai_specific_callbacks(call)
            
            # –§–æ—Ä–º—ã callback
            elif data.startswith('form_'):
                return self._handle_form_specific_callbacks(call)
            
            # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ callback
            elif data.startswith('gratitude_'):
                return self._handle_gratitude_callbacks(call)
            
            else:
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI/Form callback: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return True
    
    def _handle_ai_specific_callbacks(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö callback"""
        data = call.data
        
        if data == 'ai_settings':
            self._show_ai_settings(call)
        elif data == 'ai_stats':
            self._show_ai_statistics(call)
        elif data == 'ai_conversation_history':
            self._show_ai_conversation_history(call)
        else:
            return False
        
        self.bot.answer_callback_query(call.id)
        return True
    
    def _handle_form_specific_callbacks(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö callback"""
        data = call.data
        
        if data == 'form_start_presave':
            self._start_presave_form(call)
        elif data == 'form_start_claim':
            self._start_claim_form(call)
        elif data == 'form_cancel':
            self._cancel_form(call)
        elif data.startswith('form_approve_'):
            claim_id = int(data.split('_')[-1])
            self._approve_claim(call, claim_id)
        elif data.startswith('form_reject_'):
            claim_id = int(data.split('_')[-1])
            self._reject_claim(call, claim_id)
        else:
            return False
        
        self.bot.answer_callback_query(call.id)
        return True
    
    # ============================================
    # –ü–õ–ê–ù 4 - CALLBACK BACKUP
    # ============================================
    
    def _handle_backup_callbacks(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è backup —Å–∏—Å—Ç–µ–º—ã"""
        if not config.ENABLE_PLAN_4_FEATURES:
            self._send_feature_unavailable(call, "Backup —Å–∏—Å—Ç–µ–º–∞ (–ü–ª–∞–Ω 4)")
            return True
        
        data = call.data
        
        try:
            if data == 'backup_create':
                self._create_backup(call)
            elif data == 'backup_history':
                self._show_backup_history(call)
            elif data == 'backup_status':
                self._show_backup_status(call)
            elif data == 'backup_help':
                self._show_backup_help(call)
            else:
                return False
            
            self.bot.answer_callback_query(call.id)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ backup callback: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return True
    
    # ============================================
    # –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï CALLBACK
    # ============================================
    
    def _handle_analytics_callbacks(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        data = call.data
        
        try:
            if data == 'analytics_links':
                self._show_links_analytics(call)
            elif data == 'analytics_users':
                self._show_users_analytics(call)
            elif data == 'analytics_trends':
                self._show_trends_analytics(call)
            elif data.startswith('analytics_user_'):
                user_id = int(data.split('_')[-1])
                self._show_user_analytics(call, user_id)
            else:
                return False
            
            self.bot.answer_callback_query(call.id)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ analytics callback: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return True
    
    @admin_required
    def _show_links_analytics(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫"""
        try:
            from handlers.links import LinkHandler
            link_handler = LinkHandler(self.bot)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç—Ä–µ–Ω–¥–æ–≤
            trends = link_handler.analyze_link_trends(days=7)
            
            text = f"{MessageFormatter.get_emoji('stats')} **–ê–ù–ê–õ–ò–¢–ò–ö–ê –°–°–´–õ–û–ö (7 –¥–Ω–µ–π)**\n\n"
            
            if 'error' not in trends:
                text += f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                text += f"‚Ä¢ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {trends['total_links']}\n"
                text += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {trends['daily_average']:.1f}\n\n"
                
                if trends['top_domains']:
                    text += f"**–¢–æ–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º:**\n"
                    for i, (domain, count) in enumerate(trends['top_domains'][:5], 1):
                        text += f"{i}. {domain}: {count} —Å—Å—ã–ª–æ–∫\n"
                
                if trends['most_active_day']:
                    day, count = trends['most_active_day']
                    text += f"\n**–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å:** {day} ({count} —Å—Å—ã–ª–æ–∫)"
            else:
                text += f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {trends['error']}"
            
            # –ö–Ω–æ–ø–∫–∏
            buttons = [
                [{'text': f"{MessageFormatter.get_emoji('refresh')} –û–±–Ω–æ–≤–∏—Ç—å", 'callback_data': 'analytics_links'}],
                [{'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥", 'callback_data': 'menu_analytics'}]
            ]
            
            keyboard = KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")
    
    # ============================================
    # –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï CALLBACK
    # ============================================
    
    def _handle_diagnostics_callbacks(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        data = call.data
        
        try:
            if data == 'diagnostics_system':
                self._show_system_diagnostics(call)
            elif data == 'diagnostics_performance':
                self._show_performance_diagnostics(call)
            elif data == 'diagnostics_health':
                self._show_health_check(call)
            elif data == 'diagnostics_logs':
                self._show_recent_logs(call)
            else:
                return False
            
            self.bot.answer_callback_query(call.id)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ diagnostics callback: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return True
    
    @admin_required
    def _show_system_diagnostics(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            db_stats = self.db.get_database_stats()
            health = self.db.health_check()
            
            text = f"{MessageFormatter.get_emoji('system')} **–°–ò–°–¢–ï–ú–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê**\n\n"
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            text += f"**–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:**\n"
            text += f"‚Ä¢ –ë–î: {'‚úÖ' if health['database_connection'] == 'ok' else '‚ùå'}\n"
            text += f"‚Ä¢ –ë–æ—Ç: {'‚úÖ' if ConfigHelper.is_bot_enabled() else '‚ùå'}\n"
            text += f"‚Ä¢ Webhook: {'‚úÖ' if config.RENDER_EXTERNAL_URL else '‚ùå'}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            text += f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {MessageFormatter.format_number(db_stats['total_users'])}\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {MessageFormatter.format_number(db_stats['active_users_week'])}\n"
            text += f"‚Ä¢ –°—Å—ã–ª–æ–∫: {MessageFormatter.format_number(db_stats['total_links'])}\n"
            
            if config.ENABLE_PLAN_2_FEATURES:
                text += f"‚Ä¢ –û–±—â–∞—è –∫–∞—Ä–º–∞: {MessageFormatter.format_number(db_stats['total_karma_points'])}\n"
            
            # –ü–∞–º—è—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            try:
                import psutil
                import os
                process = psutil.Process(os.getpid())
                memory_mb = process.memory_info().rss / 1024 / 1024
                text += f"\n**–†–µ—Å—É—Ä—Å—ã:**\n"
                text += f"‚Ä¢ –ü–∞–º—è—Ç—å: {memory_mb:.1f} MB\n"
            except:
                text += f"\n**–†–µ—Å—É—Ä—Å—ã:** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            
            # –ö–Ω–æ–ø–∫–∏
            buttons = [
                [{'text': f"{MessageFormatter.get_emoji('refresh')} –û–±–Ω–æ–≤–∏—Ç—å", 'callback_data': 'diagnostics_system'}],
                [{'text': f"{MessageFormatter.get_emoji('health')} Health Check", 'callback_data': 'diagnostics_health'}],
                [{'text': f"{MessageFormatter.get_emoji('back')} –ù–∞–∑–∞–¥", 'callback_data': 'menu_diagnostics'}]
            ]
            
            keyboard = KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    # ============================================
    # –ü–ê–ì–ò–ù–ê–¶–ò–Ø CALLBACK
    # ============================================
    
    def _handle_pagination_callbacks(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        data = call.data
        
        try:
            # –ü–∞—Ä—Å–∏–º callback –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: page_type_action_value
            parts = data.split('_')
            if len(parts) < 3:
                return False
            
            page_type = parts[1]  # links, users, karma, etc.
            action = parts[2]     # next, prev, goto
            
            if action == 'next':
                current_page = int(parts[3]) if len(parts) > 3 else 1
                self._show_paginated_content(call, page_type, current_page + 1)
            elif action == 'prev':
                current_page = int(parts[3]) if len(parts) > 3 else 1
                self._show_paginated_content(call, page_type, max(1, current_page - 1))
            elif action == 'goto':
                page_num = int(parts[3]) if len(parts) > 3 else 1
                self._show_paginated_content(call, page_type, page_num)
            
            self.bot.answer_callback_query(call.id)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pagination callback: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return True
    
    def _show_paginated_content(self, call: CallbackQuery, content_type: str, page: int):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            items_per_page = 10
            
            if content_type == 'links':
                # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
                all_links = self.db.get_recent_links(limit=100)
                total_pages = max(1, (len(all_links) + items_per_page - 1) // items_per_page)
                page = min(page, total_pages)
                
                start_idx = (page - 1) * items_per_page
                end_idx = start_idx + items_per_page
                page_links = all_links[start_idx:end_idx]
                
                text = DataHelper.format_links_list(page_links, max_links=items_per_page)
                text += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
                
                keyboard = KeyboardBuilder.create_pagination_keyboard(page, total_pages, 'page_links')
                
            else:
                # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                text = f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è {content_type} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
                keyboard = KeyboardBuilder.create_back_button('menu_main')
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    # ============================================
    # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï CALLBACK
    # ============================================
    
    def _handle_under_development(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'"""
        try:
            text = f"{MessageFormatter.get_emoji('loading')} **–§–£–ù–ö–¶–ò–Ø –í –†–ê–ó–†–ê–ë–û–¢–ö–ï**\n\n"
            text += f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞–Ω–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è:\n\n"
            text += f"‚Ä¢ **–ü–ª–∞–Ω 2** - –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã\n"
            text += f"‚Ä¢ **–ü–ª–∞–Ω 3** - –ò–ò –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã\n"
            text += f"‚Ä¢ **–ü–ª–∞–Ω 4** - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è backup —Å–∏—Å—Ç–µ–º–∞\n\n"
            text += f"{MessageFormatter.get_emoji('time')} –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–¥–µ—Ç—Å—è –ø–æ—ç—Ç–∞–ø–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏."
            
            keyboard = KeyboardBuilder.create_back_button('menu_main')
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(call.id, "üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=False)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ': {e}")
            return False
    
    def _handle_refresh(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π callback –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            current_callback = call.message.reply_markup.keyboard[0][0].callback_data if call.message.reply_markup else None
            
            if current_callback:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π call —Å —Ç–µ–∫—É—â–∏–º callback_data –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                call.data = current_callback
                self._route_callback(call)
            
            self.bot.answer_callback_query(call.id, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            return False
    
    def _handle_close(self, call: CallbackQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–∫—Ä—ã—Ç–∏—è"""
        try:
            self.bot.delete_message(call.message.chat.id, call.message.message_id)
            self.bot.answer_callback_query(call.id, "‚úÖ –ó–∞–∫—Ä—ã—Ç–æ", show_alert=False)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å", show_alert=True)
            return False
    
    # ============================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ============================================
    
    def _send_feature_unavailable(self, call: CallbackQuery, feature_name: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            message = f"üîÑ {feature_name} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞–Ω–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è"
            self.bot.answer_callback_query(call.id, message, show_alert=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
    
    def get_callback_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ callback"""
        try:
            total_users = len(self.callback_cache)
            total_callbacks = sum(len(callbacks) for callbacks in self.callback_cache.values())
            
            return {
                'active_users': total_users,
                'total_cached_callbacks': total_callbacks,
                'cooldown_seconds': self.callback_cooldown
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ callback: {e}")
            return {}
    
    # ============================================
    # –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ë–£–î–£–©–ò–• –ü–õ–ê–ù–û–í
    # ============================================
    
    def _start_presave_form(self, call: CallbackQuery):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–µ—Å–µ–π–≤–∞ (–ü–ª–∞–Ω 3)"""
        message = "üìù –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü–ª–∞–Ω–µ 3"
        self.bot.answer_callback_query(call.id, message, show_alert=True)
    
    def _start_claim_form(self, call: CallbackQuery):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ (–ü–ª–∞–Ω 3)"""
        message = "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 3"
        self.bot.answer_callback_query(call.id, message, show_alert=True)
    
    def _show_ai_settings(self, call: CallbackQuery):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò (–ü–ª–∞–Ω 3)"""
        message = "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü–ª–∞–Ω–µ 3"
        self.bot.answer_callback_query(call.id, message, show_alert=True)
    
    def _create_backup(self, call: CallbackQuery):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è backup (–ü–ª–∞–Ω 4)"""
        message = "üíæ –°–∏—Å—Ç–µ–º–∞ backup –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 4"
        self.bot.answer_callback_query(call.id, message, show_alert=True)

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================

def init_callback_handlers(bot: telebot.TeleBot) -> CallbackHandler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback"""
    return CallbackHandler(bot)

# ============================================
# –≠–ö–°–ü–û–†–¢
# ============================================

__all__ = ['CallbackHandler', 'init_callback_handlers']

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Callback Handler...")
    print("‚úÖ –ú–æ–¥—É–ª—å callbacks.py –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
