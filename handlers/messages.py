"""
üìù Messages Handler - Do Presave Reminder Bot v25+
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ò–ò –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
"""

import re
from typing import Optional, List, Dict, Any
import telebot
from telebot.types import Message

from config import config
from database.manager import get_database_manager
from utils.security import (
    security_manager, user_rate_limit, whitelisted_thread_required,
    extract_user_id_from_message, extract_thread_id_from_message
)
from utils.logger import get_logger, telegram_logger, ai_logger, karma_logger
from utils.helpers import MessageFormatter, CommandParser, UserHelper, ConfigHelper

logger = get_logger(__name__)

class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot
        self.db = get_database_manager()
        
        # –ö—ç—à –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.recent_messages = {}  # user_id: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        logger.info("üìù Message Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.bot.message_handler(content_types=['text'])
        def handle_text_message(message: Message):
            self.process_text_message(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –±—É–¥—É—â–µ–≥–æ)
        @self.bot.message_handler(content_types=['voice'])
        def handle_voice_message(message: Message):
            self.process_voice_message(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è –ü–ª–∞–Ω 3 - —Å–∫—Ä–∏–Ω—à–æ—Ç—ã)
        @self.bot.message_handler(content_types=['photo'])
        def handle_photo_message(message: Message):
            self.process_photo_message(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –ü–ª–∞–Ω 4 - backup —Ñ–∞–π–ª—ã)
        @self.bot.message_handler(content_types=['document'])
        def handle_document_message(message: Message):
            self.process_document_message(message)
    
    def process_text_message(self, message: Message):
        """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = extract_user_id_from_message(message)
            thread_id = extract_thread_id_from_message(message)
            text = message.text or ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
            if not ConfigHelper.is_bot_enabled():
                # –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if not security_manager.is_admin(user_id):
                    return
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.create_or_update_user(
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ —Ç–æ–ø–∏–∫ –∏–∑ whitelist)
            if thread_id and security_manager.is_whitelisted_thread(thread_id):
                self.db.update_message_stats(user.id, thread_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            telegram_logger.user_action(
                user_id,
                "–æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ",
                thread_id=thread_id,
                message_length=len(text),
                has_links=bool(CommandParser.extract_links_from_text(text))
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            
            # 1. –ö–æ–º–∞–Ω–¥—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ handlers
            if text.startswith('/'):
                return
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ (–ü–ª–∞–Ω 3 - –ò–ò)
            if self._is_bot_mentioned(text):
                self._handle_bot_mention(message, user)
                return
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–ü–ª–∞–Ω 3 - –ò–ò)
            if self._is_reply_to_bot(message):
                self._handle_reply_to_bot(message, user)
                return
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ —Å reply (–ü–ª–∞–Ω 3 - –∞–≤—Ç–æ-–∫–∞—Ä–º–∞)
            if self._is_gratitude_message(message):
                self._handle_gratitude_message(message, user)
                return
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ (–ü–ª–∞–Ω 1 - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
            if self._has_links(text):
                # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –≤ handlers/links.py
                from handlers.links import LinkHandler
                link_handler = LinkHandler(self.bot)
                link_handler.process_message_with_links(message, user)
                return
            
            # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º (–ü–ª–∞–Ω 3)
            if config.ENABLE_PLAN_3_FEATURES:
                form_handled = self._handle_form_input(message, user)
                if form_handled:
                    return
            
            # 7. –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.debug(f"üìù –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text[:50]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # ============================================
    # –ü–õ–ê–ù 3 - –ò–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
    # ============================================
    
    def _is_bot_mentioned(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if not config.ENABLE_PLAN_3_FEATURES:
            return False
        
        bot_username = self.bot.get_me().username
        return CommandParser.is_mention_bot(text, bot_username)
    
    def _is_reply_to_bot(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
        if not config.ENABLE_PLAN_3_FEATURES:
            return False
        
        if not message.reply_to_message:
            return False
        
        bot_id = self.bot.get_me().id
        return message.reply_to_message.from_user.id == bot_id
    
    @user_rate_limit('ai_requests')
    def _handle_bot_mention(self, message: Message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ (–ü–ª–∞–Ω 3 - –ò–ò)"""
        if not config.ENABLE_PLAN_3_FEATURES:
            return
        
        try:
            user_id = user.telegram_id
            text = message.text or ""
            
            # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            bot_username = self.bot.get_me().username
            clean_text = re.sub(rf'@{re.escape(bot_username)}', '', text).strip()
            
            if not clean_text:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                response = f"{MessageFormatter.get_emoji('ai')} –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
                response += f"–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º —Ç–µ–º–∞–º."
                
                self.bot.reply_to(message, response)
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º AI –∑–∞–ø—Ä–æ—Å
            ai_logger.ai_request(
                user_id=user_id,
                model="mention_detected",
                tokens_used=0,
                response_time_ms=0,
                success=True,
                request_type="mention"
            )
            
            # –í –ü–ª–∞–Ω–µ 3 –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –ò–ò
            # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
            response = f"{MessageFormatter.get_emoji('ai')} **–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)**\n\n"
            response += f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: _{clean_text}_\n\n"
            response += f"–§—É–Ω–∫—Ü–∏–∏ –ò–ò –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü–ª–∞–Ω–µ 3:\n"
            response += f"‚Ä¢ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            response += f"‚Ä¢ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
            response += f"‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏\n"
            response += f"‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º —Ç—Ä–µ–∫–æ–≤"
            
            self.bot.reply_to(message, response, parse_mode='Markdown')
            
            telegram_logger.user_action(
                user_id,
                "—É–ø–æ–º—è–Ω—É–ª –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
                request_text=clean_text[:100]
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
    
    @user_rate_limit('ai_requests')
    def _handle_reply_to_bot(self, message: Message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–ü–ª–∞–Ω 3 - –ò–ò)"""
        if not config.ENABLE_PLAN_3_FEATURES:
            return
        
        try:
            user_id = user.telegram_id
            text = message.text or ""
            
            # –õ–æ–≥–∏—Ä—É–µ–º AI –∑–∞–ø—Ä–æ—Å
            ai_logger.ai_request(
                user_id=user_id,
                model="reply_detected",
                tokens_used=0,
                response_time_ms=0,
                success=True,
                request_type="reply"
            )
            
            # –í –ü–ª–∞–Ω–µ 3 –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò
            response = f"{MessageFormatter.get_emoji('ai')} **–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)**\n\n"
            response += f"–í–∞—à –∑–∞–ø—Ä–æ—Å: _{text}_\n\n"
            response += f"–í –≥–æ—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç —Å–º–æ–∂–µ—Ç:\n"
            response += f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            response += f"‚Ä¢ –î–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            response += f"‚Ä¢ –ü–æ–º–æ—á—å —Å —Ä–µ—à–µ–Ω–∏–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"
            
            self.bot.reply_to(message, response, parse_mode='Markdown')
            
            telegram_logger.user_action(
                user_id,
                "–æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞",
                reply_text=text[:100]
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ reply –±–æ—Ç—É: {e}")
    
    # ============================================
    # –ü–õ–ê–ù 3 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–ï–ô
    # ============================================
    
    def _is_gratitude_message(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Å reply"""
        if not config.ENABLE_PLAN_3_FEATURES:
            return False
        
        if not message.reply_to_message:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ reply –Ω–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        bot_id = self.bot.get_me().id
        if message.reply_to_message.from_user.id == bot_id:
            return False
        
        text = (message.text or "").lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        gratitude_words = config.GRATITUDE_WORDS.get('ru', []) + config.GRATITUDE_WORDS.get('en', [])
        
        for word in gratitude_words:
            if word in text:
                return True
        
        return False
    
    def _handle_gratitude_message(self, message: Message, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é (–ü–ª–∞–Ω 3 - –∞–≤—Ç–æ-–∫–∞—Ä–º–∞)"""
        if not config.ENABLE_PLAN_3_FEATURES or not config.ENABLE_PLAN_2_FEATURES:
            return
        
        try:
            from_user_id = user.telegram_id
            reply_message = message.reply_to_message
            to_user_id = reply_message.from_user.id
            text = (message.text or "").lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç —Å–∞–º —Å–µ–±—è
            if from_user_id == to_user_id:
                return
            
            # –ò—â–µ–º —Å–ª–æ–≤–æ-—Ç—Ä–∏–≥–≥–µ—Ä
            trigger_word = None
            gratitude_words = config.GRATITUDE_WORDS.get('ru', []) + config.GRATITUDE_WORDS.get('en', [])
            
            for word in gratitude_words:
                if word in text:
                    trigger_word = word
                    break
            
            if not trigger_word:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown (–Ω–µ –±–æ–ª–µ–µ 1 –∫–∞—Ä–º—ã –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Å)
            cooldown_minutes = config.GRATITUDE_COOLDOWN_MINUTES
            recent_auto_karma = self.db.db.execute(
                """SELECT created_at FROM auto_karma_log 
                   WHERE from_user_id = %s AND to_user_id = %s 
                   AND created_at > NOW() - INTERVAL '%s minutes'""",
                (from_user_id, to_user_id, cooldown_minutes)
            ).fetchone()
            
            if recent_auto_karma:
                logger.debug(f"üôè Cooldown –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ {from_user_id} -> {to_user_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) < config.MIN_MESSAGE_LENGTH_FOR_KARMA:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            to_user = self.db.create_or_update_user(
                telegram_id=to_user_id,
                username=reply_message.from_user.username,
                first_name=reply_message.from_user.first_name,
                last_name=reply_message.from_user.last_name
            )
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –∫–∞—Ä–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            karma_record = self.db.change_karma(
                user_id=to_user.id,
                change=1,
                admin_id=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
                reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å: '{trigger_word}'",
                is_automatic=True
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
            self.db.log_auto_karma(
                from_user_id=user.id,
                to_user_id=to_user.id,
                trigger_word=trigger_word,
                message_text=text[:500],
                karma_added=1
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            to_user_display = UserHelper.get_user_display_name(to_user)
            notification = f"{MessageFormatter.get_emoji('thank_you')} {to_user_display} —Ç–≤–æ—è –∫–∞—Ä–º–∞ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ +1, –ø—Ä–æ–¥–æ–ª–∂–∞–π –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–æ–º –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö! {MessageFormatter.get_emoji('success')}"
            
            self.bot.reply_to(reply_message, notification)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            karma_logger.auto_karma_detected(
                from_user_id=from_user_id,
                to_user_id=to_user_id,
                trigger_word=trigger_word,
                message_text=text[:100]
            )
            
            telegram_logger.user_action(
                from_user_id,
                f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–∏–ª –∫–∞—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user_id}",
                trigger_word=trigger_word,
                karma_added=1
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {e}")
    
    # ============================================
    # –ü–õ–ê–ù 3 - –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–û–†–ú–´
    # ============================================
    
    def _handle_form_input(self, message: Message, user) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö (–ü–ª–∞–Ω 3)"""
        if not config.ENABLE_PLAN_3_FEATURES:
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            form_session = self.db.db.query(FormSession)\
                .filter(FormSession.user_id == user.id)\
                .first()
            
            if not form_session or form_session.current_state == FormState.IDLE:
                return False
            
            # –í –ü–ª–∞–Ω–µ 3 –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.debug(f"üìù –í–≤–æ–¥ –≤ —Ñ–æ—Ä–º–µ –æ—Ç {user.telegram_id}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {form_session.current_state.value}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ñ–æ—Ä–º—ã: {e}")
            return False
    
    # ============================================
    # –û–ë–†–ê–ë–û–¢–ö–ê –î–†–£–ì–ò–• –¢–ò–ü–û–í –°–û–û–ë–©–ï–ù–ò–ô
    # ============================================
    
    def process_voice_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±—É–¥—É—â–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)"""
        try:
            user_id = extract_user_id_from_message(message)
            
            if not security_manager.is_admin(user_id):
                # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                return
            
            response = f"{MessageFormatter.get_emoji('ai')} **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
            response += f"–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –ø–ª–∞–Ω–∞—Ö."
            
            self.bot.reply_to(message, response, parse_mode='Markdown')
            
            telegram_logger.user_action(user_id, "–æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def process_photo_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ü–ª–∞–Ω 3 - —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–µ—Å–µ–π–≤–æ–≤)"""
        try:
            user_id = extract_user_id_from_message(message)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.create_or_update_user(
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            
            if config.ENABLE_PLAN_3_FEATURES:
                # –í –ü–ª–∞–Ω–µ 3 –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –∑–∞—è–≤–æ–∫
                response = f"{MessageFormatter.get_emoji('screenshot')} **–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω**\n\n"
                response += f"–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 3.\n"
                response += f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:\n"
                response += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –∑–∞—è–≤–∫–∞–º\n"
                response += f"‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö\n"
                response += f"‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–µ—Å–µ–π–≤–æ–≤"
            else:
                response = f"{MessageFormatter.get_emoji('loading')} **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
                response += f"–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 3."
            
            self.bot.reply_to(message, response, parse_mode='Markdown')
            
            telegram_logger.user_action(user_id, "–æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    def process_document_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ü–ª–∞–Ω 4 - backup —Ñ–∞–π–ª—ã)"""
        try:
            user_id = extract_user_id_from_message(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è backup —Ñ–∞–π–ª–æ–≤
            if not security_manager.is_admin(user_id):
                return
            
            document = message.document
            filename = document.file_name or "unknown"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ backup —Ñ–∞–π–ª
            if filename.startswith('presave_bot_backup_') and filename.endswith('.zip'):
                if config.ENABLE_PLAN_4_FEATURES:
                    # –í –ü–ª–∞–Ω–µ 4 –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                    response = f"{MessageFormatter.get_emoji('backup')} **Backup —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω**\n\n"
                    response += f"**–§–∞–π–ª:** `{filename}`\n"
                    response += f"**–†–∞–∑–º–µ—Ä:** {MessageFormatter.format_file_size(document.file_size)}\n\n"
                    response += f"–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 4."
                else:
                    response = f"{MessageFormatter.get_emoji('loading')} **Backup —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**"
            else:
                response = f"{MessageFormatter.get_emoji('info')} **–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω**\n\n"
                response += f"**–§–∞–π–ª:** `{filename}`\n"
                response += f"**–†–∞–∑–º–µ—Ä:** {MessageFormatter.format_file_size(document.file_size)}"
            
            self.bot.reply_to(message, response, parse_mode='Markdown')
            
            telegram_logger.admin_action(
                user_id, 
                "–æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç",
                filename=filename,
                file_size=document.file_size
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
    
    # ============================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ============================================
    
    def _has_links(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏"""
        links = CommandParser.extract_links_from_text(text)
        return len(links) > 0
    
    def _is_private_chat(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return message.chat.type == 'private'
    
    def _should_ignore_message(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.from_user.is_bot:
            return True
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.content_type not in ['text', 'voice', 'photo', 'document']:
            return True
        
        return False
    
    def get_message_context(self, message: Message) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ò–ò"""
        return {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'chat_type': message.chat.type,
            'thread_id': extract_thread_id_from_message(message),
            'is_reply': bool(message.reply_to_message),
            'message_length': len(message.text or ""),
            'timestamp': message.date
        }

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================

def init_message_handlers(bot: telebot.TeleBot) -> MessageHandler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return MessageHandler(bot)

# ============================================
# –≠–ö–°–ü–û–†–¢
# ============================================

__all__ = ['MessageHandler', 'init_message_handlers']

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Message Handlers...")
    print("‚úÖ –ú–æ–¥—É–ª—å messages.py –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
