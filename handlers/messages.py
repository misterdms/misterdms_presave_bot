"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Do Presave Reminder Bot v25+
–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å—Å—ã–ª–æ–∫

–ü–õ–ê–ù 1: –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ê–ö–¢–ò–í–ù–ê–Ø)
–ü–õ–ê–ù 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞—Ä–º–æ–π (–ó–ê–ì–õ–£–®–ö–ò)
–ü–õ–ê–ù 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–ò –∏ —Ñ–æ—Ä–º–∞–º–∏ (–ó–ê–ì–õ–£–®–ö–ò)
–ü–õ–ê–ù 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è backup (–ó–ê–ì–õ–£–®–ö–ò)
"""

import re
from typing import List, Optional
import telebot
from telebot.types import Message

from database.manager import DatabaseManager
from utils.security import SecurityManager, whitelist_required
from utils.logger import get_logger, log_user_action
from handlers.links import LinkHandler

logger = get_logger(__name__)

class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot: telebot.TeleBot, db_manager: DatabaseManager, security_manager: SecurityManager):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.bot = bot
        self.db = db_manager
        self.security = security_manager
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å—Å—ã–ª–æ–∫
        self.link_handler = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.py
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.url_pattern = re.compile(
            r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        )
        
        # –ü–õ–ê–ù 3: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ò–ò (–ó–ê–ì–õ–£–®–ö–ò)
        # self.mention_pattern = re.compile(r'@\w+')
        # self.gratitude_patterns = self._compile_gratitude_patterns()
        
        logger.info("MessageHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def set_link_handler(self, link_handler):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py)"""
        self.link_handler = link_handler
        logger.info("LinkHandler –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ MessageHandler")
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
        @self.bot.message_handler(content_types=['text'])
        def handle_text_message(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                self._process_text_message(message)
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ message handler: {e}")
        
        # –ü–õ–ê–ù 3: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ñ–æ—Ä–º (–ó–ê–ì–õ–£–®–ö–ò)
        # @self.bot.message_handler(content_types=['photo', 'document'])
        # def handle_file_message(message: Message):
        #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –∑–∞—è–≤–æ–∫)"""
        #     try:
        #         self._process_file_message(message)
        #     except Exception as e:
        #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        
        logger.info("Message handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _process_text_message(self, message: Message):
        """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            user_id = message.from_user.id
            chat_type = message.chat.type
            thread_id = getattr(message, 'message_thread_id', None)
            text = message.text or ""
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            if text.startswith('/'):
                return
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.get_or_create_user(
                user_id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            log_user_action(logger, user_id, f"–æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_type}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
            if chat_type == 'private':
                self._handle_private_message(message)
            elif chat_type in ['group', 'supergroup']:
                self._handle_group_message(message)
            else:
                logger.info(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —á–∞—Ç–∞: {chat_type}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _process_text_message: {e}")
    
    def _handle_private_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ"""
        try:
            user_id = message.from_user.id
            text = message.text
            
            # –ü–õ–ê–ù 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º (–ó–ê–ì–õ–£–®–ö–ê)
            # if self._is_user_in_form(user_id):
            #     self._handle_form_input(message)
            #     return
            
            # –ü–õ–ê–ù 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω–æ–≤ (–ó–ê–ì–õ–£–®–ö–ê)
            # if self.security.is_admin(user_id) and self._is_analytics_request(text):
            #     self._handle_analytics_request(message)
            #     return
            
            # –ü–õ–ê–ù 3: –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ª–∏—á–∫–µ (–ó–ê–ì–õ–£–®–ö–ê)
            # if self.db.get_setting('ai_enabled', False):
            #     self._handle_ai_conversation(message)
            #     return
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º
            if self.security.is_admin(user_id):
                self.bot.send_message(
                    message.chat.id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–∞–º–∏ –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö."
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_private_message: {e}")
    
    @whitelist_required
    def _handle_group_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            user_id = message.from_user.id
            text = message.text
            thread_id = getattr(message, 'message_thread_id', None)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç
            if not self.db.get_setting('bot_enabled', True):
                return  # –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            
            # –ü–õ–ê–ù 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ (–ó–ê–ì–õ–£–®–ö–ê)
            # if self._is_bot_mentioned(text):
            #     self._handle_bot_mention(message)
            #     return
            
            # –ü–õ–ê–ù 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ reply –∫ –±–æ—Ç—É (–ó–ê–ì–õ–£–®–ö–ê)  
            # if message.reply_to_message and message.reply_to_message.from_user.is_bot:
            #     self._handle_reply_to_bot(message)
            #     return
            
            # –ü–õ–ê–ù 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π (–ó–ê–ì–õ–£–®–ö–ê)
            # if self._contains_gratitude(text) and message.reply_to_message:
            #     self._handle_gratitude_message(message)
            
            # –ü–õ–ê–ù 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ (–ê–ö–¢–ò–í–ù–ê–Ø)
            if self._contains_urls(text):
                self._handle_message_with_links(message)
                return
            
            # –ü–õ–ê–ù 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            self._update_message_stats(user_id, thread_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_group_message: {e}")
    
    def _contains_urls(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç URLs"""
        return bool(self.url_pattern.search(text))
    
    def _handle_message_with_links(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
        try:
            if self.link_handler:
                # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫ –≤ LinkHandler
                self.link_handler.handle_link_message(message)
            else:
                logger.warning("LinkHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_message_with_links: {e}")
    
    def _update_message_stats(self, user_id: int, thread_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–õ–ê–ù 3: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ó–ê–ì–õ–£–®–ö–ê)
            # –í –ü–õ–ê–ù–ï 1 –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            log_user_action(logger, user_id, f"–∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–æ–ø–∏–∫–µ {thread_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _update_message_stats: {e}")
    
    # ============================================
    # –ü–õ–ê–ù 3: –ò–ò –ò –§–û–†–ú–´ (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    # def _is_user_in_form(self, user_id: int) -> bool:
    #     """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º–µ"""
    #     try:
    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤ –ë–î –∏–ª–∏ –∫—ç—à–µ
    #         from services.forms import FormManager
    #         form_manager = FormManager(self.db, None)
    #         return form_manager.is_user_in_form(user_id)
    #     except:
    #         return False
    
    # def _handle_form_input(self, message: Message):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º–µ"""
    #     try:
    #         user_id = message.from_user.id
    #         
    #         from services.forms import FormManager
    #         form_manager = FormManager(self.db, None)
    #         
    #         # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
    #         result = form_manager.process_form_input(user_id, message)
    #         
    #         if result['status'] == 'completed':
    #             self.bot.send_message(
    #                 message.chat.id,
    #                 "‚úÖ <b>–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.",
    #                 parse_mode='HTML'
    #             )
    #         elif result['status'] == 'error':
    #             self.bot.send_message(
    #                 message.chat.id,
    #                 f"‚ùå –û—à–∏–±–∫–∞: {result['message']}",
    #                 parse_mode='HTML'
    #             )
    #         elif result['status'] == 'next_step':
    #             self.bot.send_message(
    #                 message.chat.id,
    #                 result['message'],
    #                 parse_mode='HTML',
    #                 reply_markup=result.get('keyboard')
    #             )
    #             
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_form_input: {e}")
    #         self.bot.send_message(
    #             message.chat.id,
    #             "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
    #         )
    
    # def _is_analytics_request(self, text: str) -> bool:
    #     """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    #     analytics_keywords = [
    #         '@', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Å—ã–ª–∫–∏', '–∫–∞—Ä–º–∞', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    #     ]
    #     
    #     text_lower = text.lower()
    #     return any(keyword in text_lower for keyword in analytics_keywords)
    
    # def _handle_analytics_request(self, message: Message):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    #     try:
    #         text = message.text.lower()
    #         
    #         # –ò—â–µ–º username –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    #         username_match = re.search(r'@(\w+)', message.text)
    #         if not username_match:
    #             self.bot.send_message(
    #                 message.chat.id,
    #                 "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω username –≤ –∑–∞–ø—Ä–æ—Å–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: @username"
    #             )
    #             return
    #         
    #         username = username_match.group(1)
    #         
    #         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    #         if '—Å—Å—ã–ª–∫' in text:
    #             self._send_user_links_analytics(message, username)
    #         elif '–∫–∞—Ä–º' in text:
    #             self._send_user_karma_analytics(message, username)
    #         elif '—Å–æ–æ—Ç–Ω–æ—à–µ–Ω' in text:
    #             self._send_user_ratio_analytics(message, username)
    #         else:
    #             self._send_full_user_analytics(message, username)
    #             
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_analytics_request: {e}")
    #         self.bot.send_message(
    #             message.chat.id,
    #             "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"
    #         )
    
    # def _is_bot_mentioned(self, text: str) -> bool:
    #     """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    #     bot_username = self.bot.get_me().username
    #     
    #     mention_patterns = [
    #         f'@{bot_username}',
    #         bot_username.lower(),
    #         '–±–æ—Ç',
    #         'bot'
    #     ]
    #     
    #     text_lower = text.lower()
    #     return any(pattern in text_lower for pattern in mention_patterns)
    
    # def _handle_bot_mention(self, message: Message):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞"""
    #     try:
    #         if not self.db.get_setting('ai_enabled', False):
    #             # –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    #             self.bot.reply_to(
    #                 message,
    #                 "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥–∞—é —Å –ø—Ä–µ—Å–µ–π–≤–∞–º–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.\n"
    #                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    #             )
    #             return
    #         
    #         # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –ò–ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    #         self._handle_ai_conversation(message)
    #         
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_bot_mention: {e}")
    
    # def _handle_reply_to_bot(self, message: Message):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
    #     try:
    #         if self.db.get_setting('ai_enabled', False):
    #             self._handle_ai_conversation(message)
    #         else:
    #             # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    #             self.bot.reply_to(
    #                 message,
    #                 "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    #             )
    #             
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_reply_to_bot: {e}")
    
    # def _handle_ai_conversation(self, message: Message):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ò–ò"""
    #     try:
    #         user_id = message.from_user.id
    #         text = message.text
    #         
    #         # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    #         bot_username = self.bot.get_me().username
    #         clean_text = re.sub(f'@{bot_username}', '', text).strip()
    #         
    #         if not clean_text:
    #             self.bot.reply_to(
    #                 message,
    #                 "ü§î –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
    #             )
    #             return
    #         
    #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò
    #         from services.ai import AIManager
    #         ai_manager = AIManager(None)  # –ü–µ—Ä–µ–¥–∞–µ–º config
    #         
    #         # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    #         response = ai_manager.generate_response(
    #             prompt=clean_text,
    #             user_id=user_id,
    #             context_type='mention' if self._is_bot_mentioned(text) else 'reply'
    #         )
    #         
    #         if response:
    #             self.bot.reply_to(message, response, parse_mode='HTML')
    #         else:
    #             self.bot.reply_to(
    #                 message,
    #                 "üòÖ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
    #             )
    #             
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_ai_conversation: {e}")
    #         self.bot.reply_to(
    #             message,
    #             "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
    #         )
    
    # def _contains_gratitude(self, text: str) -> bool:
    #     """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"""
    #     if not self.db.get_setting('auto_karma_enabled', False):
    #         return False
    #     
    #     gratitude_words = [
    #         # –†—É—Å—Å–∫–∏–µ
    #         '—Å–ø–∞—Å–∏–±–æ', '—Å–ø—Å', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–æ–≥–æ–Ω—å', '–ø–æ–ª–µ–∑–Ω–æ', '–ø–æ–º–æ–≥–ª–æ',
    #         '–≤—ã—Ä—É—á–∏–ª', '–≤—ã—Ä—É—á–∏–ª–∞', '–ø–ª—é—Å –≤ –∫–∞—Ä–º—É', '—Ä–µ—Å–ø–µ–∫—Ç', '–∫—Ä—É—Ç—è–∫',
    #         '–∫–ª–∞—Å—Å–Ω–æ', '—Ç–æ–ø', '–∫—Ä–∞—Å–∞–≤–∞',
    #         
    #         # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    #         'thanks', 'thx', 'thank you', 'awesome', 'cool', 'nice',
    #         'great', 'helpful', 'amazing'
    #     ]
    #     
    #     text_lower = text.lower()
    #     return any(word in text_lower for word in gratitude_words)
    
    # def _handle_gratitude_message(self, message: Message):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é"""
    #     try:
    #         from_user_id = message.from_user.id
    #         to_user_id = message.reply_to_message.from_user.id
    #         
    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–≤—Ç–æ–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    #         if from_user_id == to_user_id:
    #             return
    #         
    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    #         cooldown_minutes = int(os.getenv('GRATITUDE_COOLDOWN_MINUTES', '60'))
    #         if not self._check_gratitude_cooldown(from_user_id, to_user_id, cooldown_minutes):
    #             return
    #         
    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    #         min_length = int(os.getenv('MIN_MESSAGE_LENGTH_FOR_KARMA', '10'))
    #         if len(message.text) < min_length:
    #             return
    #         
    #         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    #         trigger_word = self._extract_gratitude_word(message.text)
    #         
    #         # –ù–∞—á–∏—Å–ª—è–µ–º –∫–∞—Ä–º—É
    #         from services.karma import KarmaManager
    #         karma_manager = KarmaManager(self.db, None)
    #         
    #         success = karma_manager.add_auto_karma(
    #             to_user_id=to_user_id,
    #             from_user_id=from_user_id,
    #             trigger_word=trigger_word,
    #             context=message.text,
    #             message_id=message.message_id
    #         )
    #         
    #         if success:
    #             # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
    #             to_user = self.db.get_user_by_id(to_user_id)
    #             to_username = f"@{to_user.username}" if to_user and to_user.username else f"ID{to_user_id}"
    #             
    #             self.bot.reply_to(
    #                 message,
    #                 f"{to_username} —Ç–≤–æ—è –∫–∞—Ä–º–∞ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ +1, –ø—Ä–æ–¥–æ–ª–∂–∞–π –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–æ–º –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö! üòÄ"
    #             )
    #             
    #             logger.info(f"–ê–≤—Ç–æ–∫–∞—Ä–º–∞: {from_user_id}‚Üí{to_user_id} +1 –∑–∞ '{trigger_word}'")
    #             
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_gratitude_message: {e}")
    
    # def _check_gratitude_cooldown(self, from_user_id: int, to_user_id: int, cooldown_minutes: int) -> bool:
    #     """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞—Ä–º—ã —ç—Ç–æ–π –ø–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    #     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª—è—Ç—å, False –µ—Å–ª–∏ –µ—â–µ —Ä–∞–Ω–æ
    #     return True  # –ó–∞–≥–ª—É—à–∫–∞
    
    # def _extract_gratitude_word(self, text: str) -> str:
    #     """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"""
    #     gratitude_words = [
    #         '—Å–ø–∞—Å–∏–±–æ', '—Å–ø—Å', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–æ–≥–æ–Ω—å', '–ø–æ–ª–µ–∑–Ω–æ',
    #         'thanks', 'thx', 'awesome', 'cool', 'nice'
    #     ]
    #     
    #     text_lower = text.lower()
    #     for word in gratitude_words:
    #         if word in text_lower:
    #             return word
    #     
    #     return '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å'
    
    # def _process_file_message(self, message: Message):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ü–õ–ê–ù 3)"""
    #     try:
    #         user_id = message.from_user.id
    #         
    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ñ–æ—Ä–º–µ
    #         if not self._is_user_in_form(user_id):
    #             return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ–æ—Ä–º
    #         
    #         # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    #         if message.photo:
    #             self._handle_photo_upload(message)
    #         elif message.document:
    #             self._handle_document_upload(message)
    #             
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _process_file_message: {e}")
    
    # def _handle_photo_upload(self, message: Message):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    #     try:
    #         user_id = message.from_user.id
    #         
    #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
    #         photo = message.photo[-1]  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    #         file_id = photo.file_id
    #         file_size = photo.file_size
    #         
    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    #         max_size_mb = int(os.getenv('SCREENSHOT_MAX_SIZE_MB', '10'))
    #         if file_size > max_size_mb * 1024 * 1024:
    #             self.bot.reply_to(
    #                 message,
    #                 f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size_mb}MB"
    #             )
    #             return
    #         
    #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ñ–æ—Ä–º—ã
    #         from services.forms import FormManager
    #         form_manager = FormManager(self.db, None)
    #         
    #         result = form_manager.add_screenshot(user_id, file_id, file_size)
    #         
    #         if result['success']:
    #             self.bot.reply_to(
    #                 message,
    #                 f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω! ({result['count']}/{result['max_count']})"
    #             )
    #         else:
    #             self.bot.reply_to(
    #                 message,
    #                 f"‚ùå {result['message']}"
    #             )
    #             
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ _handle_photo_upload: {e}")
    #         self.bot.reply_to(
    #             message,
    #             "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"
    #         )


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MessageHandler"""
    from database.manager import DatabaseManager
    from utils.security import SecurityManager
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MessageHandler...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db = DatabaseManager("sqlite:///:memory:")
    db.create_tables()
    
    security = SecurityManager([12345], [2, 3])
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ message handler
    message_handler = MessageHandler(None, db, security)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è URL
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è URL:")
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å—Å—ã–ª–∫–∞: https://example.com",
        "–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
        "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: http://test.org –∏ https://another.com",
        "–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–æ–∫"
    ]
    
    for text in test_texts:
        has_urls = message_handler._contains_urls(text)
        status = "‚úÖ –ï—Å—Ç—å URL" if has_urls else "‚ùå –ù–µ—Ç URL"
        print(f"‚Ä¢ '{text[:30]}...': {status}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MessageHandler –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")