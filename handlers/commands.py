"""
üí¨ Commands Handler - Do Presave Reminder Bot v25+
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è
"""

import re
from typing import Optional, List, Tuple
import telebot
from telebot.types import Message

from config import config
from database.manager import get_database_manager
from utils.security import (
    admin_required, user_rate_limit, security_manager, 
    Plan1Validators, Plan2Validators, ValidationError, AccessDeniedError
)
from utils.logger import get_logger, telegram_logger, karma_logger
from utils.helpers import (
    MessageFormatter, UserHelper, DataHelper, ConfigHelper, CommandParser
)

logger = get_logger(__name__)

class CommandHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot
        self.db = get_database_manager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self._register_commands()
        
        logger.info("üí¨ Command Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
        
        # ============================================
        # –ü–õ–ê–ù 1 - –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´
        # ============================================
        
        @self.bot.message_handler(commands=['start'])
        def handle_start(message: Message):
            self.cmd_start(message)
        
        @self.bot.message_handler(commands=['mystat'])
        @user_rate_limit('user_commands')
        def handle_mystat(message: Message):
            self.cmd_mystat(message)
        
        @self.bot.message_handler(commands=['enablebot'])
        @admin_required
        def handle_enable_bot(message: Message):
            self.cmd_enable_bot(message)
        
        @self.bot.message_handler(commands=['disablebot'])
        @admin_required
        def handle_disable_bot(message: Message):
            self.cmd_disable_bot(message)
        
        # –ö–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–æ–≤ –ª–∏–º–∏—Ç–æ–≤
        @self.bot.message_handler(commands=['setmode_conservative'])
        @admin_required
        def handle_set_conservative(message: Message):
            self.cmd_set_limit_mode(message, 'CONSERVATIVE')
        
        @self.bot.message_handler(commands=['setmode_normal'])
        @admin_required
        def handle_set_normal(message: Message):
            self.cmd_set_limit_mode(message, 'NORMAL')
        
        @self.bot.message_handler(commands=['setmode_burst'])
        @admin_required
        def handle_set_burst(message: Message):
            self.cmd_set_limit_mode(message, 'BURST')
        
        @self.bot.message_handler(commands=['setmode_adminburst'])
        @admin_required
        def handle_set_admin_burst(message: Message):
            self.cmd_set_limit_mode(message, 'ADMIN_BURST')
        
        @self.bot.message_handler(commands=['currentmode'])
        @admin_required
        def handle_current_mode(message: Message):
            self.cmd_current_mode(message)
        
        @self.bot.message_handler(commands=['reloadmodes'])
        @admin_required
        def handle_reload_modes(message: Message):
            self.cmd_reload_modes(message)
        
        # –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
        @self.bot.message_handler(commands=['last10links'])
        @admin_required
        def handle_last10_links(message: Message):
            self.cmd_recent_links(message, limit=10)
        
        @self.bot.message_handler(commands=['last30links'])
        @admin_required
        def handle_last30_links(message: Message):
            self.cmd_recent_links(message, limit=30)
        
        @self.bot.message_handler(commands=['clearlinks'])
        @admin_required
        def handle_clear_links(message: Message):
            self.cmd_clear_links(message)
        
        # ============================================
        # –ü–õ–ê–ù 2 - –ö–û–ú–ê–ù–î–´ –ö–ê–†–ú–´
        # ============================================
        
        if config.ENABLE_PLAN_2_FEATURES:
            @self.bot.message_handler(commands=['karma'])
            @admin_required
            def handle_karma(message: Message):
                self.cmd_karma(message)
            
            @self.bot.message_handler(commands=['karmastat'])
            @admin_required
            def handle_karma_stat(message: Message):
                self.cmd_karma_leaderboard(message)
            
            @self.bot.message_handler(commands=['presavestat'])
            @admin_required
            def handle_presave_stat(message: Message):
                self.cmd_requests_leaderboard(message)
            
            @self.bot.message_handler(commands=['ratiostat'])
            @admin_required
            def handle_ratio_stat(message: Message):
                self.cmd_ratio_command(message)
        
        # ============================================
        # –ü–õ–ê–ù 3 - –ö–û–ú–ê–ù–î–´ –ò–ò –ò –§–û–†–ú
        # ============================================
        
        if config.ENABLE_PLAN_3_FEATURES:
            @self.bot.message_handler(commands=['askpresave'])
            @user_rate_limit('form_submissions')
            def handle_ask_presave(message: Message):
                self.cmd_ask_presave(message)
            
            @self.bot.message_handler(commands=['claimpresave'])
            @user_rate_limit('form_submissions')
            def handle_claim_presave(message: Message):
                self.cmd_claim_presave(message)
            
            @self.bot.message_handler(commands=['checkapprovals'])
            @admin_required
            def handle_check_approvals(message: Message):
                self.cmd_check_approvals(message)
        
        # ============================================
        # –ü–õ–ê–ù 4 - –ö–û–ú–ê–ù–î–´ BACKUP
        # ============================================
        
        if config.ENABLE_PLAN_4_FEATURES:
            # –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ handlers/backup_commands.py
            pass
        
        # ============================================
        # –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
        # ============================================
        
        @self.bot.message_handler(commands=['linksby'])
        @admin_required
        def handle_links_by(message: Message):
            self.cmd_links_by_user(message)
        
        @self.bot.message_handler(commands=['approvesby'])
        @admin_required
        def handle_approves_by(message: Message):
            self.cmd_approves_by_user(message)
        
        @self.bot.message_handler(commands=['userratiostat'])
        @admin_required
        def handle_user_ratio_stat(message: Message):
            self.cmd_user_ratio_stat(message)
        
        # ============================================
        # –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
        # ============================================
        
        @self.bot.message_handler(commands=['keepalive'])
        @admin_required
        def handle_keep_alive(message: Message):
            self.cmd_keep_alive(message)
        
        @self.bot.message_handler(commands=['checksystem'])
        @admin_required
        def handle_check_system(message: Message):
            self.cmd_check_system(message)
        
        @self.bot.message_handler(commands=['botstatus'])
        @admin_required
        def handle_bot_status(message: Message):
            self.cmd_bot_status(message)
    
    # ============================================
    # –ü–õ–ê–ù 1 - –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´
    # ============================================
    
    def cmd_start(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            user_id = message.from_user.id
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.create_or_update_user(
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            
            is_admin = security_manager.is_admin(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            greeting = f"{MessageFormatter.get_emoji('music')} **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Do Presave Reminder Bot!**\n\n"
            
            if is_admin:
                greeting += f"{MessageFormatter.get_emoji('admin')} –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ **–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**.\n\n"
                greeting += f"{MessageFormatter.get_emoji('menu')} –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                greeting += f"‚Ä¢ `/menu` - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                greeting += f"‚Ä¢ `/help` - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                greeting += f"‚Ä¢ `/mystat` - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            else:
                greeting += f"{MessageFormatter.get_emoji('user')} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n\n"
                greeting += f"{MessageFormatter.get_emoji('info')} **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**\n"
                greeting += f"‚Ä¢ –ü—É–±–ª–∏–∫—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ—Å–µ–π–≤—ã –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–æ–ø–∏–∫–∞—Ö\n"
                greeting += f"‚Ä¢ –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –≤–∑–∞–∏–º–Ω—ã—Ö –ø—Ä–µ—Å–µ–π–≤–∞—Ö\n"
                greeting += f"‚Ä¢ –ë–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - —ç—Ç–æ –≤–∞–∂–Ω–æ!\n\n"
                greeting += f"{MessageFormatter.get_emoji('help')} –ö–æ–º–∞–Ω–¥–∞ `/help` –ø–æ–∫–∞–∂–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
            
            greeting += f"**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**\n"
            greeting += f"‚Ä¢ {MessageFormatter.format_url_domain('https://spotify.com')}\n"
            greeting += f"‚Ä¢ {MessageFormatter.format_url_domain('https://music.apple.com')}\n"
            greeting += f"‚Ä¢ {MessageFormatter.format_url_domain('https://music.youtube.com')}\n"
            greeting += f"‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n"
            
            greeting += f"{MessageFormatter.get_emoji('heart')} **–í–∑–∞–∏–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!**"
            
            self.bot.send_message(
                message.chat.id,
                greeting,
                parse_mode='Markdown'
            )
            
            telegram_logger.user_action(user_id, "–≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start", is_new_user=(not user))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    def cmd_mystat(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /mystat - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.db.get_user_stats(user_id)
            
            if not stats.get('user_info'):
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                self.db.create_or_update_user(
                    telegram_id=user_id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                stats = self.db.get_user_stats(user_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_text = UserHelper.format_user_stats_message(stats)
            
            self.bot.send_message(
                message.chat.id,
                stats_text,
                parse_mode='Markdown'
            )
            
            telegram_logger.user_action(user_id, "–∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mystat: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    @admin_required
    def cmd_enable_bot(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /enablebot - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            self.db.set_setting('bot_enabled', 'true', 'bool', '–í–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç')
            
            response = f"{MessageFormatter.get_emoji('success')} **–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            response += f"{MessageFormatter.get_emoji('info')} –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n"
            response += f"‚Ä¢ –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å—Å—ã–ª–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞\n"
            response += f"‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω—ã\n"
            response += f"‚Ä¢ –ú–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç\n\n"
            response += f"**–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤:** {ConfigHelper.get_current_limit_mode()}"
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞")
    
    @admin_required
    def cmd_disable_bot(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /disablebot - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            self.db.set_setting('bot_enabled', 'false', 'bool', '–í–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç')
            
            response = f"{MessageFormatter.get_emoji('warning')} **–ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            response += f"{MessageFormatter.get_emoji('info')} –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            response += f"‚Ä¢ –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
            response += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            response += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n"
            response += f"{MessageFormatter.get_emoji('admin')} **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏.**\n\n"
            response += f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/enablebot`"
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞")
    
    @admin_required
    def cmd_set_limit_mode(self, message: Message, mode: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤ API"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º
            if not Plan1Validators.validate_limit_mode(mode):
                self._send_error_response(message, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤: {mode}")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            self.db.set_setting('current_limit_mode', mode, 'string', '–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ API')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"{MessageFormatter.get_emoji('success')} **–†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
            response += ConfigHelper.format_limit_mode_info(mode)
            response += f"\n\n{MessageFormatter.get_emoji('info')} –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                f"–∏–∑–º–µ–Ω–∏–ª —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ {mode}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ {mode}: {e}")
            self._send_error_response(message, f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ {mode}")
    
    @admin_required
    def cmd_current_mode(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /currentmode - —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤"""
        try:
            current_mode = ConfigHelper.get_current_limit_mode()
            
            response = f"{MessageFormatter.get_emoji('system')} **–¢–ï–ö–£–©–ò–ô –†–ï–ñ–ò–ú –õ–ò–ú–ò–¢–û–í**\n\n"
            response += ConfigHelper.format_limit_mode_info(current_mode)
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                "–∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞")
    
    @admin_required
    def cmd_reload_modes(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /reloadmodes - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∂–∏–º–æ–≤"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            default_mode = config.DEFAULT_LIMIT_MODE
            self.db.set_setting('current_limit_mode', default_mode, 'string', '–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ API')
            
            response = f"{MessageFormatter.get_emoji('refresh')} **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!**\n\n"
            response += f"{MessageFormatter.get_emoji('success')} –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: **{default_mode}**\n\n"
            response += ConfigHelper.format_limit_mode_info(default_mode)
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤ –ª–∏–º–∏—Ç–æ–≤"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∂–∏–º–æ–≤: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    @admin_required
    def cmd_recent_links(self, message: Message, limit: int = 10):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏
            links = self.db.get_recent_links(limit=limit)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            response = DataHelper.format_links_list(links, max_links=limit)
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                f"–∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å—Å—ã–ª–æ–∫"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫")
    
    @admin_required
    def cmd_clear_links(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /clearlinks - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            deleted_count = self.db.clear_links(older_than_days=30)
            
            response = f"{MessageFormatter.get_emoji('success')} **–ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫ –æ—á–∏—â–µ–Ω–∞!**\n\n"
            response += f"{MessageFormatter.get_emoji('info')} –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: **{deleted_count}**\n"
            response += f"{MessageFormatter.get_emoji('time')} –£–¥–∞–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π\n\n"
            response += f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                f"–æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é —Å—Å—ã–ª–æ–∫ (—É–¥–∞–ª–µ–Ω–æ: {deleted_count})"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Å—ã–ª–æ–∫")
    
    # ============================================
    # –ü–õ–ê–ù 2 - –ö–û–ú–ê–ù–î–´ –ö–ê–†–ú–´
    # ============================================
    
    @admin_required
    def cmd_karma(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /karma @username +/-—á–∏—Å–ª–æ"""
        if not config.ENABLE_PLAN_2_FEATURES:
            self._send_feature_not_available(message, "–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã (–ü–ª–∞–Ω 2)")
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
            parsed = CommandParser.parse_karma_command(message.text)
            if not parsed:
                error_text = f"{MessageFormatter.get_emoji('error')} **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!**\n\n"
                error_text += f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:**\n"
                error_text += f"‚Ä¢ `/karma @username +5` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä–º—É\n"
                error_text += f"‚Ä¢ `/karma @username -3` - —É–±–∞–≤–∏—Ç—å –∫–∞—Ä–º—É\n\n"
                error_text += f"**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
                error_text += f"‚Ä¢ –ö–∞—Ä–º–∞: –æ—Ç 0 –¥–æ {config.MAX_KARMA}\n"
                error_text += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –æ—Ç -50 –¥–æ +50 –∑–∞ —Ä–∞–∑"
                
                self.bot.send_message(message.chat.id, error_text, parse_mode='Markdown')
                return
            
            username, karma_change = parsed
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã
            Plan2Validators.validate_karma_change(karma_change)
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = self.db.get_user_by_username(username)
            if not target_user:
                self._send_error_response(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã
            karma_record = self.db.change_karma(
                user_id=target_user.id,
                change=karma_change,
                admin_id=message.from_user.id,
                reason=f"–†—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            change_str = f"+{karma_change}" if karma_change > 0 else str(karma_change)
            user_display = UserHelper.get_user_display_name(target_user)
            
            response = f"{MessageFormatter.get_emoji('success')} **–ö–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!**\n\n"
            response += f"{MessageFormatter.get_emoji('user')} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_display}\n"
            response += f"{MessageFormatter.get_emoji('karma')} **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {change_str}\n"
            response += f"{MessageFormatter.get_emoji('stats')} **–ù–æ–≤–∞—è –∫–∞—Ä–º–∞:** {karma_record.karma_points}\n"
            response += f"{MessageFormatter.get_emoji('rank')} **–ó–≤–∞–Ω–∏–µ:** {karma_record.rank.value}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            from database.models import get_karma_threshold_for_next_rank
            next_threshold = get_karma_threshold_for_next_rank(karma_record.karma_points)
            if next_threshold:
                remaining = next_threshold - karma_record.karma_points
                progress_bar = MessageFormatter.create_progress_bar(
                    karma_record.karma_points, next_threshold
                )
                response += f"\n{MessageFormatter.get_emoji('progress')} **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_bar}\n"
                response += f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {remaining} –∫–∞—Ä–º—ã"
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                f"–∏–∑–º–µ–Ω–∏–ª –∫–∞—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞ {change_str}",
                target_user_id=target_user.id
            )
            
        except ValidationError as e:
            self._send_error_response(message, str(e))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /karma: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã")
    
    @admin_required
    def cmd_karma_leaderboard(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /karmastat - –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –∫–∞—Ä–º–µ"""
        if not config.ENABLE_PLAN_2_FEATURES:
            self._send_feature_not_available(message, "–õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã (–ü–ª–∞–Ω 2)")
            return
        
        try:
            leaderboard_data = self.db.get_karma_leaderboard(limit=10)
            leaderboard_text = DataHelper.format_leaderboard(leaderboard_data, 'karma')
            
            self.bot.send_message(
                message.chat.id,
                leaderboard_text,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                "–∑–∞–ø—Ä–æ—Å–∏–ª –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –∫–∞—Ä–º–µ"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∫–∞—Ä–º—ã: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
    
    @admin_required
    def cmd_requests_leaderboard(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /presavestat - –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –ø—Ä–æ—Å—å–±–∞–º"""
        try:
            leaderboard_data = self.db.get_requests_leaderboard(limit=10)
            leaderboard_text = DataHelper.format_leaderboard(leaderboard_data, 'requests')
            
            self.bot.send_message(
                message.chat.id,
                leaderboard_text,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                "–∑–∞–ø—Ä–æ—Å–∏–ª –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –ø—Ä–æ—Å—å–±–∞–º –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø—Ä–æ—Å—å–±: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
    
    @admin_required
    def cmd_ratio_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /ratiostat @username 15:12 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è"""
        if not config.ENABLE_PLAN_2_FEATURES:
            self._send_feature_not_available(message, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π (–ü–ª–∞–Ω 2)")
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
            parsed = CommandParser.parse_ratio_command(message.text)
            if not parsed:
                error_text = f"{MessageFormatter.get_emoji('error')} **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!**\n\n"
                error_text += f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:**\n"
                error_text += f"‚Ä¢ `/ratiostat @username 15:12`\n"
                error_text += f"‚Ä¢ `/ratiostat @username 20-8`\n\n"
                error_text += f"**–ì–¥–µ:**\n"
                error_text += f"‚Ä¢ 15 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö\n"
                error_text += f"‚Ä¢ 12 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä–º—ã"
                
                self.bot.send_message(message.chat.id, error_text, parse_mode='Markdown')
                return
            
            username, requests_count, karma_count = parsed
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            Plan2Validators.validate_ratio_format(f"{requests_count}:{karma_count}")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = self.db.get_user_by_username(username)
            if not target_user:
                self._send_error_response(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            success = self.db.update_user_ratio(target_user.id, requests_count, karma_count)
            
            if success:
                user_display = UserHelper.get_user_display_name(target_user)
                
                response = f"{MessageFormatter.get_emoji('success')} **–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                response += f"{MessageFormatter.get_emoji('user')} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_display}\n"
                response += f"{MessageFormatter.get_emoji('presave')} **–ü—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö:** {requests_count}\n"
                response += f"{MessageFormatter.get_emoji('karma')} **–ö–∞—Ä–º–∞:** {karma_count}\n"
                response += f"{MessageFormatter.get_emoji('progress')} **–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:** {requests_count}:{karma_count}\n\n"
                
                # –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if requests_count > 0:
                    efficiency = (karma_count / requests_count) * 100
                    response += f"**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {efficiency:.1f}% –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏"
                
                self.bot.send_message(
                    message.chat.id,
                    response,
                    parse_mode='Markdown'
                )
                
                telegram_logger.admin_action(
                    message.from_user.id,
                    f"–∏–∑–º–µ–Ω–∏–ª —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞ {requests_count}:{karma_count}",
                    target_user_id=target_user.id
                )
            else:
                self._send_error_response(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ")
            
        except ValidationError as e:
            self._send_error_response(message, str(e))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ratiostat: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è")
    
    # ============================================
    # –ü–õ–ê–ù 3 - –ö–û–ú–ê–ù–î–´ –ò–ò –ò –§–û–†–ú (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    def cmd_ask_presave(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /askpresave - –∑–∞–ø—Ä–æ—Å –ø—Ä–µ—Å–µ–π–≤–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ü–ª–∞–Ω–∞ 3)"""
        if not config.ENABLE_PLAN_3_FEATURES:
            self._send_feature_not_available(message, "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã (–ü–ª–∞–Ω 3)")
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º –≤ –ü–ª–∞–Ω–µ 3
        response = f"{MessageFormatter.get_emoji('loading')} **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n"
        response += f"–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 3."
        
        self.bot.send_message(message.chat.id, response, parse_mode='Markdown')
    
    def cmd_claim_presave(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /claimpresave - –∑–∞—è–≤–∫–∞ –æ –ø—Ä–µ—Å–µ–π–≤–µ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ü–ª–∞–Ω–∞ 3)"""
        if not config.ENABLE_PLAN_3_FEATURES:
            self._send_feature_not_available(message, "–°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ (–ü–ª–∞–Ω 3)")
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫ –≤ –ü–ª–∞–Ω–µ 3
        response = f"{MessageFormatter.get_emoji('loading')} **–°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n"
        response += f"–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 3."
        
        self.bot.send_message(message.chat.id, response, parse_mode='Markdown')
    
    @admin_required
    def cmd_check_approvals(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /checkapprovals - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ü–ª–∞–Ω–∞ 3)"""
        if not config.ENABLE_PLAN_3_FEATURES:
            self._send_feature_not_available(message, "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ (–ü–ª–∞–Ω 3)")
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –ü–ª–∞–Ω–µ 3
        response = f"{MessageFormatter.get_emoji('loading')} **–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n"
        response += f"–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 3."
        
        self.bot.send_message(message.chat.id, response, parse_mode='Markdown')
    
    # ============================================
    # –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
    # ============================================
    
    @admin_required
    def cmd_links_by_user(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /linksby @username - —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            username = CommandParser.parse_user_query(message.text)
            if not username:
                error_text = f"{MessageFormatter.get_emoji('error')} **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                error_text += f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:** `/linksby @username`"
                self.bot.send_message(message.chat.id, error_text, parse_mode='Markdown')
                return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = self.db.get_user_by_username(username)
            if not target_user:
                self._send_error_response(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_links = self.db.get_user_links(target_user.id, limit=20)
            
            user_display = UserHelper.get_user_display_name(target_user)
            
            response = f"{MessageFormatter.get_emoji('link')} **–°—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}**\n\n"
            
            if user_links:
                for i, link in enumerate(user_links[:10], 1):
                    domain = MessageFormatter.format_url_domain(link.url)
                    time_ago = MessageFormatter.format_time_ago(link.created_at)
                    response += f"{i}. {domain} ({time_ago})\n"
                
                if len(user_links) > 10:
                    response += f"\n... –∏ –µ—â—ë {len(user_links) - 10} —Å—Å—ã–ª–æ–∫"
                
                response += f"\n\n**–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫:** {len(user_links)}"
            else:
                response += f"–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                f"–∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}",
                target_user_id=target_user.id
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /linksby: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫")
    
    @admin_required
    def cmd_approves_by_user(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /approvesby @username - –∫–∞—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            username = CommandParser.parse_user_query(message.text)
            if not username:
                error_text = f"{MessageFormatter.get_emoji('error')} **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                error_text += f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:** `/approvesby @username`"
                self.bot.send_message(message.chat.id, error_text, parse_mode='Markdown')
                return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = self.db.get_user_by_username(username)
            if not target_user:
                self._send_error_response(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            user_display = UserHelper.get_user_display_name(target_user)
            
            response = f"{MessageFormatter.get_emoji('karma')} **–ö–∞—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}**\n\n"
            
            if config.ENABLE_PLAN_2_FEATURES:
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä–º—É
                karma_record = self.db.get_user_karma(target_user.id)
                
                if karma_record:
                    response += MessageFormatter.format_karma_info(karma_record, show_progress=True)
                    
                    # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä–º—ã
                    karma_history = self.db.get_karma_history(target_user.id, limit=5)
                    if karma_history:
                        response += f"\n\n{MessageFormatter.get_emoji('time')} **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n"
                        for change in karma_history:
                            change_str = f"+{change.change_amount}" if change.change_amount > 0 else str(change.change_amount)
                            time_ago = MessageFormatter.format_time_ago(change.created_at)
                            source = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" if change.is_automatic else "–∞–¥–º–∏–Ω–æ–º"
                            response += f"‚Ä¢ {change_str} ({source}, {time_ago})\n"
                else:
                    response += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
            else:
                response += f"–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 2."
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                f"–∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}",
                target_user_id=target_user.id
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /approvesby: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä–º—ã")
    
    @admin_required
    def cmd_user_ratio_stat(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /userratiostat @username - —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            username = CommandParser.parse_user_query(message.text)
            if not username:
                error_text = f"{MessageFormatter.get_emoji('error')} **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                error_text += f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:** `/userratiostat @username`"
                self.bot.send_message(message.chat.id, error_text, parse_mode='Markdown')
                return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = self.db.get_user_by_username(username)
            if not target_user:
                self._send_error_response(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.db.get_user_stats(target_user.id)
            user_display = UserHelper.get_user_display_name(target_user)
            
            response = f"{MessageFormatter.get_emoji('progress')} **–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}**\n\n"
            
            links_count = stats.get('links_count', 0)
            
            if config.ENABLE_PLAN_2_FEATURES and stats.get('karma_info'):
                karma_info = stats['karma_info']
                karma_points = karma_info['karma_points']
                
                response += f"{MessageFormatter.get_emoji('presave')} **–ü—Ä–æ—Å—å–± –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö:** {links_count}\n"
                response += f"{MessageFormatter.get_emoji('karma')} **–ö–∞—Ä–º–∞:** {karma_points}\n"
                response += f"{MessageFormatter.get_emoji('rank')} **–ó–≤–∞–Ω–∏–µ:** {karma_info['rank']}\n\n"
                
                if links_count > 0:
                    ratio = karma_points / links_count
                    efficiency = ratio * 100
                    
                    response += f"**–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:** {links_count}:{karma_points}\n"
                    response += f"**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {efficiency:.1f}% –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏\n\n"
                    
                    # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if efficiency >= 80:
                        assessment = f"{MessageFormatter.get_emoji('success')} –û—Ç–ª–∏—á–Ω–∞—è –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å"
                    elif efficiency >= 50:
                        assessment = f"{MessageFormatter.get_emoji('warning')} –•–æ—Ä–æ—à–∞—è –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å"
                    elif efficiency >= 25:
                        assessment = f"{MessageFormatter.get_emoji('info')} –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å"
                    else:
                        assessment = f"{MessageFormatter.get_emoji('error')} –ù–∏–∑–∫–∞—è –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å"
                    
                    response += f"**–û—Ü–µ–Ω–∫–∞:** {assessment}"
                else:
                    response += f"–ü—Ä–æ—Å—å–±—ã –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
            else:
                response += f"{MessageFormatter.get_emoji('link')} **–°—Å—ã–ª–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:** {links_count}\n"
                response += f"–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü–ª–∞–Ω–µ 2."
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                f"–∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}",
                target_user_id=target_user.id
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /userratiostat: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è")
    
    # ============================================
    # –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
    # ============================================
    
    @admin_required
    def cmd_keep_alive(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /keepalive - —Ç–µ—Å—Ç keep alive"""
        try:
            import time
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            health = self.db.health_check()
            
            response_time = (time.time() - start_time) * 1000
            
            response = f"{MessageFormatter.get_emoji('health')} **KEEP ALIVE TEST**\n\n"
            response += f"**–°—Ç–∞—Ç—É—Å:** {MessageFormatter.get_emoji('success')} –ê–∫—Ç–∏–≤–µ–Ω\n"
            response += f"**–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {response_time:.2f} –º—Å\n"
            response += f"**–ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:** {'‚úÖ' if health['database_connection'] == 'ok' else '‚ùå'}\n"
            response += f"**Render.com:** {'‚úÖ' if config.RENDER_EXTERNAL_URL else '‚ùå'}\n\n"
            response += f"–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                "–≤—ã–ø–æ–ª–Ω–∏–ª —Ç–µ—Å—Ç keep alive"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ keep alive: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    
    @admin_required
    def cmd_check_system(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /checksystem - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
            db_stats = self.db.get_database_stats()
            health = self.db.health_check()
            
            response = f"{MessageFormatter.get_emoji('system')} **–ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
            
            # –°—Ç–∞—Ç—É—Å –ë–î
            response += f"**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**\n"
            response += f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if health['database_connection'] == 'ok' else '‚ùå'}\n"
            response += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {MessageFormatter.format_number(db_stats['total_users'])}\n"
            response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ–¥–µ–ª—è): {MessageFormatter.format_number(db_stats['active_users_week'])}\n"
            response += f"‚Ä¢ –°—Å—ã–ª–æ–∫: {MessageFormatter.format_number(db_stats['total_links'])}\n"
            
            if config.ENABLE_PLAN_2_FEATURES:
                response += f"‚Ä¢ –û–±—â–∞—è –∫–∞—Ä–º–∞: {MessageFormatter.format_number(db_stats['total_karma_points'])}\n"
            
            # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–æ–≤
            response += f"\n**–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã:**\n"
            response += f"‚Ä¢ –ü–ª–∞–Ω 1: ‚úÖ –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n"
            response += f"‚Ä¢ –ü–ª–∞–Ω 2: {'‚úÖ' if config.ENABLE_PLAN_2_FEATURES else '‚ùå'} –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã\n"
            response += f"‚Ä¢ –ü–ª–∞–Ω 3: {'‚úÖ' if config.ENABLE_PLAN_3_FEATURES else '‚ùå'} –ò–ò –∏ —Ñ–æ—Ä–º—ã\n"
            response += f"‚Ä¢ –ü–ª–∞–Ω 4: {'‚úÖ' if config.ENABLE_PLAN_4_FEATURES else '‚ùå'} Backup —Å–∏—Å—Ç–µ–º–∞\n"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            response += f"\n**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            response += f"‚Ä¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if ConfigHelper.is_bot_enabled() else '‚ùå'}\n"
            response += f"‚Ä¢ –†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤: {ConfigHelper.get_current_limit_mode()}\n"
            response += f"‚Ä¢ Whitelist —Ç–æ–ø–∏–∫–æ–≤: {len(config.WHITELIST_THREADS)}\n"
            response += f"‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {len(config.ADMIN_IDS)}\n"
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                "–≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    @admin_required
    def cmd_bot_status(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /botstatus - —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        try:
            from datetime import datetime, timezone
            import psutil
            import os
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            response = f"{MessageFormatter.get_emoji('stats')} **–°–¢–ê–¢–£–° –ë–û–¢–ê**\n\n"
            
            # –í–µ—Ä—Å–∏—è –∏ —Ä–µ–∂–∏–º
            response += f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            response += f"‚Ä¢ –í–µ—Ä—Å–∏—è: v25+ (–ü–æ—ç—Ç–∞–ø–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)\n"
            response += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if ConfigHelper.is_bot_enabled() else '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}\n"
            response += f"‚Ä¢ –†–µ–∂–∏–º: {ConfigHelper.get_current_limit_mode()}\n"
            response += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {MessageFormatter.format_time_ago(datetime.now(timezone.utc))}\n\n"
            
            # –ü–∞–º—è—Ç—å –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            try:
                process = psutil.Process(os.getpid())
                memory_mb = process.memory_info().rss / 1024 / 1024
                cpu_percent = process.cpu_percent()
                
                response += f"**–†–µ—Å—É—Ä—Å—ã:**\n"
                response += f"‚Ä¢ –ü–∞–º—è—Ç—å: {memory_mb:.1f} MB\n"
                response += f"‚Ä¢ CPU: {cpu_percent:.1f}%\n\n"
            except:
                response += f"**–†–µ—Å—É—Ä—Å—ã:** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            db_stats = self.db.get_database_stats()
            response += f"**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**\n"
            response += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats['total_users']}\n"
            response += f"‚Ä¢ –°—Å—ã–ª–æ–∫: {db_stats['total_links']}\n"
            
            if config.ENABLE_PLAN_2_FEATURES:
                response += f"‚Ä¢ –ö–∞—Ä–º–∞: {db_stats['total_karma_points']}\n"
            
            if config.ENABLE_PLAN_3_FEATURES:
                response += f"‚Ä¢ –ò–ò –±–µ—Å–µ–¥—ã: {db_stats.get('total_ai_conversations', 0)}\n"
            
            if config.ENABLE_PLAN_4_FEATURES:
                response += f"‚Ä¢ Backup: {db_stats.get('total_backups', 0)}\n"
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
            
            telegram_logger.admin_action(
                message.from_user.id,
                "–∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self._send_error_response(message, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    # ============================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ============================================
    
    def _send_error_response(self, message: Message, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            full_error = f"{MessageFormatter.get_emoji('error')} {error_text}\n\n"
            full_error += f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/resetmenu` –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            
            self.bot.send_message(
                message.chat.id,
                full_error,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def _send_feature_not_available(self, message: Message, feature_name: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            response = f"{MessageFormatter.get_emoji('loading')} **–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n"
            response += f"**{feature_name}** –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞–Ω–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è.\n\n"
            response += f"{MessageFormatter.get_emoji('info')} –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            response += f"{MessageFormatter.get_emoji('time')} –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–µ–ª–∏–∑: –ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n\n"
            response += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            
            self.bot.send_message(
                message.chat.id,
                response,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================

def init_command_handlers(bot: telebot.TeleBot) -> CommandHandler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    return CommandHandler(bot)

# ============================================
# –≠–ö–°–ü–û–†–¢
# ============================================

__all__ = ['CommandHandler', 'init_command_handlers']

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Command Handlers...")
    print("‚úÖ –ú–æ–¥—É–ª—å commands.py –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
