"""
–¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é Do Presave Reminder Bot v25+
–í–°–Å —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –º–µ–Ω—é –±–æ—Ç–∞: –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, "–ù–ê–ó–ê–î", "–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ"

–ü–õ–ê–ù 1: –ë–∞–∑–æ–≤–æ–µ –º–µ–Ω—é (–ê–ö–¢–ò–í–ù–û)
–ü–õ–ê–ù 2: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ò)
–ü–õ–ê–ù 3: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ò–ò –∏ —Ñ–æ—Ä–º (–ó–ê–ì–õ–£–®–ö–ò)  
–ü–õ–ê–ù 4: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è backup (–ó–ê–ì–õ–£–®–ö–ò)
"""

from typing import List, Dict, Any, Optional
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

from database.manager import DatabaseManager
from utils.security import SecurityManager, admin_required, whitelist_required
from utils.logger import get_logger, log_user_action
from utils.helpers import format_user_mention
from datetime import datetime

logger = get_logger(__name__)

class MenuHandler:
    """–¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–µ–Ω—é"""
    
    def __init__(self, bot: telebot.TeleBot, db_manager: DatabaseManager, security_manager: SecurityManager):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é"""
        self.bot = bot
        self.db = db_manager
        self.security = security_manager
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤
        self.menu_structure = self._build_menu_structure()
        
        logger.info("MenuHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _build_menu_structure(self) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤"""
        return {
            'main': {
                'title': 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (v25+)',
                'description': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º!',
                'buttons': [
                    ('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'menu_mystats'),
                    ('üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –¢–æ–ø-10', 'menu_leaderboard'),
                    ('‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è', 'menu_actions'),
                    ('üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'menu_analytics'),
                    ('üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 'menu_diagnostics'),
                    # –ü–õ–ê–ù 3: –ö–Ω–æ–ø–∫–∞ –ò–ò (–ó–ê–ì–õ–£–®–ö–ê)
                    # ('ü§ñ –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'menu_ai'),
                    ('‚ùì –ü–æ–º–æ—â—å', 'menu_help')
                ]
            },

            'mystats': {
                'title': 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                'description': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                'buttons': [
                    ('üìé –ú–æ–∏ —Å—Å—ã–ª–∫–∏', 'mystats_my_links'),
                    ('üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º', 'mystats_daily_activity'),
                    ('üèÜ –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥', 'mystats_my_ranking'),
                    # –ü–õ–ê–ù 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ò)
                    # ('‚≠ê –ú–æ—è –∫–∞—Ä–º–∞', 'mystats_my_karma'),
                    # ('üéñÔ∏è –ú–æ–µ –∑–≤–∞–Ω–∏–µ', 'mystats_my_rank'),
                    ('üîô –ù–∞–∑–∞–¥', 'menu_main'),
                    ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu_main')
                ]
            },

            'leaderboard': {
                'title': 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –¢–æ–ø-10',
                'description': '–†–µ–π—Ç–∏–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
                'buttons': [
                    ('üìù –ü–æ –ø—Ä–æ—Å—å–±–∞–º –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö', 'leaderboard_requests'),  # –ü–õ–ê–ù 2
                    ('üèÜ –ü–æ –∫–∞—Ä–º–µ', 'leaderboard_karma'),  # –ü–õ–ê–ù 2
                    ('‚öñÔ∏è –ü–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –ü—Ä–æ—Å—å–±–∞-–ö–∞—Ä–º–∞', 'leaderboard_ratio'),  # –ü–õ–ê–ù 2
                    ('üîô –ù–∞–∑–∞–¥', 'menu_main'),
                    ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu_main')
                ]
            },
            
            'actions': {
                'title': '‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è',
                'description': '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º',
                'buttons': [
                    # –ü–õ–ê–ù 3: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ò)
                    # ('üéµ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–µ—Å–µ–π–≤–µ', 'action_ask_presave'),
                    # ('‚úÖ –ó–∞—è–≤–∏—Ç—å –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–º –ø—Ä–µ—Å–µ–π–≤–µ', 'action_claim_presave'),
                    # ('üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã', 'action_check_approvals'),
                    
                    ('üìé –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Å—ã–ª–æ–∫', 'action_last30links'),
                    ('üìé –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫', 'action_last10links'),
                    ('üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', 'menu_settings'),
                    ('üîô –ù–∞–∑–∞–¥', 'menu_main'),
                    ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu_main')
                ]
            },
            
            'settings': {
                'title': 'üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
                'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ —Ä–µ–∂–∏–º–∞–º–∏',
                'buttons': [
                    ('‚ö° –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤', 'menu_limits'),
                    ('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∂–∏–º—ã', 'action_reload_modes'),
                    ('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞', 'action_enable_bot'),
                    ('‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞', 'action_disable_bot'),
                    # –ü–õ–ê–ù 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ó–ê–ì–õ–£–®–ö–ê)
                    # ('üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'action_edit_reminder'),
                    ('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Å—ã–ª–æ–∫', 'action_clear_links'),
                    # –ü–õ–ê–ù 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∏—Å—Ç–∫–∏ (–ó–ê–ì–õ–£–®–ö–ò)
                    # ('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–ø–ø—Ä—É–≤—ã', 'action_clear_approvals'),
                    # ('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å—å–±', 'action_clear_asks'),
                    ('üîô –ù–∞–∑–∞–¥', 'menu_actions'),
                    ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu_main')
                ]
            },
            
            'limits': {
                'title': '‚ö° –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ API',
                'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ Telegram API',
                'buttons': [
                    ('üêå Conservative', 'limit_conservative'),
                    ('‚ö° Normal', 'limit_normal'),
                    ('üöÄ Burst (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)', 'limit_burst'),
                    ('‚ö°‚ö° Admin Burst', 'limit_admin_burst'),
                    ('üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º', 'action_current_mode'),
                    ('üîô –ù–∞–∑–∞–¥', 'menu_settings'),
                    ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu_main')
                ]
            },
            
            'analytics': {
                'title': 'üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                'description': '–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                'buttons': [
                    ('üîó –°—Å—ã–ª–∫–∏ –ø–æ @username', 'analytics_links_by_user'),
                    # –ü–õ–ê–ù 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ê)
                    # ('üèÜ –ö–∞—Ä–º–∞ –ø–æ @username', 'analytics_karma_by_user'),
                    # ('‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ @username', 'analytics_ratio_by_user'),
                    ('üîô –ù–∞–∑–∞–¥', 'menu_main'),
                    ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu_main')
                ]
            },
            
            'diagnostics': {
                'title': 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                'description': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã',
                'buttons': [
                    ('üíì –¢–µ—Å—Ç Keep Alive', 'diag_keepalive'),
                    ('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã', 'diag_system_check'),
                    ('üìä –°—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'diag_bot_status'),
                    # –ü–õ–ê–ù 4: Backup –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–ó–ê–ì–õ–£–®–ö–ê)
                    # ('üíæ –°—Ç–∞—Ç—É—Å backup', 'diag_backup_status'),
                    ('üîô –ù–∞–∑–∞–¥', 'menu_main'),
                    ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu_main')
                ]
            },
            
            # –ü–õ–ê–ù 3: –ú–µ–Ω—é –ò–ò (–ó–ê–ì–õ–£–®–ö–ê)
            # 'ai': {
            #     'title': 'ü§ñ –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
            #     'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π',
            #     'buttons': [
            #         ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò', 'ai_settings'),
            #         ('üìñ –°–ª–æ–≤–∞—Ä—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π', 'ai_gratitude_dict'),
            #         ('üìà –ò—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–π', 'ai_auto_karma_log'),
            #         ('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò', 'ai_stats'),
            #         ('üîô –ù–∞–∑–∞–¥', 'menu_main'),
            #         ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu_main')
            #     ]
            # },
            
            'help': {
                'title': '‚ùì –ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã',
                'description': '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                'buttons': [
                    ('üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', 'help_commands'),
                    ('üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'help_user_guide'),
                    ('üîß –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∞', 'help_admin_guide'),
                    ('üîô –ù–∞–∑–∞–¥', 'menu_main'),
                    ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu_main')
                ]
            }
        }
    
    def create_keyboard(self, menu_key: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é"""
        if menu_key not in self.menu_structure:
            return self.create_keyboard('main')
        
        menu = self.menu_structure[menu_key]
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        for button_text, callback_data in menu['buttons']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞–Ω–æ–≤
            if self._is_button_available(callback_data):
                keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
                dev_text = f"{button_text} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
                keyboard.add(InlineKeyboardButton(dev_text, callback_data=f"dev_{callback_data}"))
        
        return keyboard
    
    def _is_button_available(self, callback_data: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        # –ü–õ–ê–ù 2: –§—É–Ω–∫—Ü–∏–∏ –∫–∞—Ä–º—ã
        plan2_callbacks = [
            'leaderboard_requests', 'leaderboard_karma', 'leaderboard_ratio',
            'analytics_karma_by_user', 'analytics_ratio_by_user'
        ]
        
        # –ü–õ–ê–ù 3: –§—É–Ω–∫—Ü–∏–∏ –ò–ò –∏ —Ñ–æ—Ä–º
        plan3_callbacks = [
            'action_ask_presave', 'action_claim_presave', 'action_check_approvals',
            'action_edit_reminder', 'action_clear_approvals', 'action_clear_asks',
            'menu_ai', 'ai_settings', 'ai_gratitude_dict', 'ai_auto_karma_log', 'ai_stats'
        ]
        
        # –ü–õ–ê–ù 4: –§—É–Ω–∫—Ü–∏–∏ backup
        plan4_callbacks = [
            'diag_backup_status', 'action_backup_download', 'action_backup_help'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º feature flags
        if callback_data in plan2_callbacks:
            return self.db.get_setting('karma_enabled', False)
        elif callback_data in plan3_callbacks:
            return self.db.get_setting('ai_enabled', False) or self.db.get_setting('forms_enabled', False)
        elif callback_data in plan4_callbacks:
            return self.db.get_setting('backup_enabled', False)
        
        # –ü–õ–ê–ù 1: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ
        return True
    
    def get_menu_message(self, menu_key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω—é"""
        if menu_key not in self.menu_structure:
            menu_key = 'main'
        
        menu = self.menu_structure[menu_key]
        
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        message_parts = [
            f"<b>{menu['title']}</b>",
            "",
            menu['description']
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ–Ω—é
        if menu_key == 'main':
            message_parts.extend([
                "",
                "üîß <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>",
                f"‚Ä¢ –ë–æ—Ç: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.db.get_setting('bot_enabled', True) else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}",
                f"‚Ä¢ –†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤: {self._get_current_limit_emoji()} {self.db.get_setting('current_limit_mode', 'BURST')}",
                # –ü–õ–ê–ù 2: –°—Ç–∞—Ç—É—Å –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ê)
                # f"‚Ä¢ –ö–∞—Ä–º–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if self.db.get_setting('karma_enabled', False) else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–∞'}",
                # –ü–õ–ê–ù 3: –°—Ç–∞—Ç—É—Å –ò–ò (–ó–ê–ì–õ–£–®–ö–ê)
                # f"‚Ä¢ –ò–ò: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.db.get_setting('ai_enabled', False) else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}",
                # –ü–õ–ê–ù 4: –°—Ç–∞—Ç—É—Å backup (–ó–ê–ì–õ–£–®–ö–ê)
                # f"‚Ä¢ Backup: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.db.get_setting('backup_enabled', False) else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}",
            ])
        
        elif menu_key == 'limits':
            current_mode = self.db.get_setting('current_limit_mode', 'BURST')
            message_parts.extend([
                "",
                f"üìä <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {self._get_current_limit_emoji()} {current_mode}",
                "",
                "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:</b>",
                "‚Ä¢ üêå <b>Conservative:</b> 60/—á–∞—Å, –∫—É–ª–¥–∞—É–Ω 60—Å",
                "‚Ä¢ ‚ö° <b>Normal:</b> 180/—á–∞—Å, –∫—É–ª–¥–∞—É–Ω 20—Å", 
                "‚Ä¢ üöÄ <b>Burst:</b> 600/—á–∞—Å, –∫—É–ª–¥–∞—É–Ω 6—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
                "‚Ä¢ ‚ö°‚ö° <b>Admin Burst:</b> 1200/—á–∞—Å, –∫—É–ª–¥–∞—É–Ω 3—Å"
            ])
        
        elif menu_key == 'diagnostics':
            stats = self.db.get_basic_stats()
            message_parts.extend([
                "",
                "üìä <b>–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}",
                f"‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {stats.get('total_admins', 0)}",
                f"‚Ä¢ –°—Å—ã–ª–æ–∫ –≤—Å–µ–≥–æ: {stats.get('total_links', 0)}",
                f"‚Ä¢ –°—Å—ã–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {stats.get('links_today', 0)}",
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_users_week', 0)}"
            ])
        
        return "\n".join(message_parts)
    
    def _get_current_limit_emoji(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        mode = self.db.get_setting('current_limit_mode', 'BURST')
        emoji_map = {
            'CONSERVATIVE': 'üêå',
            'NORMAL': '‚ö°',
            'BURST': 'üöÄ',
            'ADMIN_BURST': '‚ö°‚ö°'
        }
        return emoji_map.get(mode, 'üöÄ')
    
    # ============================================
    # –ö–û–ú–ê–ù–î–´ –ú–ï–ù–Æ
    # ============================================
    
    @admin_required
    @whitelist_required
    def cmd_menu(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id –°–†–ê–ó–£, –¥–æ try –±–ª–æ–∫–∞
        thread_id = getattr(message, 'message_thread_id', None)
        
        try:
            user_id = message.from_user.id
            chat_id = message.chat.id
            chat_type = message.chat.type
            
            # –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.info(f"üîç DEBUG menu.py cmd_menu: user={user_id}, chat={chat_id}, type={chat_type}, thread={thread_id}")
            
            log_user_action(logger, user_id, "–æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            text = self.get_menu_message('main')
            keyboard = self.create_keyboard('main')
            
            # –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.info(f"üîç DEBUG –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤ chat_id={chat_id}")
            
            self.bot.send_message(
                chat_id,  # ‚Üê –Ø–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id
                text,
                reply_markup=keyboard,
                parse_mode='HTML',
                message_thread_id=thread_id
            )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ cmd_menu: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /resetmenu",
                message_thread_id=getattr(message, 'message_thread_id', None)
            )
    
    @admin_required
    @whitelist_required
    def cmd_resetmenu(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /resetmenu - —Å–±—Ä–æ—Å –º–µ–Ω—é"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id –°–†–ê–ó–£, –¥–æ try –±–ª–æ–∫–∞
        thread_id = getattr(message, 'message_thread_id', None)
        
        try:
            user_id = message.from_user.id
            chat_id = message.chat.id
            chat_type = message.chat.type
            
            # –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.info(f"üîç DEBUG menu.py cmd_resetmenu: user={user_id}, chat={chat_id}, type={chat_type}, thread={thread_id}")
            
            log_user_action(logger, user_id, "—Å–±—Ä–æ—Å–∏–ª –º–µ–Ω—é")
            
            # –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.info(f"üîç DEBUG –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–±—Ä–æ—Å –≤ chat_id={chat_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ
            self.bot.send_message(
                chat_id,  # ‚Üê –Ø–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id
                "üîÑ <b>–ú–µ–Ω—é —Å–±—Ä–æ—à–µ–Ω–æ!</b>\n\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞...",
                parse_mode='HTML',
                message_thread_id=thread_id
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
            text = self.get_menu_message('main')
            keyboard = self.create_keyboard('main')
            
            # –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.info(f"üîç DEBUG –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –≤ chat_id={chat_id}")
            
            self.bot.send_message(
                chat_id,  # ‚Üê –Ø–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id
                text,
                reply_markup=keyboard,
                parse_mode='HTML',
                message_thread_id=thread_id
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ cmd_resetmenu: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–µ–Ω—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                message_thread_id=getattr(message, 'message_thread_id', None)
            )
    
    # ============================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í –ú–ï–ù–Æ
    # ============================================
    
    def handle_menu_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback'–æ–≤ –º–µ–Ω—é"""
        try:
            user_id = callback_query.from_user.id
            data = callback_query.data
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
            if not self.security.validate_admin_callback(callback_query):
                self.bot.answer_callback_query(
                    callback_query.id,
                    "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                    show_alert=True
                )
                return
            
            log_user_action(logger, user_id, f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –º–µ–Ω—é: {data}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
            if data.startswith('menu_'):
                self._handle_menu_navigation(callback_query)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            elif data.startswith('dev_'):
                self._handle_dev_function(callback_query)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (–ü–õ–ê–ù 2)
            elif data.startswith('leaderboard_'):
                self._handle_leaderboard_action(callback_query)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
            elif data.startswith('action_'):
                self._handle_action(callback_query)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–º–∏—Ç–æ–≤
            elif data.startswith('limit_'):
                self._handle_limit_setting(callback_query)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            elif data.startswith('analytics_'):
                self._handle_analytics_action(callback_query)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            elif data.startswith('diag_'):
                self._handle_diagnostics_action(callback_query)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏
            elif data.startswith('help_'):
                self._handle_help_action(callback_query)
            
            # –ü–õ–ê–ù 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò (–ó–ê–ì–õ–£–®–ö–ò)
            # elif data.startswith('ai_'):
            #     self._handle_ai_action(callback_query)
            
            else:
                self.bot.answer_callback_query(
                    callback_query.id,
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ handle_menu_callback: {e}")
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è"
            )
    
    def _handle_menu_navigation(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
        data = callback_query.data
        menu_key = data.replace('menu_', '')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é
        text = self.get_menu_message(menu_key)
        keyboard = self.create_keyboard(menu_key)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.bot.edit_message_text(
            text,
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        self.bot.answer_callback_query(callback_query.id)
    
    def _handle_dev_function(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
        original_action = callback_query.data.replace('dev_', '')
        
        self.bot.answer_callback_query(
            callback_query.id,
            "üöß –ë—Ä–æ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–∞–≤–∞–π –Ω–µ —Å–µ–π—á–∞—Å",
            show_alert=True
        )
    
    def _handle_leaderboard_action(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
        data = callback_query.data
        
        # –ü–õ–ê–ù 2: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤ (–ó–ê–ì–õ–£–®–ö–ê)
        if data == 'leaderboard_requests':
            # leaderboard_text = self._generate_requests_leaderboard()
            leaderboard_text = "üöß –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –ø—Ä–æ—Å—å–±–∞–º –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ü–õ–ê–ù–ï 2"
        elif data == 'leaderboard_karma':
            # leaderboard_text = self._generate_karma_leaderboard()
            leaderboard_text = "üöß –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –∫–∞—Ä–º–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ü–õ–ê–ù–ï 2"
        elif data == 'leaderboard_ratio':
            # leaderboard_text = self._generate_ratio_leaderboard()
            leaderboard_text = "üöß –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ü–õ–ê–ù–ï 2"
        else:
            leaderboard_text = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.bot.edit_message_text(
            leaderboard_text,
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=self.create_keyboard('leaderboard'),
            parse_mode='HTML'
        )
        
        self.bot.answer_callback_query(callback_query.id)
    
    def _handle_action(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        data = callback_query.data
        
        if data == 'action_last30links':
            self._show_recent_links(callback_query, 30)
        elif data == 'action_last10links':
            self._show_recent_links(callback_query, 10)
        elif data == 'action_enable_bot':
            self._toggle_bot_status(callback_query, True)
        elif data == 'action_disable_bot':
            self._toggle_bot_status(callback_query, False)
        elif data == 'action_clear_links':
            self._clear_links(callback_query)
        elif data == 'action_current_mode':
            self._show_current_mode(callback_query)
        elif data == 'action_reload_modes':
            self._reload_modes(callback_query)
        elif data == 'mystats_my_links':
            self._show_my_links(callback_query)
        elif data == 'mystats_daily_activity':
            self._show_daily_activity(callback_query)
        elif data == 'mystats_my_ranking':
            self._show_my_ranking(callback_query)
        else:
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            )
    
    def _show_recent_links(self, callback_query, count: int):
        """–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
        try:
            links = self.db.get_recent_links(count)
            
            if not links:
                text = f"üìé <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {count} —Å—Å—ã–ª–æ–∫</b>\n\nü§∑ –°—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç"
            else:
                text_parts = [f"üìé <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {count} —Å—Å—ã–ª–æ–∫</b>\n"]
                
                for i, link in enumerate(links, 1):
                    user = self.db.get_user_by_id(link.user_id)
                    username = f"@{user.username}" if user and user.username else f"ID{link.user_id}"
                    date_str = link.created_at.strftime("%d.%m %H:%M")
                    
                    # –û–±—Ä–µ–∑–∞–µ–º URL –µ—Å–ª–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π
                    display_url = link.url if len(link.url) <= 50 else link.url[:47] + "..."
                    
                    text_parts.append(f"{i}. {username} ({date_str})")
                    text_parts.append(f"   üîó {display_url}")
                    
                    if i < len(links):
                        text_parts.append("")
                
                text = "\n".join(text_parts)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                text,
                callback_query.message.chat.id,
                callback_query.message.message_id,
                reply_markup=self.create_keyboard('actions'),
                parse_mode='HTML'
            )
            
            self.bot.answer_callback_query(callback_query.id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _show_recent_links: {e}")
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫"
            )
    
    def _toggle_bot_status(self, callback_query, enabled: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            self.db.set_setting('bot_enabled', enabled, 'bool', 
                               '–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞', callback_query.from_user.id)
            
            status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if enabled else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            emoji = "‚úÖ" if enabled else "‚è∏Ô∏è"
            
            self.bot.answer_callback_query(
                callback_query.id,
                f"{emoji} –ë–æ—Ç {status_text}",
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            text = self.get_menu_message('main')
            keyboard = self.create_keyboard('main')
            
            self.bot.edit_message_text(
                text,
                callback_query.message.chat.id,
                callback_query.message.message_id,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _toggle_bot_status: {e}")
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
            )
    
    def _clear_links(self, callback_query):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫"""
        try:
            count = self.db.clear_all_links()
            
            self.bot.answer_callback_query(
                callback_query.id,
                f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {count}",
                show_alert=True
            )
            
            # –û—Å—Ç–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            text = self.get_menu_message('settings')
            keyboard = self.create_keyboard('settings')
            
            self.bot.edit_message_text(
                text,
                callback_query.message.chat.id,
                callback_query.message.message_id,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _clear_links: {e}")
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Å—ã–ª–æ–∫"
            )
    
    def _handle_limit_setting(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤"""
        data = callback_query.data
        mode_map = {
            'limit_conservative': 'CONSERVATIVE',
            'limit_normal': 'NORMAL',
            'limit_burst': 'BURST',
            'limit_admin_burst': 'ADMIN_BURST'
        }
        
        if data in mode_map:
            new_mode = mode_map[data]
            self.db.set_setting('current_limit_mode', new_mode, 'string',
                               '–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ API', callback_query.from_user.id)
            
            emoji_map = {
                'CONSERVATIVE': 'üêå',
                'NORMAL': '‚ö°',
                'BURST': 'üöÄ',
                'ADMIN_BURST': '‚ö°‚ö°'
            }
            
            self.bot.answer_callback_query(
                callback_query.id,
                f"{emoji_map[new_mode]} –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_mode}",
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ª–∏–º–∏—Ç–æ–≤
            text = self.get_menu_message('limits')
            keyboard = self.create_keyboard('limits')
            
            self.bot.edit_message_text(
                text,
                callback_query.message.chat.id,
                callback_query.message.message_id,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º"
            )
    
    def _show_current_mode(self, callback_query):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        current_mode = self.db.get_setting('current_limit_mode', 'BURST')
        emoji = self._get_current_limit_emoji()
        
        self.bot.answer_callback_query(
            callback_query.id,
            f"üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {emoji} {current_mode}",
            show_alert=True
        )
    
    def _reload_modes(self, callback_query):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∂–∏–º–æ–≤ –ª–∏–º–∏—Ç–æ–≤"""
        # –ü–õ–ê–ù 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        self.bot.answer_callback_query(
            callback_query.id,
            "üîÑ –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            show_alert=True
        )
    
    def _handle_analytics_action(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        data = callback_query.data
        
        if data == 'analytics_links_by_user':
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id –¥–ª—è callback_query
            thread_id = getattr(callback_query.message, 'message_thread_id', None)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º username —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.bot.answer_callback_query(callback_query.id)
            self.bot.send_message(
                callback_query.message.chat.id,
                "üë§ <b>–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @username",
                parse_mode='HTML',
                message_thread_id=thread_id
            )
        # –ü–õ–ê–ù 2: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ó–ê–ì–õ–£–®–ö–ò)
        # elif data == 'analytics_karma_by_user':
        #     # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞—Ä–º—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # elif data == 'analytics_ratio_by_user':
        #     # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        else:
            self.bot.answer_callback_query(
                callback_query.id,
                "üöß –≠—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞–Ω–∞—Ö"
            )
    
    def _handle_diagnostics_action(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        data = callback_query.data
        
        if data == 'diag_keepalive':
            self._test_keepalive(callback_query)
        elif data == 'diag_system_check':
            self._system_check(callback_query)
        elif data == 'diag_bot_status':
            self._show_bot_status(callback_query)
        else:
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
            )
    
    def _test_keepalive(self, callback_query):
        """–¢–µ—Å—Ç keep-alive —Å–∏—Å—Ç–µ–º—ã"""
        # –ü–õ–ê–ù 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        self.bot.answer_callback_query(
            callback_query.id,
            "üíì Keep-alive —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω.",
            show_alert=True
        )
    
    def _system_check(self, callback_query):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            checks = {
                'database': self._check_database(),
                'settings': self._check_settings(),
                'admin_access': True,  # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, —Ç–æ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å
            }
            
            all_ok = all(checks.values())
            
            text_parts = [
                "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n",
                f"üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if checks['database'] else '‚ùå'}",
                f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {'‚úÖ' if checks['settings'] else '‚ùå'}",
                f"üëë –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø: {'‚úÖ' if checks['admin_access'] else '‚ùå'}",
                "",
                f"üìä <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {'‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç' if all_ok else '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã'}"
            ]
            
            self.bot.edit_message_text(
                "\n".join(text_parts),
                callback_query.message.chat.id,
                callback_query.message.message_id,
                reply_markup=self.create_keyboard('diagnostics'),
                parse_mode='HTML'
            )
            
            self.bot.answer_callback_query(callback_query.id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _system_check: {e}")
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
            )
    
    def _check_database(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            stats = self.db.get_basic_stats()
            return 'total_users' in stats
        except:
            return False
    
    def _check_settings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —á–∏—Ç–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            bot_enabled = self.db.get_setting('bot_enabled', True)
            return isinstance(bot_enabled, bool)
        except:
            return False
    
    def _show_bot_status(self, callback_query):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            stats = self.db.get_basic_stats()
            settings = self.db.get_all_settings()
            
            text_parts = [
                "üìä <b>–°—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n",
                "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>",
                f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}",
                f"‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {stats.get('total_admins', 0)}",
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_users_week', 0)}",
                "",
                "üìé <b>–°—Å—ã–ª–∫–∏:</b>",
                f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_links', 0)}",
                f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('links_today', 0)}",
                "",
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>",
                f"‚Ä¢ –ë–æ—Ç: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if settings.get('bot_enabled', True) else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}",
                f"‚Ä¢ –†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤: {self._get_current_limit_emoji()} {settings.get('current_limit_mode', 'BURST')}",
                "",
                # –ü–õ–ê–ù 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ê)
                # "üèÜ <b>–ö–∞—Ä–º–∞:</b>",
                # f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if settings.get('karma_enabled', False) else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–∞'}",
                # "",
                # –ü–õ–ê–ù 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò (–ó–ê–ì–õ–£–®–ö–ê)
                # "ü§ñ <b>–ò–ò:</b>",
                # f"‚Ä¢ –ò–ò –º–æ–¥—É–ª—å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if settings.get('ai_enabled', False) else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}",
                # "",
                f"üïê <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%H:%M:%S')}"
            ]
            
            self.bot.edit_message_text(
                "\n".join(text_parts),
                callback_query.message.chat.id,
                callback_query.message.message_id,
                reply_markup=self.create_keyboard('diagnostics'),
                parse_mode='HTML'
            )
            
            self.bot.answer_callback_query(callback_query.id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _show_bot_status: {e}")
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
            )
    
    def _handle_help_action(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–º–æ—â–∏"""
        data = callback_query.data
        
        if data == 'help_commands':
            self._show_commands_list(callback_query)
        elif data == 'help_user_guide':
            self._show_user_guide(callback_query)
        elif data == 'help_admin_guide':
            self._show_admin_guide(callback_query)
        else:
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏"
            )
    
    def _show_commands_list(self, callback_query):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"""
        text_parts = [
            "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥</b>\n",
            "üéõÔ∏è <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>",
            "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "/resetmenu - –°–±—Ä–æ—Å –º–µ–Ω—é",
            "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
            "",
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
            "/mystat - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "/last10links - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Å—ã–ª–æ–∫",
            "/last30links - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Å—ã–ª–æ–∫",
            "",
            "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>",
            "/enablebot - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞",
            "/disablebot - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞",
            "/setmode_burst - –†–µ–∂–∏–º Burst",
            "/setmode_normal - –†–µ–∂–∏–º Normal",
            "/setmode_conservative - –†–µ–∂–∏–º Conservative",
            "/setmode_adminburst - –†–µ–∂–∏–º Admin Burst",
            "/currentmode - –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º",
            "",
            # –ü–õ–ê–ù 2: –ö–æ–º–∞–Ω–¥—ã –∫–∞—Ä–º—ã (–ó–ê–ì–õ–£–®–ö–ò)
            # "üèÜ <b>–ö–∞—Ä–º–∞ (–ü–õ–ê–ù 2):</b>",
            # "/karma @username +/-—á–∏—Å–ª–æ - –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä–º—É",
            # "/karmastat - –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ä–º–µ",
            # "/ratiostat @username 15:12 - –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ",
            # "",
            # –ü–õ–ê–ù 3: –ö–æ–º–∞–Ω–¥—ã –ò–ò –∏ —Ñ–æ—Ä–º (–ó–ê–ì–õ–£–®–ö–ò)
            # "ü§ñ <b>–ò–ò –∏ —Ñ–æ—Ä–º—ã (–ü–õ–ê–ù 3):</b>",
            # "/askpresave - –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–µ—Å–µ–π–≤–µ",
            # "/claimpresave - –ó–∞—è–≤–∏—Ç—å –æ –ø—Ä–µ—Å–µ–π–≤–µ",
            # "/checkapprovals - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏",
            # "",
            # –ü–õ–ê–ù 4: –ö–æ–º–∞–Ω–¥—ã backup (–ó–ê–ì–õ–£–®–ö–ò)
            # "üíæ <b>Backup (–ü–õ–ê–ù 4):</b>",
            # "/downloadsql - –°–∫–∞—á–∞—Ç—å backup –ë–î",
            # "/backupstatus - –°—Ç–∞—Ç—É—Å backup",
            # "/backuphelp - –ü–æ–º–æ—â—å –ø–æ backup",
            # "",
            "üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
        ]
        
        self.bot.edit_message_text(
            "\n".join(text_parts),
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=self.create_keyboard('help'),
            parse_mode='HTML'
        )
        
        self.bot.answer_callback_query(callback_query.id)
    
    def _show_user_guide(self, callback_query):
        """–ü–æ–∫–∞–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = """üìñ <b>–ö—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üéµ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

1Ô∏è‚É£ <b>–ü—Ä–æ—Å—å–±–∞ –æ –ø—Ä–µ—Å–µ–π–≤–µ:</b>
   ‚Ä¢ –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ
   ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
   ‚Ä¢ –î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–∏–¥—è—Ç –ø—Ä–∏–∑—ã–≤ –∫ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏

2Ô∏è‚É£ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mystat –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   ‚Ä¢ /last10links –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏
   ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é

3Ô∏è‚É£ <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
   ‚Ä¢ /menu - –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –¥–∞–Ω–Ω—ã–º–∏

üîÆ <b>–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è:</b>
–ü–õ–ê–ù 2: –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –∏ –∑–≤–∞–Ω–∏–π
–ü–õ–ê–ù 3: –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã
–ü–õ–ê–ù 4: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup —Å–∏—Å—Ç–µ–º—ã

üí° –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: docs/user_guide.md"""
        
        self.bot.edit_message_text(
            text,
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=self.create_keyboard('help'),
            parse_mode='HTML'
        )
        
        self.bot.answer_callback_query(callback_query.id)
    
    def _show_admin_guide(self, callback_query):
        """–ü–æ–∫–∞–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∞–¥–º–∏–Ω–∞"""
        text = """üîß <b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üëë <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>

üéõÔ∏è <b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>
   ‚Ä¢ /menu - –≥–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   ‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
   ‚Ä¢ /resetmenu –ø—Ä–∏ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö

‚ö° <b>–†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤:</b>
   ‚Ä¢ Conservative: 60/—á–∞—Å, –∫—É–ª–¥–∞—É–Ω 60—Å
   ‚Ä¢ Normal: 180/—á–∞—Å, –∫—É–ª–¥–∞—É–Ω 20—Å  
   ‚Ä¢ Burst: 600/—á–∞—Å, –∫—É–ª–¥–∞—É–Ω 6—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
   ‚Ä¢ Admin Burst: 1200/—á–∞—Å, –∫—É–ª–¥–∞—É–Ω 3—Å

üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>
   ‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   ‚Ä¢ Keep-alive –ø—Ä–æ–≤–µ—Ä–∫–∏

üóëÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏:</b>
   ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫
   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫

üöÄ <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</b>
–ü–õ–ê–ù 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ü–õ–ê–ù 3: –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º –∏ –ò–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
–ü–õ–ê–ù 4: Backup –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î

üí° –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: docs/admin_guide.md"""
        
        self.bot.edit_message_text(
            text,
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=self.create_keyboard('help'),
            parse_mode='HTML'
        )
        
        self.bot.answer_callback_query(callback_query.id)

    def _show_my_links(self, callback_query):
        """–ü–æ–∫–∞–∑ —Å—Å—ã–ª–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = callback_query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
            links = self.db.get_links_by_user_id(user_id, limit=10)
            
            if not links:
                text = "üìé <b>–ú–æ–∏ —Å—Å—ã–ª–∫–∏</b>\n\nü§∑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"
            else:
                text_parts = [f"üìé <b>–ú–æ–∏ —Å—Å—ã–ª–∫–∏</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(links)})\n"]
                
                for i, link in enumerate(links, 1):
                    date_str = link.created_at.strftime("%d.%m %H:%M")
                    display_url = link.url if len(link.url) <= 50 else link.url[:47] + "..."
                    
                    text_parts.append(f"{i}. {date_str}")
                    text_parts.append(f"   üîó {display_url}")
                    
                    if i < len(links):
                        text_parts.append("")
                
                text = "\n".join(text_parts)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                text,
                callback_query.message.chat.id,
                callback_query.message.message_id,
                reply_markup=self.create_keyboard('mystats'),
                parse_mode='HTML'
            )
            
            self.bot.answer_callback_query(callback_query.id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _show_my_links: {e}")
            self.bot.answer_callback_query(
                callback_query.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫"
            )

    def _show_daily_activity(self, callback_query):
        """–ó–ê–ì–õ–£–®–ö–ê: –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º"""
        self.bot.answer_callback_query(
            callback_query.id,
            "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö",
            show_alert=True
        )

    def _show_my_ranking(self, callback_query):
        """–ó–ê–ì–õ–£–®–ö–ê: –ü–æ–∫–∞–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.bot.answer_callback_query(
            callback_query.id,
            "üèÜ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ü–õ–ê–ù–ï 2",
            show_alert=True
        )

if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MenuHandler"""
    from database.manager import DatabaseManager
    from utils.security import SecurityManager
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MenuHandler...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db = DatabaseManager("sqlite:///:memory:")
    db.create_tables()
    
    security = SecurityManager([12345], [2, 3])
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é
    menu_handler = MenuHandler(None, db, security)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é:")
    for menu_key, menu_data in menu_handler.menu_structure.items():
        print(f"‚Ä¢ {menu_key}: {menu_data['title']} ({len(menu_data['buttons'])} –∫–Ω–æ–ø–æ–∫)")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
    keyboard = menu_handler.create_keyboard('main')
    print(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—é
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—é:")
    main_message = menu_handler.get_menu_message('main')
    print(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {len(main_message)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MenuHandler –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
