"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Do Presave Reminder Bot v25+
–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è
"""

import os
from typing import List, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        # ============================================
        # –ü–õ–ê–ù 1: –ë–ê–ó–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï)
        # ============================================
        
        # Telegram Bot API
        self.BOT_TOKEN = os.getenv('BOT_TOKEN')
        self.GROUP_ID = int(os.getenv('GROUP_ID', '0'))
        self.WHITELIST = self._parse_int_list(os.getenv('WHITELIST', ''))
        self.ADMIN_IDS = self._parse_int_list(os.getenv('ADMIN_IDS', ''))
        
        # Render.com Deployment
        self.RENDER_EXTERNAL_URL = os.getenv('RENDER_EXTERNAL_URL')
        self.WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.REMINDER_TEXT = os.getenv(
            'REMINDER_TEXT', 
            'üéß –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –Ω–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤—ã—à–µ! ‚ô•Ô∏è –î–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞–∂–º–∏ /last10links'
        )
        self.RESPONSE_DELAY = int(os.getenv('RESPONSE_DELAY', '3'))
        
        # –†–µ–∂–∏–º—ã –ª–∏–º–∏—Ç–æ–≤ API (4 —Ä–µ–∂–∏–º–∞)
        self.CONSERVATIVE_MAX_HOUR = int(os.getenv('CONSERVATIVE_MAX_HOUR', '60'))
        self.CONSERVATIVE_COOLDOWN = int(os.getenv('CONSERVATIVE_COOLDOWN', '60'))
        
        self.NORMAL_MAX_HOUR = int(os.getenv('NORMAL_MAX_HOUR', '180'))
        self.NORMAL_COOLDOWN = int(os.getenv('NORMAL_COOLDOWN', '20'))
        
        self.BURST_MAX_HOUR = int(os.getenv('BURST_MAX_HOUR', '600'))
        self.BURST_COOLDOWN = int(os.getenv('BURST_COOLDOWN', '6'))
        
        self.ADMIN_BURST_MAX_HOUR = int(os.getenv('ADMIN_BURST_MAX_HOUR', '1200'))
        self.ADMIN_BURST_COOLDOWN = int(os.getenv('ADMIN_BURST_COOLDOWN', '3'))
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.DATABASE_URL = os.getenv('DATABASE_URL')
        self.DB_POOL_SIZE = int(os.getenv('DB_POOL_SIZE', '5'))
        
        # HTTP —Å–µ—Ä–≤–µ—Ä –∏ keep-alive
        self.HOST = os.getenv('HOST', '0.0.0.0')
        self.WEBHOOK_MAX_CONNECTIONS = int(os.getenv('WEBHOOK_MAX_CONNECTIONS', '40'))
        self.KEEPALIVE_ENABLED = os.getenv('KEEPALIVE_ENABLED', 'true').lower() == 'true'
        self.KEEPALIVE_INTERVAL = int(os.getenv('KEEPALIVE_INTERVAL', '300'))
        self.POLLING_INTERVAL = int(os.getenv('POLLING_INTERVAL', '1'))
        self.POLLING_TIMEOUT = int(os.getenv('POLLING_TIMEOUT', '20'))
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.LOG_FORMAT = os.getenv('LOG_FORMAT', 'structured')
        self.LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
        self.ENABLE_PERFORMANCE_LOGS = os.getenv('ENABLE_PERFORMANCE_LOGS', 'true').lower() == 'true'
        self.CORRELATION_ID_HEADER = os.getenv('CORRELATION_ID_HEADER', 'X-Request-ID')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.DEBUG = os.getenv('DEBUG', 'false').lower() == 'true'
        self.DEVELOPMENT_MODE = os.getenv('DEVELOPMENT_MODE', 'false').lower() == 'true'
        self.TEST_MODE = os.getenv('TEST_MODE', 'false').lower() == 'true'
        
        # ============================================
        # –ü–õ–ê–ù 2: –°–ò–°–¢–ï–ú–ê –ö–ê–†–ú–´ (–ó–ê–ì–õ–£–®–ö–ò)
        # ============================================
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä–º—ã
        # self.MAX_KARMA = int(os.getenv('MAX_KARMA', '100500'))
        # self.ADMIN_KARMA = int(os.getenv('ADMIN_KARMA', '100500'))
        # self.KARMA_COOLDOWN_SECONDS = int(os.getenv('KARMA_COOLDOWN_SECONDS', '60'))
        # self.ENABLE_AUTO_KARMA = os.getenv('ENABLE_AUTO_KARMA', 'true').lower() == 'true'
        
        # –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π
        # self.RANK_NEWBIE_MIN = int(os.getenv('RANK_NEWBIE_MIN', '0'))
        # self.RANK_NEWBIE_MAX = int(os.getenv('RANK_NEWBIE_MAX', '5'))
        # self.RANK_HOPE_MIN = int(os.getenv('RANK_HOPE_MIN', '6'))
        # self.RANK_HOPE_MAX = int(os.getenv('RANK_HOPE_MAX', '15'))
        # self.RANK_MEGA_MIN = int(os.getenv('RANK_MEGA_MIN', '16'))
        # self.RANK_MEGA_MAX = int(os.getenv('RANK_MEGA_MAX', '30'))
        # self.RANK_AMBASSADOR_MIN = int(os.getenv('RANK_AMBASSADOR_MIN', '31'))
        
        # ============================================
        # –ü–õ–ê–ù 3: –ò–ò –ò –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–û–†–ú–´ (–ó–ê–ì–õ–£–®–ö–ò)
        # ============================================
        
        # AI API Keys
        # self.OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
        # self.ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY')
        # self.AI_MODEL = os.getenv('AI_MODEL', 'gpt-3.5-turbo')
        # self.AI_MAX_TOKENS = int(os.getenv('AI_MAX_TOKENS', '1000'))
        # self.AI_TEMPERATURE = float(os.getenv('AI_TEMPERATURE', '0.7'))
        # self.AI_ENABLED = os.getenv('AI_ENABLED', 'false').lower() == 'true'
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
        # self.AUTO_KARMA_ENABLED = os.getenv('AUTO_KARMA_ENABLED', 'false').lower() == 'true'
        # self.GRATITUDE_COOLDOWN_MINUTES = int(os.getenv('GRATITUDE_COOLDOWN_MINUTES', '60'))
        # self.MIN_MESSAGE_LENGTH_FOR_KARMA = int(os.getenv('MIN_MESSAGE_LENGTH_FOR_KARMA', '10'))
        
        # –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º
        # self.FORMS_ENABLED = os.getenv('FORMS_ENABLED', 'false').lower() == 'true'
        # self.MAX_SCREENSHOTS_PER_CLAIM = int(os.getenv('MAX_SCREENSHOTS_PER_CLAIM', '5'))
        # self.SCREENSHOT_MAX_SIZE_MB = int(os.getenv('SCREENSHOT_MAX_SIZE_MB', '10'))
        # self.FORM_TIMEOUT_MINUTES = int(os.getenv('FORM_TIMEOUT_MINUTES', '30'))
        
        # ============================================
        # –ü–õ–ê–ù 4: BACKUP –°–ò–°–¢–ï–ú–ê (–ó–ê–ì–õ–£–®–ö–ò)
        # ============================================
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # self.DATABASE_CREATED_DATE = os.getenv('DATABASE_CREATED_DATE', '2025-01-15')
        # self.BACKUP_WARNING_DAYS = self._parse_int_list(os.getenv('BACKUP_WARNING_DAYS', '25,28,30,44'))
        # self.BACKUP_RETENTION_DAYS = int(os.getenv('BACKUP_RETENTION_DAYS', '7'))
        # self.AUTO_BACKUP_ENABLED = os.getenv('AUTO_BACKUP_ENABLED', 'true').lower() == 'true'
        # self.BACKUP_NOTIFICATIONS_ENABLED = os.getenv('BACKUP_NOTIFICATIONS_ENABLED', 'true').lower() == 'true'
        # self.BACKUP_CHECK_TIME = os.getenv('BACKUP_CHECK_TIME', '10:00')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ backup
        # self.BACKUP_COMPRESSION_LEVEL = int(os.getenv('BACKUP_COMPRESSION_LEVEL', '6'))
        # self.BACKUP_MAX_SIZE_MB = int(os.getenv('BACKUP_MAX_SIZE_MB', '45'))
        # self.BACKUP_INCLUDE_LOGS = os.getenv('BACKUP_INCLUDE_LOGS', 'false').lower() == 'true'
        # self.BACKUP_ENCRYPT = os.getenv('BACKUP_ENCRYPT', 'false').lower() == 'true'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        # self.MIGRATION_TIMEOUT_MINUTES = int(os.getenv('MIGRATION_TIMEOUT_MINUTES', '15'))
        # self.ALLOW_DATA_LOSS_RECOVERY = os.getenv('ALLOW_DATA_LOSS_RECOVERY', 'false').lower() == 'true'
        # self.BACKUP_VERIFICATION_ENABLED = os.getenv('BACKUP_VERIFICATION_ENABLED', 'true').lower() == 'true'
        
        # ============================================
        # FEATURE FLAGS (–î–õ–Ø –ü–û–≠–¢–ê–ü–ù–û–ì–û –í–ö–õ–Æ–ß–ï–ù–ò–Ø)
        # ============================================
        
        self.ENABLE_PLAN_2_FEATURES = os.getenv('ENABLE_PLAN_2_FEATURES', 'false').lower() == 'true'
        self.ENABLE_PLAN_3_FEATURES = os.getenv('ENABLE_PLAN_3_FEATURES', 'false').lower() == 'true'
        self.ENABLE_PLAN_4_FEATURES = os.getenv('ENABLE_PLAN_4_FEATURES', 'false').lower() == 'true'
        
        # ============================================
        # –§–õ–ê–ì–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
        # ============================================

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–õ–ê–ì: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self.FORCE_RECREATE_TABLES = os.getenv('FORCE_RECREATE_TABLES', 'false').lower() == 'true'
        self.FORCE_DROP_CASCADE = os.getenv('FORCE_DROP_CASCADE', 'true').lower() == 'true'
        
        
    def _parse_int_list(self, value: str) -> List[int]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"""
        if not value:
            return []
        try:
            return [int(x.strip()) for x in value.split(',') if x.strip()]
        except ValueError:
            return []
    
    def get_current_limit_mode(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BURST)"""
        return os.getenv('CURRENT_LIMIT_MODE', 'BURST')
    
    def set_limit_mode(self, mode: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        valid_modes = ['CONSERVATIVE', 'NORMAL', 'BURST', 'ADMIN_BURST']
        if mode.upper() in valid_modes:
            os.environ['CURRENT_LIMIT_MODE'] = mode.upper()
            return True
        return False
    
    def get_limit_config(self, mode: Optional[str] = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if not mode:
            mode = self.get_current_limit_mode()
            
        mode = mode.upper()
        
        configs = {
            'CONSERVATIVE': {
                'max_hour': self.CONSERVATIVE_MAX_HOUR,
                'cooldown': self.CONSERVATIVE_COOLDOWN,
                'name': 'Conservative',
                'emoji': 'üêå'
            },
            'NORMAL': {
                'max_hour': self.NORMAL_MAX_HOUR,
                'cooldown': self.NORMAL_COOLDOWN,
                'name': 'Normal',
                'emoji': '‚ö°'
            },
            'BURST': {
                'max_hour': self.BURST_MAX_HOUR,
                'cooldown': self.BURST_COOLDOWN,
                'name': 'Burst',
                'emoji': 'üöÄ'
            },
            'ADMIN_BURST': {
                'max_hour': self.ADMIN_BURST_MAX_HOUR,
                'cooldown': self.ADMIN_BURST_COOLDOWN,
                'name': 'Admin Burst',
                'emoji': '‚ö°‚ö°'
            }
        }
        
        return configs.get(mode, configs['BURST'])
    
    def is_feature_enabled(self, plan: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
        if plan == 2:
            return self.ENABLE_PLAN_2_FEATURES
        elif plan == 3:
            return self.ENABLE_PLAN_3_FEATURES
        elif plan == 4:
            return self.ENABLE_PLAN_4_FEATURES
        return True  # –ü–ª–∞–Ω 1 –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω


def validate_config() -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ü–õ–ê–ù 1
    required_vars = [
        'BOT_TOKEN',
        'GROUP_ID', 
        'ADMIN_IDS',
        'DATABASE_URL'
    ]
    
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if not value or value.strip() == '':
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ Render.com")
        return False
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è BOT_TOKEN
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token.count(':') == 1 or len(bot_token) < 40:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOT_TOKEN")
        return False
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è GROUP_ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)
    try:
        group_id = int(os.getenv('GROUP_ID', '0'))
        if group_id >= 0:
            print("‚ùå GROUP_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø")
            return False
    except ValueError:
        print("‚ùå GROUP_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return False
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è ADMIN_IDS
    admin_ids_str = os.getenv('ADMIN_IDS', '')
    try:
        admin_ids = [int(x.strip()) for x in admin_ids_str.split(',') if x.strip()]
        if len(admin_ids) == 0:
            print("‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ADMIN_ID")
            return False
    except ValueError:
        print("‚ùå ADMIN_IDS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        return False
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è DATABASE_URL
    database_url = os.getenv('DATABASE_URL', '')
    if not database_url.startswith('postgresql://'):
        print("‚ùå DATABASE_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PostgreSQL connection string")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    return True


def print_config_summary():
    """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config = Config()
    
    print("=" * 50)
    print("üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø DO PRESAVE REMINDER BOT v25+")
    print("=" * 50)
    
    print(f"ü§ñ Bot Token: {config.BOT_TOKEN[:10]}...{config.BOT_TOKEN[-5:]}")
    print(f"üë• Group ID: {config.GROUP_ID}")
    print(f"üìù Whitelist: {config.WHITELIST}")
    print(f"üëë Admins: {len(config.ADMIN_IDS)} –∞–¥–º–∏–Ω–æ–≤")
    print(f"üåê External URL: {config.RENDER_EXTERNAL_URL or '–ù–µ —É–∫–∞–∑–∞–Ω (polling mode)'}")
    
    # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤
    current_mode = config.get_current_limit_mode()
    limit_config = config.get_limit_config(current_mode)
    print(f"‚ö° –†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤: {limit_config['emoji']} {limit_config['name']}")
    
    # –°—Ç–∞—Ç—É—Å feature flags
    print(f"üèÜ –ü–õ–ê–ù 2 (–∫–∞—Ä–º–∞): {'‚úÖ –í–∫–ª—é—á–µ–Ω' if config.ENABLE_PLAN_2_FEATURES else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}")
    print(f"ü§ñ –ü–õ–ê–ù 3 (–ò–ò): {'‚úÖ –í–∫–ª—é—á–µ–Ω' if config.ENABLE_PLAN_3_FEATURES else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}")
    print(f"üíæ –ü–õ–ê–ù 4 (backup): {'‚úÖ –í–∫–ª—é—á–µ–Ω' if config.ENABLE_PLAN_4_FEATURES else '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}")
    
    print("=" * 50)


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if validate_config():
        print_config_summary()
    else:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏!")
        exit(1)