"""
üîß Configuration Manager - Do Presave Reminder Bot v25+
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è —Å feature flags
"""

import os
import sys
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

class ConfigError(Exception):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass

class Config:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self._validate_required_variables()
        self._setup_feature_flags()
        self._setup_telegram_config()
        self._setup_database_config()
        self._setup_api_limits()
        self._setup_webhook_config()
        self._setup_logging_config()
        self._setup_plan_specific_configs()
    
    # ============================================
    # –ü–õ–ê–ù 1 - –ë–ê–ó–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
    # ============================================
    
    def _validate_required_variables(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        required_vars = {
            'BOT_TOKEN': '–¢–æ–∫–µ–Ω –æ—Ç @BotFather',
            'GROUP_ID': 'ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã (—Å –º–∏–Ω—É—Å–æ–º!)',
            'WHITELIST_ID': 'ID —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
            'ADMIN_IDS': 'ID –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
            'DATABASE_URL': 'PostgreSQL connection string'
        }
        
        missing_vars = []
        for var, description in required_vars.items():
            if not os.getenv(var):
                missing_vars.append(f"{var} ({description})")
        
        if missing_vars:
            raise ConfigError(
                f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n" +
                "\n".join(f"‚Ä¢ {var}" for var in missing_vars) +
                f"\n\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ Render.com –∏–ª–∏ —Ñ–∞–π–ª .env"
            )
    
    def _setup_feature_flags(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ feature flags –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ (–æ—Å–Ω–æ–≤–∞)
        self.ENABLE_PLAN_1_FEATURES = True
        
        # –ü–ª–∞–Ω 2 - –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã (v26)
        self.ENABLE_PLAN_2_FEATURES = self._get_bool('ENABLE_PLAN_2_FEATURES', False)
        
        # –ü–ª–∞–Ω 3 - –ò–ò –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã (v27)
        self.ENABLE_PLAN_3_FEATURES = self._get_bool('ENABLE_PLAN_3_FEATURES', False)
        
        # –ü–ª–∞–Ω 4 - Backup —Å–∏—Å—Ç–µ–º–∞ (v27.1) - –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–û!
        self.ENABLE_PLAN_4_FEATURES = self._get_bool('ENABLE_PLAN_4_FEATURES', True)
    
    def _setup_telegram_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot API"""
        self.BOT_TOKEN = os.getenv('BOT_TOKEN')
        self.GROUP_ID = int(os.getenv('GROUP_ID'))
        
        # WHITELIST —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é!)
        whitelist_raw = os.getenv('WHITELIST_ID', os.getenv('WHITELIST', ''))
        self.WHITELIST_THREADS = [
            int(x.strip()) for x in whitelist_raw.split(',') 
            if x.strip().isdigit()
        ]
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞–¥–º–∏–Ω–æ–≤
        admin_str = os.getenv('ADMIN_IDS', '')
        self.ADMIN_IDS = [
            int(admin_id.strip()) 
            for admin_id in admin_str.split(',') 
            if admin_id.strip().isdigit()
        ]
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.REMINDER_TEXT = os.getenv(
            'REMINDER_TEXT', 
            'üéß –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –Ω–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ—Å–µ–π–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤—ã—à–µ! ‚ô•Ô∏è –î–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞–∂–º–∏ /last10links'
        )
        
        # –ó–∞–¥–µ—Ä–∂–∫–∏
        self.RESPONSE_DELAY = int(os.getenv('RESPONSE_DELAY', '3'))
    
    def _setup_database_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
        self.DATABASE_URL = os.getenv('DATABASE_URL')
        self.DB_POOL_SIZE = int(os.getenv('DB_POOL_SIZE', '5'))
        self.DB_POOL_TIMEOUT = int(os.getenv('DB_POOL_TIMEOUT', '30'))
        self.DB_POOL_RECYCLE = int(os.getenv('DB_POOL_RECYCLE', '3600'))
    
    def _setup_api_limits(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ 4 —Ä–µ–∂–∏–º–æ–≤ –ª–∏–º–∏—Ç–æ–≤ API"""
        # Conservative mode
        self.CONSERVATIVE_MAX_HOUR = int(os.getenv('CONSERVATIVE_MAX_HOUR', '60'))
        self.CONSERVATIVE_COOLDOWN = int(os.getenv('CONSERVATIVE_COOLDOWN', '60'))
        
        # Normal mode
        self.NORMAL_MAX_HOUR = int(os.getenv('NORMAL_MAX_HOUR', '180'))
        self.NORMAL_COOLDOWN = int(os.getenv('NORMAL_COOLDOWN', '20'))
        
        # Burst mode (–ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ)
        self.BURST_MAX_HOUR = int(os.getenv('BURST_MAX_HOUR', '600'))
        self.BURST_COOLDOWN = int(os.getenv('BURST_COOLDOWN', '6'))
        
        # Admin Burst mode
        self.ADMIN_BURST_MAX_HOUR = int(os.getenv('ADMIN_BURST_MAX_HOUR', '1200'))
        self.ADMIN_BURST_COOLDOWN = int(os.getenv('ADMIN_BURST_COOLDOWN', '3'))
        
        # –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - BURST
        self.DEFAULT_LIMIT_MODE = 'BURST'
    
    def _setup_webhook_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏ Render.com"""
        self.RENDER_EXTERNAL_URL = os.getenv('RENDER_EXTERNAL_URL', '')
        self.WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', 'presave_bot_secret_2025')
        self.WEBHOOK_PATH = f"/webhook/{self.WEBHOOK_SECRET}"
        self.HEALTH_CHECK_PATH = "/health"
        self.PORT = int(os.getenv('PORT', '10000'))  # Render.com default
        
        # –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
        self.HOST = os.getenv('HOST', '0.0.0.0')
        self.WEBHOOK_URL = f"https://{self.RENDER_EXTERNAL_URL}{self.WEBHOOK_PATH}" if self.RENDER_EXTERNAL_URL else None
        self.WEBHOOK_MAX_CONNECTIONS = int(os.getenv('WEBHOOK_MAX_CONNECTIONS', '40'))
        
        # Keep-alive –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.KEEPALIVE_URL = os.getenv('KEEPALIVE_URL', '')
        self.KEEPALIVE_INTERVAL = int(os.getenv('KEEPALIVE_INTERVAL', '300'))
        self.KEEPALIVE_ENABLED = self._get_bool('KEEPALIVE_ENABLED', True)
        
        # Polling –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        self.POLLING_INTERVAL = int(os.getenv('POLLING_INTERVAL', '1'))
        self.POLLING_TIMEOUT = int(os.getenv('POLLING_TIMEOUT', '20'))
    
    def _setup_logging_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.LOG_FORMAT = os.getenv('LOG_FORMAT', 'structured')
        self.LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
        self.ENABLE_PERFORMANCE_LOGS = self._get_bool('ENABLE_PERFORMANCE_LOGS', True)
        self.CORRELATION_ID_HEADER = os.getenv('CORRELATION_ID_HEADER', 'X-Request-ID')
    
    # ============================================
    # –ü–õ–ê–ù 2 - –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–ê–†–ú–´
    # ============================================
    
    def _setup_karma_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã (–ü–ª–∞–Ω 2)"""
        if not self.ENABLE_PLAN_2_FEATURES:
            return
            
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞—Ä–º–∞
        self.MAX_KARMA = int(os.getenv('MAX_KARMA', '100500'))
        self.ADMIN_KARMA = int(os.getenv('ADMIN_KARMA', '100500'))
        
        # Cooldown –º–µ–∂–¥—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏
        self.KARMA_COOLDOWN_SECONDS = int(os.getenv('KARMA_COOLDOWN_SECONDS', '60'))
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∑–≤–∞–Ω–∏–π
        self.RANK_THRESHOLDS = {
            0: "ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π",
            6: "ü•à –ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", 
            16: "ü•á –ú–µ–≥–∞-—á–µ–ª–æ–≤–µ—á–∏—â–µ",
            31: "üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ"
        }
        
        # –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞—Ä–º—ã
        self.ENABLE_AUTO_KARMA = self._get_bool('ENABLE_AUTO_KARMA', True)
    
    # ============================================
    # –ü–õ–ê–ù 3 - –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ò –ò –§–û–†–ú
    # ============================================
    
    def _setup_ai_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–ü–ª–∞–Ω 3)"""
        if not self.ENABLE_PLAN_3_FEATURES:
            return
            
        # AI API Keys
        self.OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
        self.ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY', '')
        
        # AI Settings
        self.AI_MODEL = os.getenv('AI_MODEL', 'gpt-3.5-turbo')
        self.AI_MAX_TOKENS = int(os.getenv('AI_MAX_TOKENS', '1000'))
        self.AI_TEMPERATURE = float(os.getenv('AI_TEMPERATURE', '0.7'))
        self.AI_ENABLED = self._get_bool('AI_ENABLED', True)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
        self.AUTO_KARMA_ENABLED = self._get_bool('AUTO_KARMA_ENABLED', True)
        self.GRATITUDE_COOLDOWN_MINUTES = int(os.getenv('GRATITUDE_COOLDOWN_MINUTES', '60'))
        self.MIN_MESSAGE_LENGTH_FOR_KARMA = int(os.getenv('MIN_MESSAGE_LENGTH_FOR_KARMA', '10'))
        
        # –°–ª–æ–≤–∞—Ä—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
        self.GRATITUDE_WORDS = {
            'ru': [
                '—Å–ø–∞—Å–∏–±–æ', '—Å–ø—Å', '—Å–ø–∞—Å–∏–±', '—Å–ø–∞—Å–∏–±–æ—á–∫–∏', '—Å–ø–∞—Å–∏–±–∫–∏', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–±–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∞',
                '–æ–≥–æ–Ω—å', '–æ–≥–æ–Ω—ë–∫', '–∫—Ä—É—Ç—è–∫', '–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å–Ω–æ', '—à–∏–∫–∞—Ä–Ω–æ', '–æ—Ñ–∏–≥–µ–Ω–Ω–æ',
                '–ø–æ–ª–µ–∑–Ω–æ', '–ø–æ–º–æ–≥–ª–æ', '–≤—ã—Ä—É—á–∏–ª', '–≤—ã—Ä—É—á–∏–ª–∞', '–≤—ã—Ä—É—á–∞–π–∫–∞', '—Å–ø–∞—Å', '—Å–ø–∞—Å–ª–∞',
                '–ø–ª—é—Å –≤ –∫–∞—Ä–º—É', '+–∫–∞—Ä–º–∞', '+ –≤ –∫–∞—Ä–º—É', '–ø–ª—é—Å–∏–∫', '–ø–ª—é—Å–∞–Ω—É–ª', '—Ä–µ—Å–ø–µ–∫—Ç',
                '—Ç–æ–ø', '—Ç–æ–ø—á–∏–∫', '–ª–∞–π–∫', '–∑–∞—á—ë—Ç', '–≥–æ–¥–Ω–æ', '—Ç–µ–º–∞', '–±–æ–º–±–∞', '–∫—Ä–∞—Å–∞–≤–∞'
            ],
            'en': [
                'thx', 'thanks', 'thank you', 'ty', 'appreciate', 'grateful',
                'awesome', 'cool', 'nice', 'great', 'amazing', 'fantastic',
                'helped', 'helpful', 'useful', 'perfect', 'excellent',
                'props', 'respect', 'kudos', 'good job', 'well done'
            ]
        }
    
    def _setup_forms_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º (–ü–ª–∞–Ω 3)"""
        if not self.ENABLE_PLAN_3_FEATURES:
            return
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º
        self.FORMS_ENABLED = self._get_bool('FORMS_ENABLED', True)
        self.MAX_SCREENSHOTS_PER_CLAIM = int(os.getenv('MAX_SCREENSHOTS_PER_CLAIM', '5'))
        self.SCREENSHOT_MAX_SIZE_MB = int(os.getenv('SCREENSHOT_MAX_SIZE_MB', '10'))
        self.FORM_TIMEOUT_MINUTES = int(os.getenv('FORM_TIMEOUT_MINUTES', '30'))
    
    # ============================================
    # –ü–õ–ê–ù 4 - –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BACKUP –°–ò–°–¢–ï–ú–´
    # ============================================
    
    def _setup_backup_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ backup —Å–∏—Å—Ç–µ–º—ã (–ü–ª–∞–Ω 4)"""
        if not self.ENABLE_PLAN_4_FEATURES:
            return
            
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.DATABASE_CREATED_DATE = os.getenv('DATABASE_CREATED_DATE', '2025-01-15')
        
        # –î–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        warning_days_str = os.getenv('BACKUP_WARNING_DAYS', '25,28,30,44')
        self.BACKUP_WARNING_DAYS = [
            int(day.strip()) 
            for day in warning_days_str.split(',') 
            if day.strip().isdigit()
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ backup
        self.BACKUP_RETENTION_DAYS = int(os.getenv('BACKUP_RETENTION_DAYS', '7'))
        self.AUTO_BACKUP_ENABLED = self._get_bool('AUTO_BACKUP_ENABLED', True)
        self.BACKUP_NOTIFICATIONS_ENABLED = self._get_bool('BACKUP_NOTIFICATIONS_ENABLED', True)
        self.BACKUP_CHECK_TIME = os.getenv('BACKUP_CHECK_TIME', '10:00')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        self.BACKUP_COMPRESSION_LEVEL = int(os.getenv('BACKUP_COMPRESSION_LEVEL', '6'))
        self.BACKUP_MAX_SIZE_MB = int(os.getenv('BACKUP_MAX_SIZE_MB', '45'))  # –õ–∏–º–∏—Ç Telegram 50MB
        self.BACKUP_INCLUDE_LOGS = self._get_bool('BACKUP_INCLUDE_LOGS', False)
        self.BACKUP_ENCRYPT = self._get_bool('BACKUP_ENCRYPT', False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        self.MIGRATION_TIMEOUT_MINUTES = int(os.getenv('MIGRATION_TIMEOUT_MINUTES', '15'))
        self.ALLOW_DATA_LOSS_RECOVERY = self._get_bool('ALLOW_DATA_LOSS_RECOVERY', False)
        self.BACKUP_VERIFICATION_ENABLED = self._get_bool('BACKUP_VERIFICATION_ENABLED', True)
    
    def _setup_plan_specific_configs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
        if self.ENABLE_PLAN_2_FEATURES:
            self._setup_karma_config()
            
        if self.ENABLE_PLAN_3_FEATURES:
            self._setup_ai_config()
            self._setup_forms_config()
            
        if self.ENABLE_PLAN_4_FEATURES:
            self._setup_backup_config()
    
    # ============================================
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
    # ============================================
    
    def _setup_development_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        self.DEBUG = self._get_bool('DEBUG', False)
        self.DEVELOPMENT_MODE = self._get_bool('DEVELOPMENT_MODE', False)
        self.TEST_MODE = self._get_bool('TEST_MODE', False)
    
    def _setup_performance_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.ASYNC_WORKERS = int(os.getenv('ASYNC_WORKERS', '2'))
        self.REQUEST_TIMEOUT = int(os.getenv('REQUEST_TIMEOUT', '30'))
        self.MAX_CONCURRENT_OPERATIONS = int(os.getenv('MAX_CONCURRENT_OPERATIONS', '10'))
    
    def _setup_monitoring_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.HEALTH_CHECK_ENABLED = self._get_bool('HEALTH_CHECK_ENABLED', True)
        self.METRICS_COLLECTION = self._get_bool('METRICS_COLLECTION', True)
        self.ERROR_REPORTING = self._get_bool('ERROR_REPORTING', True)
    
    # ============================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ============================================
    
    def _get_bool(self, key: str, default: bool = False) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ boolean –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ environment variable"""
        value = os.getenv(key, str(default))
        return value.lower() in ('true', '1', 'yes', 'on')
    
    def _get_list(self, key: str, default: List[str] = None, separator: str = ',') -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑ environment variable"""
        if default is None:
            default = []
        value = os.getenv(key, '')
        if not value:
            return default
        return [item.strip() for item in value.split(separator) if item.strip()]
    
    def get_limit_config(self, mode: str) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        limit_configs = {
            'CONSERVATIVE': {
                'max_hour': self.CONSERVATIVE_MAX_HOUR,
                'cooldown': self.CONSERVATIVE_COOLDOWN
            },
            'NORMAL': {
                'max_hour': self.NORMAL_MAX_HOUR,
                'cooldown': self.NORMAL_COOLDOWN
            },
            'BURST': {
                'max_hour': self.BURST_MAX_HOUR,
                'cooldown': self.BURST_COOLDOWN
            },
            'ADMIN_BURST': {
                'max_hour': self.ADMIN_BURST_MAX_HOUR,
                'cooldown': self.ADMIN_BURST_COOLDOWN
            }
        }
        
        return limit_configs.get(mode.upper(), limit_configs['BURST'])
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.ADMIN_IDS
    
    def is_whitelisted_thread(self, thread_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ–ø–∏–∫ –≤ whitelist"""
        return thread_id in self.WHITELIST_THREADS
    
    def get_webhook_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ URL webhook"""
        if not self.RENDER_EXTERNAL_URL:
            return ""
        return f"https://{self.RENDER_EXTERNAL_URL}{self.WEBHOOK_PATH}"
    
    def validate_ai_config(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò"""
        if not self.ENABLE_PLAN_3_FEATURES:
            return True
            
        if not self.AI_ENABLED:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞
        has_openai = bool(self.OPENAI_API_KEY)
        has_anthropic = bool(self.ANTHROPIC_API_KEY)
        
        return has_openai or has_anthropic
    
    def get_enabled_features_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        features = []
        
        if self.ENABLE_PLAN_1_FEATURES:
            features.append("‚úÖ –ü–ª–∞–Ω 1: –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
            
        if self.ENABLE_PLAN_2_FEATURES:
            features.append("‚úÖ –ü–ª–∞–Ω 2: –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã")
            
        if self.ENABLE_PLAN_3_FEATURES:
            features.append("‚úÖ –ü–ª–∞–Ω 3: –ò–ò –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã")
            
        if self.ENABLE_PLAN_4_FEATURES:
            features.append("‚úÖ –ü–ª–∞–Ω 4: Backup —Å–∏—Å—Ç–µ–º–∞")
        
        return "\n".join(features)
    
    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return f"""
üîß Do Presave Reminder Bot Configuration v25+

üìä –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã:
{self.get_enabled_features_summary()}

ü§ñ Telegram Bot:
‚Ä¢ GROUP_ID: {self.GROUP_ID}
‚Ä¢ WHITELIST —Ç–æ–ø–∏–∫–æ–≤: {len(self.WHITELIST_THREADS)}
‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {len(self.ADMIN_IDS)}

üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ PostgreSQL pool: {self.DB_POOL_SIZE}
‚Ä¢ URL: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if self.DATABASE_URL else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}

‚ö° –†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.DEFAULT_LIMIT_MODE}

üîÑ Webhook: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.RENDER_EXTERNAL_URL else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
"""

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ============================================

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config = Config()
except ConfigError as e:
    print(f"\n{e}\n")
    sys.exit(1)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = ['config', 'Config', 'ConfigError']

# ============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ú–ü–û–†–¢–ê
# ============================================

def get_config() -> Config:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return config

def is_plan_enabled(plan_number: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–ª–∞–Ω"""
    plan_flags = {
        1: config.ENABLE_PLAN_1_FEATURES,
        2: config.ENABLE_PLAN_2_FEATURES,
        3: config.ENABLE_PLAN_3_FEATURES,
        4: config.ENABLE_PLAN_4_FEATURES
    }
    return plan_flags.get(plan_number, False)

def get_bot_token() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    return config.BOT_TOKEN

def get_admin_ids() -> List[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –∞–¥–º–∏–Ω–æ–≤"""
    return config.ADMIN_IDS

def get_whitelist_threads() -> List[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤"""
    return config.WHITELIST_THREADS

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    print(config)
    
    print("üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    print(f"‚Ä¢ Telegram Bot Token: {'‚úÖ' if config.BOT_TOKEN else '‚ùå'}")
    print(f"‚Ä¢ Database URL: {'‚úÖ' if config.DATABASE_URL else '‚ùå'}")
    print(f"‚Ä¢ Admin IDs: {'‚úÖ' if config.ADMIN_IDS else '‚ùå'}")
    print(f"‚Ä¢ Whitelist Threads: {'‚úÖ' if config.WHITELIST_THREADS else '‚ùå'}")
    
    if config.ENABLE_PLAN_3_FEATURES:
        print(f"‚Ä¢ AI Configuration: {'‚úÖ' if config.validate_ai_config() else '‚ùå'}")
    
    print("\nüöÄ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
