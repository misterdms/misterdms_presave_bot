"""
services/karma.py - –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –∏ –∑–≤–∞–Ω–∏–π (–ü–õ–ê–ù 2)
–ó–ê–ì–õ–£–®–ö–ê –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã –≤ –ü–ª–∞–Ω–µ 2

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π –∏ —Ä–∞–Ω–≥–æ–≤
- –ö–æ–º–∞–Ω–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –∫–∞—Ä–º—ã
- –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
"""

from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

from utils.logger import get_logger
from utils.formatters import ProgressBarFormatter, KarmaFormatter
from utils.validators import BaseValidator, CommandValidator

logger = get_logger(__name__)

class KarmaManager:
    """–ó–ê–ì–õ–£–®–ö–ê: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã –¥–ª—è –ü–ª–∞–Ω–∞ 2"""
    
    def __init__(self, db_manager):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞—Ä–º—ã"""
        self.db_manager = db_manager
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–≤–∞–Ω–∏–π (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ config –≤ –ü–ª–∞–Ω–µ 2)
        self.ranks_config = {
            'newbie': {
                'name': 'ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π',
                'emoji': 'ü•â',
                'min_karma': 0,
                'max_karma': 5,
                'description': '–¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å'
            },
            'hope': {
                'name': 'ü•à –ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
                'emoji': 'ü•à',
                'min_karma': 6,
                'max_karma': 15,
                'description': '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'
            },
            'mega': {
                'name': 'ü•á –ú–µ–≥–∞-—á–µ–ª–æ–≤–µ—á–∏—â–µ',
                'emoji': 'ü•á',
                'min_karma': 16,
                'max_karma': 30,
                'description': '–°—É–ø–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'
            },
            'ambassador': {
                'name': 'üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ',
                'emoji': 'üíé',
                'min_karma': 31,
                'max_karma': 999999,
                'description': '–õ–µ–≥–µ–Ω–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'
            }
        }
        
        logger.info("üîÑ KarmaManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ó–ê–ì–õ–£–®–ö–ê - –ü–ª–∞–Ω 2)")
    
    # ============================================
    # –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ö–ê–†–ú–´ (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    def get_user_karma(self, user_id: int) -> int:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"üîÑ get_user_karma({user_id}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –≤ –ü–ª–∞–Ω–µ 2
        return 0
    
    def set_user_karma(self, user_id: int, karma: int, admin_id: int, reason: str = "") -> bool:
        """–ó–ê–ì–õ–£–®–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"üîÑ set_user_karma({user_id}, {karma}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        return False
    
    def change_user_karma(self, user_id: int, change: int, admin_id: int, reason: str = "") -> Tuple[bool, int, int]:
        """–ó–ê–ì–õ–£–®–ö–ê: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"üîÑ change_user_karma({user_id}, {change:+d}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å—Ç–∞—Ä–∞—è_–∫–∞—Ä–º–∞, –Ω–æ–≤–∞—è_–∫–∞—Ä–º–∞)
        return False, 0, 0
    
    def auto_give_karma(self, user_id: int, amount: int = 1, reason: str = "auto_gratitude") -> bool:
        """–ó–ê–ì–õ–£–®–ö–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞—Ä–º—ã (–¥–ª—è –ü–ª–∞–Ω–∞ 3)"""
        logger.debug(f"üîÑ auto_give_karma({user_id}, +{amount}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 3)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 3 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π)
        return False
    
    # ============================================
    # –°–ò–°–¢–ï–ú–ê –ó–í–ê–ù–ò–ô (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    def get_user_rank(self, karma: int) -> Dict:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ä–º–µ"""
        logger.debug(f"üîÑ get_user_rank({karma}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ù–æ–≤–µ–Ω—å–∫–∏–π"
        for rank_key, rank_info in self.ranks_config.items():
            if rank_info['min_karma'] <= karma <= rank_info['max_karma']:
                return {
                    'key': rank_key,
                    'name': rank_info['name'],
                    'emoji': rank_info['emoji'],
                    'description': rank_info['description'],
                    'progress': self._calculate_rank_progress(karma, rank_info),
                    'next_rank': self._get_next_rank(rank_key)
                }
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ù–æ–≤–µ–Ω—å–∫–∏–π
        return {
            'key': 'newbie',
            'name': 'ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π',
            'emoji': 'ü•â',
            'description': '–¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å',
            'progress': '0/5',
            'next_rank': 'ü•à –ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'
        }
    
    def _calculate_rank_progress(self, karma: int, rank_info: Dict) -> str:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ç–µ–∫—É—â–µ–º –∑–≤–∞–Ω–∏–∏"""
        min_karma = rank_info['min_karma']
        max_karma = rank_info['max_karma']
        
        if max_karma >= 999999:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–≤–∞–Ω–∏–µ
            return f"{karma}/{min_karma}+"
        
        current_progress = karma - min_karma
        max_progress = max_karma - min_karma + 1
        
        return f"{current_progress}/{max_progress}"
    
    def _get_next_rank(self, current_rank_key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–∞–Ω–∏—è"""
        rank_order = ['newbie', 'hope', 'mega', 'ambassador']
        
        try:
            current_index = rank_order.index(current_rank_key)
            if current_index < len(rank_order) - 1:
                next_rank_key = rank_order[current_index + 1]
                return self.ranks_config[next_rank_key]['name']
            else:
                return "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–≤–∞–Ω–∏–µ"
        except ValueError:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # ============================================
    # –õ–ò–î–ï–†–ë–û–†–î –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    def get_leaderboard(self, limit: int = 10) -> List[Dict]:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ"""
        logger.debug(f"üîÑ get_leaderboard({limit}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        return []
    
    def get_karma_stats(self) -> Dict:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä–º—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        logger.debug("üîÑ get_karma_stats() - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        return {
            'total_users_with_karma': 0,
            'average_karma': 0,
            'karma_distributed_today': 0,
            'top_karma_user': None,
            'rank_distribution': {
                'newbie': 0,
                'hope': 0,
                'mega': 0,
                'ambassador': 0
            }
        }
    
    def get_user_karma_history(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"üîÑ get_user_karma_history({user_id}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        return []
    
    # ============================================
    # –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ú–ê–ù–î –ö–ê–†–ú–´ (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    def validate_karma_command(self, command_text: str, admin_id: int) -> Tuple[bool, Dict]:
        """–ó–ê–ì–õ–£–®–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /karma"""
        logger.debug(f"üîÑ validate_karma_command('{command_text}') - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
        parts = command_text.split()
        
        if len(parts) < 3:
            return False, {
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã',
                'help': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /karma @username +/-—á–∏—Å–ª–æ [–ø—Ä–∏—á–∏–Ω–∞]'
            }
        
        # TODO: –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ –ü–ª–∞–Ω–µ 2
        return False, {'error': '–ö–æ–º–∞–Ω–¥—ã –∫–∞—Ä–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)'}
    
    def can_change_karma(self, admin_id: int, target_user_id: int, change: int) -> Tuple[bool, str]:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã"""
        logger.debug(f"üîÑ can_change_karma({admin_id}, {target_user_id}, {change:+d}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ü–ª–∞–Ω–µ 2
        return False, "–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    
    # ============================================
    # COOLDOWN –°–ò–°–¢–ï–ú–ê (–ó–ê–ì–õ–£–®–ö–ò)
    # ============================================
    
    def is_karma_cooldown_active(self, admin_id: int, target_user_id: int) -> Tuple[bool, int]:
        """–ó–ê–ì–õ–£–®–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –º–µ–∂–¥—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏ –∫–∞—Ä–º—ã"""
        logger.debug(f"üîÑ is_karma_cooldown_active({admin_id}, {target_user_id}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–∞–∫—Ç–∏–≤–µ–Ω_–ª–∏_cooldown, —Å–µ–∫—É–Ω–¥_–¥–æ_–∫–æ–Ω—Ü–∞)
        return False, 0
    
    def set_karma_cooldown(self, admin_id: int, target_user_id: int, cooldown_seconds: int = 60):
        """–ó–ê–ì–õ–£–®–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cooldown –¥–ª—è –∫–æ–º–∞–Ω–¥ –∫–∞—Ä–º—ã"""
        logger.debug(f"üîÑ set_karma_cooldown({admin_id}, {target_user_id}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ü–ª–∞–Ω–µ 2
        pass

class KarmaCommandHandler:
    """–ó–ê–ì–õ–£–®–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∫–∞—Ä–º—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å handlers/commands.py"""
    
    def __init__(self, karma_manager: KarmaManager):
        self.karma_manager = karma_manager
        logger.info("üîÑ KarmaCommandHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ó–ê–ì–õ–£–®–ö–ê - –ü–ª–∞–Ω 2)")
    
    def handle_karma_command(self, message, command_text: str) -> str:
        """–ó–ê–ì–õ–£–®–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /karma"""
        logger.debug(f"üîÑ handle_karma_command('{command_text}') - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        return """
üîÑ **–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)**

–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/karma @username +5` - –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫–∞—Ä–º—É
‚Ä¢ `/karma @username -2` - —Å–Ω—è—Ç—å –∫–∞—Ä–º—É  
‚Ä¢ `/leaderboard` - —Ç–æ–ø –ø–æ –∫–∞—Ä–º–µ
‚Ä¢ `/mykarma` - —Ç–≤–æ—è –∫–∞—Ä–º–∞ –∏ –∑–≤–∞–Ω–∏–µ

üí° –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ü–ª–∞–Ω–∞ 2
        """.strip()
    
    def handle_leaderboard_command(self, message) -> str:
        """–ó–ê–ì–õ–£–®–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /leaderboard"""
        logger.debug("üîÑ handle_leaderboard_command() - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
        
        return """
üèÜ **–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)**

–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
‚Ä¢ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ
‚Ä¢ –ó–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä–º—ã

üí° –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!
        """.strip()

# ============================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
# ============================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ä–º—ã
karma_manager = None

def init_karma_system(db_manager):
    """–ó–ê–ì–õ–£–®–ö–ê: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã"""
    global karma_manager
    karma_manager = KarmaManager(db_manager)
    logger.info("üîÑ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–ó–ê–ì–õ–£–®–ö–ê - –ü–ª–∞–Ω 2)")

def get_karma_manager() -> Optional[KarmaManager]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞—Ä–º—ã"""
    return karma_manager

def is_karma_enabled() -> bool:
    """–ó–ê–ì–õ–£–®–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã"""
    # TODO: –ü—Ä–æ–≤–µ—Ä—è—Ç—å feature flag ENABLE_PLAN_2_FEATURES –≤ –ü–ª–∞–Ω–µ 2
    return False

# ============================================
# –ë–´–°–¢–†–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –•–ï–ù–î–õ–ï–†–û–í
# ============================================

def quick_karma_info(user_id: int) -> str:
    """–ó–ê–ì–õ–£–®–ö–ê: –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"üîÑ quick_karma_info({user_id}) - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
    
    return """
üíé **–¢–≤–æ—è –∫–∞—Ä–º–∞**: 0 –±–∞–ª–ª–æ–≤
ü•â **–ó–≤–∞–Ω–∏–µ**: –ù–æ–≤–µ–Ω—å–∫–∏–π
üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å**: ‚ñ±‚ñ±‚ñ±‚ñ±‚ñ± 0/5

üîÑ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)
    """.strip()

def quick_leaderboard() -> str:
    """–ó–ê–ì–õ–£–®–ö–ê: –ë—ã—Å—Ç—Ä—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥"""
    logger.debug("üîÑ quick_leaderboard() - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
    
    return """
üèÜ **–¢–æ–ø –ø–æ –∫–∞—Ä–º–µ**

1. üë§ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...
2. üë§ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...
3. üë§ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...

üîÑ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ü–ª–∞–Ω–µ 2
    """.strip()

def format_karma_change_notification(user_id: int, old_karma: int, new_karma: int, 
                                   admin_id: int, reason: str = "") -> str:
    """–ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä–º—ã"""
    logger.debug(f"üîÑ format_karma_change_notification() - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ü–ª–∞–Ω 2)")
    
    change = new_karma - old_karma
    change_str = f"{change:+d}"
    
    return f"""
üíé **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [ID:{user_id}]
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_str} –±–∞–ª–ª–æ–≤
üîÑ –ë—ã–ª–æ: {old_karma} ‚Üí –°—Ç–∞–ª–æ: {new_karma}
üëÆ –ê–¥–º–∏–Ω: [ID:{admin_id}]
üìù –ü—Ä–∏—á–∏–Ω–∞: {reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üîÑ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    """.strip()

# ============================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –ë–£–î–£–©–ï–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
# ============================================

KARMA_CONFIG = {
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä–º—ã
    'max_karma': 100500,
    'min_karma': 0,
    'daily_karma_limit': 50,
    'admin_karma_limit': 999999,
    
    # Cooldown –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    'karma_cooldown_seconds': 60,
    'auto_karma_cooldown_minutes': 60,
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä–º–∞ (–ü–ª–∞–Ω 3)
    'auto_karma_for_gratitude': 1,
    'gratitude_min_message_length': 10,
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–æ—Ä–º–∞–º–∏ (–ü–ª–∞–Ω 3)
    'karma_for_presave_help': 2,
    'karma_for_form_approval': 3,
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    'notify_karma_changes': True,
    'notify_rank_changes': True,
    'leaderboard_update_frequency': 3600,  # —Å–µ–∫—É–Ω–¥—ã
}

logger.info("‚úÖ services/karma.py –∑–∞–≥—Ä—É–∂–µ–Ω (–ó–ê–ì–õ–£–®–ö–ê –¥–ª—è –ü–ª–∞–Ω–∞ 2)")