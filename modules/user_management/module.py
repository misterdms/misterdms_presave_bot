"""
Modules/user_management/module.py - –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
Do Presave Reminder Bot v29.07

–ú–û–î–£–õ–¨ 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏-–º—É–∑—ã–∫–∞–Ω—Ç–∞–º–∏, —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã, –∑–≤–∞–Ω–∏—è, –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1 (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π)
"""

import asyncio
import re
import time
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime, timedelta

from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from core.interfaces import BaseModule, ModuleInfo, EventTypes, log_execution_time, rate_limit
from core.exceptions import UserError, UserNotFoundError, KarmaError, ValidationError
from utils.logger import get_module_logger, log_user_action, log_command_execution


class UserManagementModule(BaseModule):
    """–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã"""
    
    def __init__(self, bot, database, config, event_dispatcher=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        super().__init__(bot, database, config, event_dispatcher)
        self.logger = get_module_logger("user_management")
        
        # –°–µ—Å—Å–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        self.onboarding_sessions: Dict[int, Dict[str, Any]] = {}
        
        # –ö—É–ª–¥–∞—É–Ω—ã –∫–æ–º–∞–Ω–¥
        self.command_cooldowns: Dict[int, Dict[str, float]] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.karma_settings = {
            'max_karma': 100500,
            'min_karma': 0,
            'admin_karma': 100500,
            'newbie_karma': 0,
            'cooldown_seconds': config.get('karma_cooldown_seconds', 60),
            'gratitude_cooldown_minutes': config.get('gratitude_cooldown_minutes', 60)
        }
        
        # –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π
        self.rank_thresholds = {
            '–ù–æ–≤–µ–Ω—å–∫–∏–π': (0, 5),
            '–ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞': (6, 15), 
            '–ú–µ–≥–∞-–ø–æ–º–æ—â–Ω–∏—á—å–µ': (16, 30),
            '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ': (31, 100500)
        }
        
    def get_info(self) -> ModuleInfo:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ"""
        return ModuleInfo(
            name="user_management",
            version="1.0.0", 
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∫–∞—Ä–º–∞, –∑–≤–∞–Ω–∏—è, –æ–Ω–±–æ—Ä–¥–∏–Ω–≥",
            author="Mister DMS",
            dependencies=[],
            plan=1,
            priority=1
        )
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        try:
            self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
            await self._ensure_database_tables()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä–º—É –∞–¥–º–∏–Ω–æ–≤
            await self._update_admin_karma()
            
            self.logger.info("‚úÖ –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è: {e}")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
            cleanup_task = asyncio.create_task(self._cleanup_old_sessions())
            self._tasks.append(cleanup_task)
            
            self.logger.info("‚úÖ –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è"""
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.onboarding_sessions.clear()
            self.command_cooldowns.clear()
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è: {e}")
            return False
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.bot.register_command_handler('start', self._handle_start)
        self.bot.register_command_handler('mystat', self._handle_mystat)
        self.bot.register_command_handler('mystats', self._handle_mystats)
        self.bot.register_command_handler('profile', self._handle_profile)
        self.bot.register_command_handler('karma_history', self._handle_karma_history)
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞—Ä–º—ã
        self.bot.register_command_handler('karma', self._handle_karma_admin)
        self.bot.register_command_handler('karma_ratio', self._handle_karma_ratio_admin)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        self.bot.register_callback_handler('onboarding_', self._handle_onboarding_callback)
        self.bot.register_callback_handler('genre_', self._handle_genre_selection)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
        self.bot.register_message_handler(
            self._handle_gratitude_message,
            func=lambda message: self._is_gratitude_message(message)
        )
        
        # –ö–æ–º–∞–Ω–¥—ã –≤ —Å–ø–∏—Å–∫–µ
        self._commands = ['start', 'mystat', 'mystats', 'profile', 'karma_history', 'karma', 'karma_ratio']
        
        self.logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self._commands)} –∫–æ–º–∞–Ω–¥")
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
    
    @log_execution_time("start_command")
    async def _handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
        try:
            user_id = message.from_user.id
            group_id = getattr(message.chat, 'id', None)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            async with self.database.get_async_session() as session:
                from .models import MusicUser
                
                existing_user = await session.get(MusicUser, user_id)
                if existing_user:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                    await self.bot.bot.reply_to(
                        message,
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                        f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                        f"üèÜ –¢–≤–æ—è –∫–∞—Ä–º–∞: {existing_user.karma_points}\n"
                        f"üéµ –ó–≤–∞–Ω–∏–µ: {existing_user.rank_title}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π /mystat –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
                    )
                    return
            
            # –ù–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            await self._start_onboarding(message)
            
            log_user_action(user_id, "start_onboarding", {"group_id": group_id})
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            await self.bot.bot.reply_to(
                message,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    @rate_limit(calls_per_minute=30)
    async def _handle_mystat(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mystat - –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self._get_user(user_id)
            if not user:
                await self.bot.bot.reply_to(
                    message,
                    "üë§ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                    "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_text = await self._format_user_stats(user)
            
            await self.bot.bot.reply_to(message, stats_text, parse_mode='Markdown')
            
            log_command_execution(user_id, "mystat", success=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mystat: {e}")
            log_command_execution(message.from_user.id, "mystat", success=False, error=str(e))
    
    @rate_limit(calls_per_minute=20)
    async def _handle_mystats(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mystats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            user_id = message.from_user.id
            
            user = await self._get_user(user_id)
            if not user:
                await self.bot.bot.reply_to(
                    message,
                    "üë§ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            detailed_stats = await self._get_detailed_user_stats(user)
            
            await self.bot.bot.reply_to(message, detailed_stats, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mystats: {e}")
    
    async def _handle_profile(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = message.from_user.id
            
            user = await self._get_user(user_id)
            if not user:
                await self.bot.bot.reply_to(message, "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            profile_text = await self._format_user_profile(user)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("üéµ –°–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä", callback_data="change_genre"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")
            )
            
            await self.bot.bot.reply_to(
                message, 
                profile_text, 
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile: {e}")
    
    async def _handle_karma_history(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /karma_history - –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä–º—ã"""
        try:
            user_id = message.from_user.id
            
            history = await self._get_karma_history(user_id, limit=10)
            
            if not history:
                await self.bot.bot.reply_to(
                    message,
                    "üìà –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä–º—ã –ø—É—Å—Ç–∞."
                )
                return
            
            history_text = "üìà **–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä–º—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):**\n\n"
            
            for entry in history:
                change_icon = "üìà" if entry['change'] > 0 else "üìâ"
                history_text += (
                    f"{change_icon} `{entry['change']:+d}` –∫–∞—Ä–º–∞\n"
                    f"üí¨ {entry['reason']}\n"
                    f"üìÖ {entry['date']}\n\n"
                )
            
            await self.bot.bot.reply_to(message, history_text, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /karma_history: {e}")
    
    # === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –ö–ê–†–ú–´ ===
    
    async def _handle_karma_admin(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /karma (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            if not self._is_admin(message.from_user.id):
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
            
            parts = message.text.split()
            
            if len(parts) < 2:
                await self._send_karma_help(message)
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_mention = parts[1]
            if not target_mention.startswith('@'):
                await self._send_karma_help(message)
                return
            
            target_username = target_mention[1:]  # –£–±–∏—Ä–∞–µ–º @
            
            if len(parts) == 2:
                # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä–º—É
                await self._show_user_karma(message, target_username)
            else:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã
                operation = parts[2]
                await self._change_user_karma(message, target_username, operation)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /karma: {e}")
    
    async def _handle_karma_ratio_admin(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /karma_ratio (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        try:
            if not self._is_admin(message.from_user.id):
                return
            
            parts = message.text.split()
            
            if len(parts) < 2:
                await self._send_karma_ratio_help(message)
                return
            
            target_mention = parts[1]
            if not target_mention.startswith('@'):
                await self._send_karma_ratio_help(message)
                return
            
            target_username = target_mention[1:]
            
            if len(parts) == 2:
                # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                await self._show_karma_ratio(message, target_username)
            else:
                # –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                ratio_str = parts[2]
                await self._change_karma_ratio(message, target_username, ratio_str)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /karma_ratio: {e}")
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–ï–ô ===
    
    async def _handle_gratitude_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—è–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if not self._check_gratitude_cooldown(message.from_user.id):
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            mentions = self._extract_mentions(message.text)
            if not mentions:
                return
            
            giver_id = message.from_user.id
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –∫–∞—Ä–º—É –∫–∞–∂–¥–æ–º—É —É–ø–æ–º—è–Ω—É—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for username in mentions:
                await self._give_gratitude_karma(giver_id, username, message.text)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {e}")
    
    # === –û–ù–ë–û–†–î–ò–ù–ì ===
    
    async def _start_onboarding(self, message: Message):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        self.onboarding_sessions[user_id] = {
            'step': 'welcome',
            'started_at': time.time(),
            'user_data': {
                'user_id': user_id,
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name
            }
        }
        
        welcome_text = (
            f"üéµ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!**\n\n"
            f"–Ø Do Presave Reminder Bot ‚Äî –ø–æ–º–æ–≥–∞—é –º—É–∑—ã–∫–∞–Ω—Ç–∞–º "
            f"–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É!\n\n"
            f"üéØ **–ß—Ç–æ —è —É–º–µ—é:**\n"
            f"‚Ä¢ –í–µ–¥—É —Å–∏—Å—Ç–µ–º—É –∫–∞—Ä–º—ã –∑–∞ –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å\n"
            f"‚Ä¢ –ü–æ–º–æ–≥–∞—é –Ω–∞–π—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç—Ä–µ–∫–æ–≤\n"
            f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –ø—Ä–µ—Å–µ–π–≤–∞—Ö –∏ –±—É—Å—Ç–∞—Ö\n"
            f"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏\n\n"
            f"üöÄ –ì–æ—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?"
        )
        
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("‚úÖ –î–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Å—å!", callback_data="onboarding_start"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="onboarding_cancel")
        )
        
        await self.bot.bot.reply_to(
            message,
            welcome_text,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
    
    async def _handle_onboarding_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        try:
            user_id = call.from_user.id
            action = call.data.replace('onboarding_', '')
            
            if user_id not in self.onboarding_sessions:
                await self.bot.bot.answer_callback_query(
                    call.id,
                    "‚ùå –°–µ—Å—Å–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start"
                )
                return
            
            if action == 'start':
                await self._onboarding_choose_genre(call)
            elif action == 'cancel':
                await self._onboarding_cancel(call)
                
            await self.bot.bot.answer_callback_query(call.id)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ onboarding callback: {e}")
    
    async def _onboarding_choose_genre(self, call: CallbackQuery):
        """–í—ã–±–æ—Ä –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞"""
        user_id = call.from_user.id
        self.onboarding_sessions[user_id]['step'] = 'genre'
        
        genre_text = (
            "üéµ **–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∂–∞–Ω—Ä:**\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –º—É–∑—ã–∫–∞–Ω—Ç–∞–º –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ "
            "–∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–≤–æ—é –º—É–∑—ã–∫—É."
        )
        
        # –ö–Ω–æ–ø–∫–∏ –∂–∞–Ω—Ä–æ–≤
        keyboard = InlineKeyboardMarkup()
        genres = [
            ('üé∏ –†–æ–∫', 'rock'), ('üé§ –ü–æ–ø', 'pop'), ('üéµ –•–∏–ø-—Ö–æ–ø', 'hiphop'),
            ('üéπ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è', 'electronic'), ('üé∫ –î–∂–∞–∑', 'jazz'), ('üéª –ö–ª–∞—Å—Å–∏–∫–∞', 'classical'),
            ('ü™ï –§–æ–ª–∫', 'folk'), ('üé∏ –ë–ª—é–∑', 'blues'), ('ü•Å –î—Ä—É–≥–æ–µ', 'other')
        ]
        
        for i in range(0, len(genres), 2):
            row = []
            for j in range(2):
                if i + j < len(genres):
                    name, code = genres[i + j]
                    row.append(InlineKeyboardButton(name, callback_data=f"genre_{code}"))
            keyboard.row(*row)
        
        keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="onboarding_back"))
        
        await self.bot.bot.edit_message_text(
            genre_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
    
    async def _handle_genre_selection(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞"""
        try:
            user_id = call.from_user.id
            genre_code = call.data.replace('genre_', '')
            
            if user_id not in self.onboarding_sessions:
                await self.bot.bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è
            genre_names = {
                'rock': '–†–æ–∫', 'pop': '–ü–æ–ø', 'hiphop': '–•–∏–ø-—Ö–æ–ø',
                'electronic': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞', 'jazz': '–î–∂–∞–∑',
                'classical': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞', 'folk': '–§–æ–ª–∫',
                'blues': '–ë–ª—é–∑', 'other': '–î—Ä—É–≥–æ–µ'
            }
            
            genre_name = genre_names.get(genre_code, '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–Ω—Ä
            self.onboarding_sessions[user_id]['user_data']['music_genre'] = genre_name
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await self._complete_onboarding(call, genre_name)
            
            await self.bot.bot.answer_callback_query(call.id)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞: {e}")
    
    async def _complete_onboarding(self, call: CallbackQuery, genre: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        try:
            user_id = call.from_user.id
            session = self.onboarding_sessions[user_id]
            user_data = session['user_data']
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            async with self.database.get_async_session() as db_session:
                from .models import MusicUser
                
                new_user = MusicUser(
                    user_id=user_data['user_id'],
                    group_id=call.message.chat.id,
                    username=user_data.get('username'),
                    first_name=user_data.get('first_name'),
                    last_name=user_data.get('last_name'),
                    music_genre=genre,
                    karma_points=self.karma_settings['newbie_karma'],
                    rank_title=self._get_rank_title(self.karma_settings['newbie_karma']),
                    is_admin=self._is_admin(user_id)
                )
                
                db_session.add(new_user)
                await db_session.commit()
            
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–∞—Ä–º—É
            if self._is_admin(user_id):
                await self._set_user_karma(user_id, self.karma_settings['admin_karma'], "–ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞")
            
            success_text = (
                f"üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üë§ **–ò–º—è:** {user_data.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üéµ **–ñ–∞–Ω—Ä:** {genre}\n"
                f"üèÜ **–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–∞—Ä–º–∞:** {self.karma_settings['newbie_karma']}\n"
                f"üéñÔ∏è **–ó–≤–∞–Ω–∏–µ:** {self._get_rank_title(self.karma_settings['newbie_karma'])}\n\n"
                f"üöÄ **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /mystat –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                f"‚Ä¢ –ü—É–±–ª–∏–∫—É–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ç–æ–ø–∏–∫–µ #3\n"
                f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥—Ä—É–≥–∏—Ö –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤\n"
                f"‚Ä¢ –ë–ª–∞–≥–æ–¥–∞—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ–º–æ—â—å\n\n"
                f"üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!"
            )
            
            await self.bot.bot.edit_message_text(
                success_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown'
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            del self.onboarding_sessions[user_id]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            if self.event_dispatcher:
                await self.event_dispatcher.emit(
                    EventTypes.USER_REGISTERED,
                    {
                        'user_id': user_id,
                        'username': user_data.get('username'),
                        'genre': genre,
                        'karma': self.karma_settings['newbie_karma']
                    }
                )
            
            log_user_action(user_id, "registration_completed", {
                'genre': genre,
                'karma': self.karma_settings['newbie_karma']
            })
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}")
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    async def _get_user(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
        try:
            async with self.database.get_async_session() as session:
                from .models import MusicUser
                user = await session.get(MusicUser, user_id)
                return user
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        admin_ids = getattr(self.config, 'admin_ids', [])
        return user_id in admin_ids
    
    def _get_rank_title(self, karma: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ä–º–µ"""
        for title, (min_karma, max_karma) in self.rank_thresholds.items():
            if min_karma <= karma <= max_karma:
                return title
        return "–ù–æ–≤–µ–Ω—å–∫–∏–π"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _is_gratitude_message(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é"""
        if not message.text:
            return False
        
        gratitude_words = [
            '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks', 'thank you',
            '–º–µ—Ä—Å–∏', '—Ä–µ—Å–ø–µ–∫—Ç', '–ª–∞–π–∫', '—Ç–æ–ø', '–æ–≥–æ–Ω—å'
        ]
        
        text_lower = message.text.lower()
        has_gratitude = any(word in text_lower for word in gratitude_words)
        has_mention = '@' in message.text
        
        return has_gratitude and has_mention
    
    def _extract_mentions(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        pattern = r'@(\w+)'
        mentions = re.findall(pattern, text)
        return mentions
    
    def _check_gratitude_cooldown(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
        now = time.time()
        cooldown = self.karma_settings['gratitude_cooldown_minutes'] * 60
        
        if user_id not in self.command_cooldowns:
            self.command_cooldowns[user_id] = {}
        
        last_gratitude = self.command_cooldowns[user_id].get('gratitude', 0)
        
        if now - last_gratitude < cooldown:
            return False
        
        self.command_cooldowns[user_id]['gratitude'] = now
        return True
    
    async def _format_user_stats(self, user) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        rank_emoji = {
            '–ù–æ–≤–µ–Ω—å–∫–∏–π': 'ü•â',
            '–ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞': 'ü•à', 
            '–ú–µ–≥–∞-–ø–æ–º–æ—â–Ω–∏—á—å–µ': 'ü•á',
            '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ': 'üíé'
        }
        
        emoji = rank_emoji.get(user.rank_title, 'üéµ')
        
        stats = (
            f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"{emoji} **–ó–≤–∞–Ω–∏–µ:** {user.rank_title}\n"
            f"üèÜ **–ö–∞—Ä–º–∞:** {user.karma_points}/{self.karma_settings['max_karma']}\n"
            f"üéµ **–ñ–∞–Ω—Ä:** {user.music_genre or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
            f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å—Å—ã–ª–æ–∫: {user.links_published}\n"
            f"‚Ä¢ –ü—Ä–µ—Å–µ–π–≤–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: {user.presaves_given}\n"
            f"‚Ä¢ –ü—Ä–µ—Å–µ–π–≤–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {user.presaves_received}\n"
            f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–∞–ª/–ø–æ–ª—É—á–∏–ª: {user.presave_ratio:.2f}\n"
            f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–∞—Ä–º–∞/—Å—Å—ã–ª–∫–∏: {user.karma_to_links_ratio:.2f}\n\n"
            f"üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.registration_date.strftime('%d.%m.%Y')}\n"
            f"üïê **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {user.last_activity.strftime('%d.%m.%Y %H:%M')}"
        )
        
        return stats
    
    async def _ensure_database_tables(self):
        """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ë–î"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ SQLAlchemy
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ database_core
            pass
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            raise
    
    async def _update_admin_karma(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º—ã –∞–¥–º–∏–Ω–æ–≤ –¥–æ 100500"""
        try:
            admin_ids = getattr(self.config, 'admin_ids', [])
            if not admin_ids:
                return
            
            async with self.database.get_async_session() as session:
                from .models import MusicUser
                
                for admin_id in admin_ids:
                    user = await session.get(MusicUser, admin_id)
                    if user and user.karma_points != self.karma_settings['admin_karma']:
                        user.karma_points = self.karma_settings['admin_karma']
                        user.rank_title = self._get_rank_title(self.karma_settings['admin_karma'])
                        user.is_admin = True
                
                await session.commit()
                
            self.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä–º–∞ {len(admin_ids)} –∞–¥–º–∏–Ω–æ–≤")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä–º—ã –∞–¥–º–∏–Ω–æ–≤: {e}")
    
    async def _cleanup_old_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        while True:
            try:
                current_time = time.time()
                expired_sessions = []
                
                for user_id, session in self.onboarding_sessions.items():
                    if current_time - session['started_at'] > 1800:  # 30 –º–∏–Ω—É—Ç
                        expired_sessions.append(user_id)
                
                for user_id in expired_sessions:
                    del self.onboarding_sessions[user_id]
                    self.logger.debug(f"üßπ –£–¥–∞–ª–µ–Ω–∞ –∏—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {user_id}")
                
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
                await asyncio.sleep(60)
    
    # === WEBAPP –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
    
    async def handle_webapp_command(self, session, command: str, data: Dict[str, Any], message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç WebApp"""
        try:
            if command == 'get_user_stats':
                user = await self._get_user(session.user_id)
                if user:
                    stats = await self._format_user_stats(user)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ WebApp —Ñ–æ—Ä–º–∞—Ç–µ
                    response = {
                        "action": "user_stats_response",
                        "data": {
                            "karma": user.karma_points,
                            "rank": user.rank_title,
                            "genre": user.music_genre,
                            "stats": stats
                        }
                    }
                    await self.bot.bot.reply_to(message, str(response))
                
            elif command == 'get_leaderboard':
                # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è WebApp
                pass
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebApp –∫–æ–º–∞–Ω–¥—ã {command}: {e}")


# === –≠–ö–°–ü–û–†–¢ ===

# –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –º–æ–¥—É–ª–µ–π
Module = UserManagementModule