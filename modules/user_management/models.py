"""
Modules/user_management/models.py - –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Do Presave Reminder Bot v29.07

SQLAlchemy –º–æ–¥–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã
"""

from datetime import datetime
from typing import Dict, Any, Optional
from sqlalchemy import Column, Integer, String, DateTime, Boolean, Text, DECIMAL, BigInteger, Date
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func

from core.database_core import Base


class MusicUser(Base):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
    __tablename__ = 'music_users'
    
    # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    group_id = Column(BigInteger, nullable=False, index=True)
    user_id = Column(BigInteger, nullable=False, unique=True, index=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = Column(String(100), nullable=True)
    first_name = Column(String(100), nullable=True)
    last_name = Column(String(100), nullable=True)
    
    # –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –∏ –∑–≤–∞–Ω–∏–π
    karma_points = Column(Integer, default=0, nullable=False, index=True)
    rank_title = Column(String(50), default='ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π', nullable=False)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ—Å–µ–π–≤–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    presaves_given = Column(Integer, default=0, nullable=False)
    presaves_received = Column(Integer, default=0, nullable=False)
    presave_ratio = Column(DECIMAL(5,2), default=0.0, nullable=False)
    links_published = Column(Integer, default=0, nullable=False)
    karma_to_links_ratio = Column(DECIMAL(5,2), default=0.0, nullable=False)
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    music_genre = Column(String(50), nullable=True)
    is_admin = Column(Boolean, default=False, nullable=False, index=True)
    
    # WebApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    webapp_last_visit = Column(DateTime, nullable=True)
    webapp_visit_count = Column(Integer, default=0, nullable=False)
    preferred_interface = Column(String(20), default='bot', nullable=False)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    registration_date = Column(DateTime, default=func.now(), nullable=False)
    last_activity = Column(DateTime, default=func.now(), nullable=False, index=True)
    is_active = Column(Boolean, default=True, nullable=False)
    
    def __repr__(self):
        return f"<MusicUser(user_id={self.user_id}, username='{self.username}', karma={self.karma_points})>"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'user_id': self.user_id,
            'group_id': self.group_id,
            'username': self.username,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'karma_points': self.karma_points,
            'rank_title': self.rank_title,
            'presaves_given': self.presaves_given,
            'presaves_received': self.presaves_received,
            'presave_ratio': float(self.presave_ratio),
            'links_published': self.links_published,
            'karma_to_links_ratio': float(self.karma_to_links_ratio),
            'music_genre': self.music_genre,
            'is_admin': self.is_admin,
            'webapp_last_visit': self.webapp_last_visit.isoformat() if self.webapp_last_visit else None,
            'webapp_visit_count': self.webapp_visit_count,
            'preferred_interface': self.preferred_interface,
            'registration_date': self.registration_date.isoformat() if self.registration_date else None,
            'last_activity': self.last_activity.isoformat() if self.last_activity else None,
            'is_active': self.is_active
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'MusicUser':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        user = cls()
        for key, value in data.items():
            if hasattr(user, key) and key not in ['id']:  # id –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
                if key in ['registration_date', 'last_activity', 'webapp_last_visit'] and value:
                    if isinstance(value, str):
                        value = datetime.fromisoformat(value)
                setattr(user, key, value)
        return user
    
    def get_display_name(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏"""
        if self.username:
            return f"@{self.username}"
        elif self.first_name:
            return self.first_name
        else:
            return f"User_{self.user_id}"
    
    def get_rank_emoji(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∑–≤–∞–Ω–∏—è"""
        rank_emojis = {
            '–ù–æ–≤–µ–Ω—å–∫–∏–π': 'ü•â',
            '–ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞': 'ü•à',
            '–ú–µ–≥–∞-–ø–æ–º–æ—â–Ω–∏—á—å–µ': 'ü•á',
            '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ': 'üíé'
        }
        
        for rank_name, emoji in rank_emojis.items():
            if rank_name in self.rank_title:
                return emoji
        
        return 'üéµ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def get_karma_percentage(self, max_karma: int = 100500) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–∞—Ä–º—ã –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞"""
        return (self.karma_points / max_karma) * 100
    
    def is_newbie(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–∏—á–∫–æ–º"""
        return self.karma_points <= 5
    
    def can_change_karma(self, change_amount: int, max_karma: int = 100500) -> tuple[bool, Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
        new_karma = self.karma_points + change_amount
        
        if new_karma < 0:
            return False, "–ö–∞—Ä–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π"
        
        if new_karma > max_karma:
            return False, f"–ö–∞—Ä–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_karma}"
        
        return True, None
    
    def update_activity(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.last_activity = datetime.now()
    
    def update_webapp_visit(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ WebApp"""
        self.webapp_last_visit = datetime.now()
        self.webapp_visit_count += 1


class KarmaHistory(Base):
    """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    __tablename__ = 'karma_history'
    
    # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    group_id = Column(BigInteger, nullable=False, index=True)
    user_id = Column(BigInteger, nullable=False, index=True)
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã
    karma_change = Column(Integer, nullable=False)
    karma_before = Column(Integer, nullable=False)
    karma_after = Column(Integer, nullable=False)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    reason = Column(String(500), nullable=False)
    change_type = Column(String(50), default='manual', nullable=False)  # 'manual', 'auto', 'gratitude', 'penalty'
    
    # –ö—Ç–æ –∏–∑–º–µ–Ω–∏–ª (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥)
    changed_by_user_id = Column(BigInteger, nullable=True)
    changed_by_username = Column(String(100), nullable=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    metadata = Column(Text, nullable=True)  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime, default=func.now(), nullable=False, index=True)
    
    def __repr__(self):
        return f"<KarmaHistory(user_id={self.user_id}, change={self.karma_change}, reason='{self.reason}')>"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'user_id': self.user_id,
            'group_id': self.group_id,
            'karma_change': self.karma_change,
            'karma_before': self.karma_before,
            'karma_after': self.karma_after,
            'reason': self.reason,
            'change_type': self.change_type,
            'changed_by_user_id': self.changed_by_user_id,
            'changed_by_username': self.changed_by_username,
            'metadata': self.metadata,
            'created_at': self.created_at.isoformat() if self.created_at else None
        }
    
    def get_change_icon(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        if self.karma_change > 0:
            return "üìà"
        elif self.karma_change < 0:
            return "üìâ"
        else:
            return "üìä"
    
    def get_change_text(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        if self.karma_change > 0:
            return f"+{self.karma_change}"
        else:
            return str(self.karma_change)
    
    def is_recent(self, hours: int = 24) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏–º"""
        if not self.created_at:
            return False
        
        time_diff = datetime.now() - self.created_at
        return time_diff.total_seconds() < (hours * 3600)


class UserStatistics(Base):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    __tablename__ = 'user_statistics'
    
    # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_id = Column(BigInteger, nullable=False, index=True)
    group_id = Column(BigInteger, nullable=False, index=True)
    
    # –î–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stat_date = Column(Date, nullable=False, index=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
    messages_sent = Column(Integer, default=0, nullable=False)
    commands_used = Column(Integer, default=0, nullable=False)
    links_shared = Column(Integer, default=0, nullable=False)
    presaves_made = Column(Integer, default=0, nullable=False)
    karma_received = Column(Integer, default=0, nullable=False)
    karma_given = Column(Integer, default=0, nullable=False)
    
    # WebApp –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    webapp_sessions = Column(Integer, default=0, nullable=False)
    webapp_time_spent = Column(Integer, default=0, nullable=False)  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime, default=func.now(), nullable=False)
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False)
    
    def __repr__(self):
        return f"<UserStatistics(user_id={self.user_id}, date={self.stat_date}, messages={self.messages_sent})>"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'user_id': self.user_id,
            'group_id': self.group_id,
            'stat_date': self.stat_date.isoformat() if self.stat_date else None,
            'messages_sent': self.messages_sent,
            'commands_used': self.commands_used,
            'links_shared': self.links_shared,
            'presaves_made': self.presaves_made,
            'karma_received': self.karma_received,
            'karma_given': self.karma_given,
            'webapp_sessions': self.webapp_sessions,
            'webapp_time_spent': self.webapp_time_spent,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
    
    def get_activity_score(self) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        score = (
            self.messages_sent * 1 +
            self.commands_used * 2 +
            self.links_shared * 5 +
            self.presaves_made * 3 +
            self.karma_received * 2 +
            self.karma_given * 1.5 +
            self.webapp_sessions * 1
        )
        return score


class UserSession(Base):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏ (–¥–ª—è WebApp –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π)"""
    __tablename__ = 'user_sessions'
    
    # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    session_id = Column(String(100), nullable=False, unique=True, index=True)
    user_id = Column(BigInteger, nullable=False, index=True)
    group_id = Column(BigInteger, nullable=False, index=True)
    
    # –¢–∏–ø —Å–µ—Å—Å–∏–∏
    session_type = Column(String(50), default='webapp', nullable=False)  # 'webapp', 'onboarding', 'form'
    session_data = Column(Text, nullable=True)  # JSON –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    
    # –°—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    is_active = Column(Boolean, default=True, nullable=False)
    last_activity = Column(DateTime, default=func.now(), nullable=False, index=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    ip_address = Column(String(45), nullable=True)  # IPv6 –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    user_agent = Column(String(500), nullable=True)
    platform = Column(String(50), nullable=True)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime, default=func.now(), nullable=False)
    expires_at = Column(DateTime, nullable=True, index=True)
    
    def __repr__(self):
        return f"<UserSession(session_id='{self.session_id}', user_id={self.user_id}, type='{self.session_type}')>"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'session_id': self.session_id,
            'user_id': self.user_id,
            'group_id': self.group_id,
            'session_type': self.session_type,
            'session_data': self.session_data,
            'is_active': self.is_active,
            'last_activity': self.last_activity.isoformat() if self.last_activity else None,
            'ip_address': self.ip_address,
            'user_agent': self.user_agent,
            'platform': self.platform,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'expires_at': self.expires_at.isoformat() if self.expires_at else None
        }
    
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        if not self.expires_at:
            return False
        return datetime.now() > self.expires_at
    
    def extend_session(self, hours: int = 24):
        """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        self.expires_at = datetime.now() + timedelta(hours=hours)
        self.last_activity = datetime.now()
    
    def get_session_duration(self) -> timedelta:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        if not self.created_at:
            return timedelta(0)
        
        end_time = self.last_activity or datetime.now()
        return end_time - self.created_at


# === –ò–ù–î–ï–ö–°–´ –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ===

# –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
from sqlalchemy import Index

# –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–µ –∏ –∫–∞—Ä–º–µ
Index('idx_music_users_group_karma', MusicUser.group_id, MusicUser.karma_points)

# –ò–Ω–¥–µ–∫—Å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä–º—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –¥–∞—Ç–µ
Index('idx_karma_history_user_date', KarmaHistory.user_id, KarmaHistory.created_at)

# –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –¥–∞—Ç–µ
Index('idx_user_statistics_user_date', UserStatistics.user_id, UserStatistics.stat_date)

# –ò–Ω–¥–µ–∫—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
Index('idx_user_sessions_active', UserSession.user_id, UserSession.is_active, UserSession.last_activity)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def get_rank_title_by_karma(karma: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä–º—ã"""
    if karma >= 31:
        return "üíé –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∏—â–µ"
    elif karma >= 16:
        return "ü•á –ú–µ–≥–∞-–ø–æ–º–æ—â–Ω–∏—á—å–µ"
    elif karma >= 6:
        return "ü•à –ù–∞–¥–µ–∂–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
    else:
        return "ü•â –ù–æ–≤–µ–Ω—å–∫–∏–π"


def calculate_presave_ratio(given: int, received: int) -> float:
    """–†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–≤–æ–≤ –¥–∞–ª/–ø–æ–ª—É—á–∏–ª"""
    if received == 0:
        return float(given)
    return round(given / received, 2)


def calculate_karma_links_ratio(karma: int, links: int) -> float:
    """–†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫–∞—Ä–º–∞/—Å—Å—ã–ª–∫–∏"""
    if links == 0:
        return float(karma)
    return round(karma / links, 2)


def is_valid_karma_value(karma: int, min_karma: int = 0, max_karma: int = 100500) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
    return min_karma <= karma <= max_karma


def get_karma_change_reason(change_type: str, change_amount: int, context: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã"""
    reasons = {
        'manual': f"–†—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ {change_amount:+d}",
        'auto': f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ {change_amount:+d}",
        'gratitude': f"–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (+{change_amount})",
        'penalty': f"–®—Ç—Ä–∞—Ñ ({change_amount})",
        'admin_adjustment': f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∞ ({change_amount:+d})",
        'system_bonus': f"–°–∏—Å—Ç–µ–º–Ω—ã–π –±–æ–Ω—É—Å (+{change_amount})"
    }
    
    base_reason = reasons.get(change_type, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ {change_amount:+d}")
    
    if context:
        base_reason += f" | {context}"
    
    return base_reason


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = MusicUser(
        user_id=12345,
        group_id=-1001234567890,
        username="test_user",
        first_name="–¢–µ—Å—Ç",
        last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        music_genre="–†–æ–∫",
        karma_points=10
    )
    
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
    print(f"üìä –°–ª–æ–≤–∞—Ä—å: {user.to_dict()}")
    print(f"üèÜ –ó–≤–∞–Ω–∏–µ: {get_rank_title_by_karma(user.karma_points)}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—Ä–º—ã: {user.get_karma_percentage():.1f}%")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞—Ä–º—ã
    karma_entry = KarmaHistory(
        user_id=12345,
        group_id=-1001234567890,
        karma_change=5,
        karma_before=10,
        karma_after=15,
        reason="–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫—É",
        change_type="gratitude"
    )
    
    print(f"üìà –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä–º—ã: {karma_entry}")
    print(f"üéØ –ò–∫–æ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {karma_entry.get_change_icon()}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")